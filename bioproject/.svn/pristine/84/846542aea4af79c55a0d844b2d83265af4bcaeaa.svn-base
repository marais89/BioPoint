// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.bio.jobs;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.Kb2iDataGenerator;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: loadDataToDW Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.4.1.r111943
 * @status 
 */
public class LoadDataToDW implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "loadDataToDW";
	private final String projectName = "MIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					LoadDataToDW.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(LoadDataToDW.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_10", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_8", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_6", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_8", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_11", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_12", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_9", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_affiliationDW_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_affiliationDW", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_tempsDW_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_tempsDW", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_mois_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_mois", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_historiqueDW_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_historiqueDW", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class personnelOutStruct implements
			routines.system.IPersistableRow<personnelOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public String matricule;

		public String getMatricule() {
			return this.matricule;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer cp;

		public Integer getCp() {
			return this.cp;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public Long cin;

		public Long getCin() {
			return this.cin;
		}

		public Object photo;

		public Object getPhoto() {
			return this.photo;
		}

		public java.util.Date debutContrat;

		public java.util.Date getDebutContrat() {
			return this.debutContrat;
		}

		public java.util.Date finContrat;

		public java.util.Date getFinContrat() {
			return this.finContrat;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public java.util.Date dateNaissance;

		public java.util.Date getDateNaissance() {
			return this.dateNaissance;
		}

		public String typeContrat;

		public String getTypeContrat() {
			return this.typeContrat;
		}

		public java.util.Date dateCreation;

		public java.util.Date getDateCreation() {
			return this.dateCreation;
		}

		public Boolean actif;

		public Boolean getActif() {
			return this.actif;
		}

		public String civilite;

		public String getCivilite() {
			return this.civilite;
		}

		public String telFixe;

		public String getTelFixe() {
			return this.telFixe;
		}

		public String telGsm;

		public String getTelGsm() {
			return this.telGsm;
		}

		public String bckNom;

		public String getBckNom() {
			return this.bckNom;
		}

		public String bckPrivilege;

		public String getBckPrivilege() {
			return this.bckPrivilege;
		}

		public Integer droitConge;

		public Integer getDroitConge() {
			return this.droitConge;
		}

		public Integer congeAccorde;

		public Integer getCongeAccorde() {
			return this.congeAccorde;
		}

		public Integer droitRecuperation;

		public Integer getDroitRecuperation() {
			return this.droitRecuperation;
		}

		public Integer encoursDroitRecuperation;

		public Integer getEncoursDroitRecuperation() {
			return this.encoursDroitRecuperation;
		}

		public Integer recuperationAccorde;

		public Integer getRecuperationAccorde() {
			return this.recuperationAccorde;
		}

		public Integer bckIdEnroll;

		public Integer getBckIdEnroll() {
			return this.bckIdEnroll;
		}

		public Integer bckId;

		public Integer getBckId() {
			return this.bckId;
		}

		public String infoSupp;

		public String getInfoSupp() {
			return this.infoSupp;
		}

		public Integer idter;

		public Integer getIdter() {
			return this.idter;
		}

		public String photoName;

		public String getPhotoName() {
			return this.photoName;
		}

		public String nomPrenom;

		public String getNomPrenom() {
			return this.nomPrenom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idper;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final personnelOutStruct other = (personnelOutStruct) obj;

			if (this.idper != other.idper)
				return false;

			return true;
		}

		public void copyDataTo(personnelOutStruct other) {

			other.idper = this.idper;
			other.matricule = this.matricule;
			other.nom = this.nom;
			other.prenom = this.prenom;
			other.adresse = this.adresse;
			other.cp = this.cp;
			other.ville = this.ville;
			other.cin = this.cin;
			other.photo = this.photo;
			other.debutContrat = this.debutContrat;
			other.finContrat = this.finContrat;
			other.mail = this.mail;
			other.dateNaissance = this.dateNaissance;
			other.typeContrat = this.typeContrat;
			other.dateCreation = this.dateCreation;
			other.actif = this.actif;
			other.civilite = this.civilite;
			other.telFixe = this.telFixe;
			other.telGsm = this.telGsm;
			other.bckNom = this.bckNom;
			other.bckPrivilege = this.bckPrivilege;
			other.droitConge = this.droitConge;
			other.congeAccorde = this.congeAccorde;
			other.droitRecuperation = this.droitRecuperation;
			other.encoursDroitRecuperation = this.encoursDroitRecuperation;
			other.recuperationAccorde = this.recuperationAccorde;
			other.bckIdEnroll = this.bckIdEnroll;
			other.bckId = this.bckId;
			other.infoSupp = this.infoSupp;
			other.idter = this.idter;
			other.photoName = this.photoName;
			other.nomPrenom = this.nomPrenom;

		}

		public void copyKeysDataTo(personnelOutStruct other) {

			other.idper = this.idper;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idper = dis.readInt();

					this.matricule = readString(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

					this.adresse = readString(dis);

					this.cp = readInteger(dis);

					this.ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cin = null;
					} else {
						this.cin = dis.readLong();
					}

					this.photo = (Object) dis.readObject();

					this.debutContrat = readDate(dis);

					this.finContrat = readDate(dis);

					this.mail = readString(dis);

					this.dateNaissance = readDate(dis);

					this.typeContrat = readString(dis);

					this.dateCreation = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actif = null;
					} else {
						this.actif = dis.readBoolean();
					}

					this.civilite = readString(dis);

					this.telFixe = readString(dis);

					this.telGsm = readString(dis);

					this.bckNom = readString(dis);

					this.bckPrivilege = readString(dis);

					this.droitConge = readInteger(dis);

					this.congeAccorde = readInteger(dis);

					this.droitRecuperation = readInteger(dis);

					this.encoursDroitRecuperation = readInteger(dis);

					this.recuperationAccorde = readInteger(dis);

					this.bckIdEnroll = readInteger(dis);

					this.bckId = readInteger(dis);

					this.infoSupp = readString(dis);

					this.idter = readInteger(dis);

					this.photoName = readString(dis);

					this.nomPrenom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idper);

				// String

				writeString(this.matricule, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.cp, dos);

				// String

				writeString(this.ville, dos);

				// Long

				if (this.cin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cin);
				}

				// Object

				dos.writeObject(this.photo);

				// java.util.Date

				writeDate(this.debutContrat, dos);

				// java.util.Date

				writeDate(this.finContrat, dos);

				// String

				writeString(this.mail, dos);

				// java.util.Date

				writeDate(this.dateNaissance, dos);

				// String

				writeString(this.typeContrat, dos);

				// java.util.Date

				writeDate(this.dateCreation, dos);

				// Boolean

				if (this.actif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actif);
				}

				// String

				writeString(this.civilite, dos);

				// String

				writeString(this.telFixe, dos);

				// String

				writeString(this.telGsm, dos);

				// String

				writeString(this.bckNom, dos);

				// String

				writeString(this.bckPrivilege, dos);

				// Integer

				writeInteger(this.droitConge, dos);

				// Integer

				writeInteger(this.congeAccorde, dos);

				// Integer

				writeInteger(this.droitRecuperation, dos);

				// Integer

				writeInteger(this.encoursDroitRecuperation, dos);

				// Integer

				writeInteger(this.recuperationAccorde, dos);

				// Integer

				writeInteger(this.bckIdEnroll, dos);

				// Integer

				writeInteger(this.bckId, dos);

				// String

				writeString(this.infoSupp, dos);

				// Integer

				writeInteger(this.idter, dos);

				// String

				writeString(this.photoName, dos);

				// String

				writeString(this.nomPrenom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idper=" + String.valueOf(idper));
			sb.append(",matricule=" + matricule);
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append(",adresse=" + adresse);
			sb.append(",cp=" + String.valueOf(cp));
			sb.append(",ville=" + ville);
			sb.append(",cin=" + String.valueOf(cin));
			sb.append(",photo=" + String.valueOf(photo));
			sb.append(",debutContrat=" + String.valueOf(debutContrat));
			sb.append(",finContrat=" + String.valueOf(finContrat));
			sb.append(",mail=" + mail);
			sb.append(",dateNaissance=" + String.valueOf(dateNaissance));
			sb.append(",typeContrat=" + typeContrat);
			sb.append(",dateCreation=" + String.valueOf(dateCreation));
			sb.append(",actif=" + String.valueOf(actif));
			sb.append(",civilite=" + civilite);
			sb.append(",telFixe=" + telFixe);
			sb.append(",telGsm=" + telGsm);
			sb.append(",bckNom=" + bckNom);
			sb.append(",bckPrivilege=" + bckPrivilege);
			sb.append(",droitConge=" + String.valueOf(droitConge));
			sb.append(",congeAccorde=" + String.valueOf(congeAccorde));
			sb.append(",droitRecuperation=" + String.valueOf(droitRecuperation));
			sb.append(",encoursDroitRecuperation="
					+ String.valueOf(encoursDroitRecuperation));
			sb.append(",recuperationAccorde="
					+ String.valueOf(recuperationAccorde));
			sb.append(",bckIdEnroll=" + String.valueOf(bckIdEnroll));
			sb.append(",bckId=" + String.valueOf(bckId));
			sb.append(",infoSupp=" + infoSupp);
			sb.append(",idter=" + String.valueOf(idter));
			sb.append(",photoName=" + photoName);
			sb.append(",nomPrenom=" + nomPrenom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(personnelOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idper, other.idper);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class personnelStruct implements
			routines.system.IPersistableRow<personnelStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public String matricule;

		public String getMatricule() {
			return this.matricule;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer cp;

		public Integer getCp() {
			return this.cp;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public Long cin;

		public Long getCin() {
			return this.cin;
		}

		public Object photo;

		public Object getPhoto() {
			return this.photo;
		}

		public java.util.Date debutContrat;

		public java.util.Date getDebutContrat() {
			return this.debutContrat;
		}

		public java.util.Date finContrat;

		public java.util.Date getFinContrat() {
			return this.finContrat;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public java.util.Date dateNaissance;

		public java.util.Date getDateNaissance() {
			return this.dateNaissance;
		}

		public String typeContrat;

		public String getTypeContrat() {
			return this.typeContrat;
		}

		public java.util.Date dateCreation;

		public java.util.Date getDateCreation() {
			return this.dateCreation;
		}

		public Boolean actif;

		public Boolean getActif() {
			return this.actif;
		}

		public String civilite;

		public String getCivilite() {
			return this.civilite;
		}

		public String telFixe;

		public String getTelFixe() {
			return this.telFixe;
		}

		public String telGsm;

		public String getTelGsm() {
			return this.telGsm;
		}

		public String bckNom;

		public String getBckNom() {
			return this.bckNom;
		}

		public String bckPrivilege;

		public String getBckPrivilege() {
			return this.bckPrivilege;
		}

		public Integer droitConge;

		public Integer getDroitConge() {
			return this.droitConge;
		}

		public Integer congeAccorde;

		public Integer getCongeAccorde() {
			return this.congeAccorde;
		}

		public Integer droitRecuperation;

		public Integer getDroitRecuperation() {
			return this.droitRecuperation;
		}

		public Integer encoursDroitRecuperation;

		public Integer getEncoursDroitRecuperation() {
			return this.encoursDroitRecuperation;
		}

		public Integer recuperationAccorde;

		public Integer getRecuperationAccorde() {
			return this.recuperationAccorde;
		}

		public Integer bckIdEnroll;

		public Integer getBckIdEnroll() {
			return this.bckIdEnroll;
		}

		public Integer bckId;

		public Integer getBckId() {
			return this.bckId;
		}

		public String infoSupp;

		public String getInfoSupp() {
			return this.infoSupp;
		}

		public Integer idter;

		public Integer getIdter() {
			return this.idter;
		}

		public String photoName;

		public String getPhotoName() {
			return this.photoName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idper = dis.readInt();

					this.matricule = readString(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

					this.adresse = readString(dis);

					this.cp = readInteger(dis);

					this.ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cin = null;
					} else {
						this.cin = dis.readLong();
					}

					this.photo = (Object) dis.readObject();

					this.debutContrat = readDate(dis);

					this.finContrat = readDate(dis);

					this.mail = readString(dis);

					this.dateNaissance = readDate(dis);

					this.typeContrat = readString(dis);

					this.dateCreation = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actif = null;
					} else {
						this.actif = dis.readBoolean();
					}

					this.civilite = readString(dis);

					this.telFixe = readString(dis);

					this.telGsm = readString(dis);

					this.bckNom = readString(dis);

					this.bckPrivilege = readString(dis);

					this.droitConge = readInteger(dis);

					this.congeAccorde = readInteger(dis);

					this.droitRecuperation = readInteger(dis);

					this.encoursDroitRecuperation = readInteger(dis);

					this.recuperationAccorde = readInteger(dis);

					this.bckIdEnroll = readInteger(dis);

					this.bckId = readInteger(dis);

					this.infoSupp = readString(dis);

					this.idter = readInteger(dis);

					this.photoName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idper);

				// String

				writeString(this.matricule, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.cp, dos);

				// String

				writeString(this.ville, dos);

				// Long

				if (this.cin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.cin);
				}

				// Object

				dos.writeObject(this.photo);

				// java.util.Date

				writeDate(this.debutContrat, dos);

				// java.util.Date

				writeDate(this.finContrat, dos);

				// String

				writeString(this.mail, dos);

				// java.util.Date

				writeDate(this.dateNaissance, dos);

				// String

				writeString(this.typeContrat, dos);

				// java.util.Date

				writeDate(this.dateCreation, dos);

				// Boolean

				if (this.actif == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actif);
				}

				// String

				writeString(this.civilite, dos);

				// String

				writeString(this.telFixe, dos);

				// String

				writeString(this.telGsm, dos);

				// String

				writeString(this.bckNom, dos);

				// String

				writeString(this.bckPrivilege, dos);

				// Integer

				writeInteger(this.droitConge, dos);

				// Integer

				writeInteger(this.congeAccorde, dos);

				// Integer

				writeInteger(this.droitRecuperation, dos);

				// Integer

				writeInteger(this.encoursDroitRecuperation, dos);

				// Integer

				writeInteger(this.recuperationAccorde, dos);

				// Integer

				writeInteger(this.bckIdEnroll, dos);

				// Integer

				writeInteger(this.bckId, dos);

				// String

				writeString(this.infoSupp, dos);

				// Integer

				writeInteger(this.idter, dos);

				// String

				writeString(this.photoName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idper=" + String.valueOf(idper));
			sb.append(",matricule=" + matricule);
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append(",adresse=" + adresse);
			sb.append(",cp=" + String.valueOf(cp));
			sb.append(",ville=" + ville);
			sb.append(",cin=" + String.valueOf(cin));
			sb.append(",photo=" + String.valueOf(photo));
			sb.append(",debutContrat=" + String.valueOf(debutContrat));
			sb.append(",finContrat=" + String.valueOf(finContrat));
			sb.append(",mail=" + mail);
			sb.append(",dateNaissance=" + String.valueOf(dateNaissance));
			sb.append(",typeContrat=" + typeContrat);
			sb.append(",dateCreation=" + String.valueOf(dateCreation));
			sb.append(",actif=" + String.valueOf(actif));
			sb.append(",civilite=" + civilite);
			sb.append(",telFixe=" + telFixe);
			sb.append(",telGsm=" + telGsm);
			sb.append(",bckNom=" + bckNom);
			sb.append(",bckPrivilege=" + bckPrivilege);
			sb.append(",droitConge=" + String.valueOf(droitConge));
			sb.append(",congeAccorde=" + String.valueOf(congeAccorde));
			sb.append(",droitRecuperation=" + String.valueOf(droitRecuperation));
			sb.append(",encoursDroitRecuperation="
					+ String.valueOf(encoursDroitRecuperation));
			sb.append(",recuperationAccorde="
					+ String.valueOf(recuperationAccorde));
			sb.append(",bckIdEnroll=" + String.valueOf(bckIdEnroll));
			sb.append(",bckId=" + String.valueOf(bckId));
			sb.append(",infoSupp=" + infoSupp);
			sb.append(",idter=" + String.valueOf(idter));
			sb.append(",photoName=" + photoName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(personnelStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				personnelStruct personnel = new personnelStruct();
				personnelOutStruct personnelOut = new personnelOutStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "personnel";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_2;
				}
				String dbUser_tMysqlOutput_2 = "kb2i";
				String dbPwd_tMysqlOutput_2 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insertIgnore_tMysqlOutput_2 = "INSERT IGNORE INTO `"
						+ "personnel"
						+ "` (`idper`,`matricule`,`nom`,`prenom`,`adresse`,`cp`,`ville`,`cin`,`photo`,`debutContrat`,`finContrat`,`mail`,`dateNaissance`,`typeContrat`,`dateCreation`,`actif`,`civilite`,`telFixe`,`telGsm`,`bckNom`,`bckPrivilege`,`droitConge`,`congeAccorde`,`droitRecuperation`,`encoursDroitRecuperation`,`recuperationAccorde`,`bckIdEnroll`,`bckId`,`infoSupp`,`idter`,`photoName`,`nomPrenom`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `matricule` = ?,`nom` = ?,`prenom` = ?,`adresse` = ?,`cp` = ?,`ville` = ?,`cin` = ?,`photo` = ?,`debutContrat` = ?,`finContrat` = ?,`mail` = ?,`dateNaissance` = ?,`typeContrat` = ?,`dateCreation` = ?,`actif` = ?,`civilite` = ?,`telFixe` = ?,`telGsm` = ?,`bckNom` = ?,`bckPrivilege` = ?,`droitConge` = ?,`congeAccorde` = ?,`droitRecuperation` = ?,`encoursDroitRecuperation` = ?,`recuperationAccorde` = ?,`bckIdEnroll` = ?,`bckId` = ?,`infoSupp` = ?,`idter` = ?,`photoName` = ?,`nomPrenom` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insertIgnore_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				personnelOutStruct personnelOut_tmp = new personnelOutStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_2 = "kb2i";
				String dbPwd_tMysqlInput_2 = "citrec";

				String url_tMysqlInput_2 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT    `personnel`.`idper`,    `personnel`.`matricule`,    `personnel`.`nom`,    `personnel`.`prenom`,    `personnel`.`adresse`,    `personnel`.`cp`,    `personnel`.`ville`,    `personnel`.`cin`,    `personnel`.`photo`,    `personnel`.`debutContrat`,    `personnel`.`finContrat`,    `personnel`.`mail`,    `personnel`.`dateNaissance`,    `personnel`.`typeContrat`,    `personnel`.`dateCreation`,    `personnel`.`actif`,    `personnel`.`civilite`,    `personnel`.`telFixe`,    `personnel`.`telGsm`,    `personnel`.`bckNom`,    `personnel`.`bckPrivilege`,    `personnel`.`droitConge`,    `personnel`.`congeAccorde`,    `personnel`.`droitRecuperation`,    `personnel`.`encoursDroitRecuperation`,    `personnel`.`recuperationAccorde`,    `personnel`.`bckIdEnroll`,    `personnel`.`bckId`,    `personnel`.`infoSupp`,    `personnel`.`idter`,    `personnel`.`photoName` FROM `personnel`";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);
				java.sql.ResultSet rs_tMysqlInput_2 = null;
				try {
					rs_tMysqlInput_2 = stmt_tMysqlInput_2
							.executeQuery(dbquery_tMysqlInput_2);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
							.getMetaData();
					int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
							.getColumnCount();

					String tmpContent_tMysqlInput_2 = null;
					int column_index_tMysqlInput_2 = 1;

					while (rs_tMysqlInput_2.next()) {
						nb_line_tMysqlInput_2++;

						column_index_tMysqlInput_2 = 1;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.idper = 0;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.idper = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_2 = 2;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.matricule = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.matricule = tmpContent_tMysqlInput_2;
							} else {
								personnel.matricule = null;
							}

						}

						column_index_tMysqlInput_2 = 3;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.nom = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.nom = tmpContent_tMysqlInput_2;
							} else {
								personnel.nom = null;
							}

						}

						column_index_tMysqlInput_2 = 4;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.prenom = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.prenom = tmpContent_tMysqlInput_2;
							} else {
								personnel.prenom = null;
							}

						}

						column_index_tMysqlInput_2 = 5;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.adresse = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.adresse = tmpContent_tMysqlInput_2;
							} else {
								personnel.adresse = null;
							}

						}

						column_index_tMysqlInput_2 = 6;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.cp = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.cp = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.cp = null;
							}

						}

						column_index_tMysqlInput_2 = 7;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.ville = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.ville = tmpContent_tMysqlInput_2;
							} else {
								personnel.ville = null;
							}

						}

						column_index_tMysqlInput_2 = 8;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.cin = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.cin = rs_tMysqlInput_2
										.getLong(column_index_tMysqlInput_2);
							} else {
								personnel.cin = null;
							}

						}

						column_index_tMysqlInput_2 = 9;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.photo = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.photo = rs_tMysqlInput_2
										.getObject(column_index_tMysqlInput_2);
							} else {
								personnel.photo = null;
							}

						}

						column_index_tMysqlInput_2 = 10;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.debutContrat = null;
						} else {

							if (rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(column_index_tMysqlInput_2);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									personnel.debutContrat = rs_tMysqlInput_2
											.getTimestamp(column_index_tMysqlInput_2);
								} else {
									personnel.debutContrat = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								personnel.debutContrat = null;
							}

						}

						column_index_tMysqlInput_2 = 11;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.finContrat = null;
						} else {

							if (rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(column_index_tMysqlInput_2);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									personnel.finContrat = rs_tMysqlInput_2
											.getTimestamp(column_index_tMysqlInput_2);
								} else {
									personnel.finContrat = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								personnel.finContrat = null;
							}

						}

						column_index_tMysqlInput_2 = 12;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.mail = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.mail = tmpContent_tMysqlInput_2;
							} else {
								personnel.mail = null;
							}

						}

						column_index_tMysqlInput_2 = 13;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.dateNaissance = null;
						} else {

							if (rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(column_index_tMysqlInput_2);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									personnel.dateNaissance = rs_tMysqlInput_2
											.getTimestamp(column_index_tMysqlInput_2);
								} else {
									personnel.dateNaissance = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								personnel.dateNaissance = null;
							}

						}

						column_index_tMysqlInput_2 = 14;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.typeContrat = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.typeContrat = tmpContent_tMysqlInput_2;
							} else {
								personnel.typeContrat = null;
							}

						}

						column_index_tMysqlInput_2 = 15;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.dateCreation = null;
						} else {

							if (rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2) != null) {
								String dateString_tMysqlInput_2 = rs_tMysqlInput_2
										.getString(column_index_tMysqlInput_2);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_2)) {
									personnel.dateCreation = rs_tMysqlInput_2
											.getTimestamp(column_index_tMysqlInput_2);
								} else {
									personnel.dateCreation = (java.util.Date) year0_tMysqlInput_2
											.clone();
								}
							} else {
								personnel.dateCreation = null;
							}

						}

						column_index_tMysqlInput_2 = 16;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.actif = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.actif = rs_tMysqlInput_2
										.getBoolean(column_index_tMysqlInput_2);
							} else {
								personnel.actif = null;
							}

						}

						column_index_tMysqlInput_2 = 17;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.civilite = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.civilite = tmpContent_tMysqlInput_2;
							} else {
								personnel.civilite = null;
							}

						}

						column_index_tMysqlInput_2 = 18;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.telFixe = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.telFixe = tmpContent_tMysqlInput_2;
							} else {
								personnel.telFixe = null;
							}

						}

						column_index_tMysqlInput_2 = 19;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.telGsm = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.telGsm = tmpContent_tMysqlInput_2;
							} else {
								personnel.telGsm = null;
							}

						}

						column_index_tMysqlInput_2 = 20;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.bckNom = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.bckNom = tmpContent_tMysqlInput_2;
							} else {
								personnel.bckNom = null;
							}

						}

						column_index_tMysqlInput_2 = 21;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.bckPrivilege = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.bckPrivilege = tmpContent_tMysqlInput_2;
							} else {
								personnel.bckPrivilege = null;
							}

						}

						column_index_tMysqlInput_2 = 22;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.droitConge = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.droitConge = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.droitConge = null;
							}

						}

						column_index_tMysqlInput_2 = 23;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.congeAccorde = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.congeAccorde = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.congeAccorde = null;
							}

						}

						column_index_tMysqlInput_2 = 24;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.droitRecuperation = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.droitRecuperation = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.droitRecuperation = null;
							}

						}

						column_index_tMysqlInput_2 = 25;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.encoursDroitRecuperation = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.encoursDroitRecuperation = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.encoursDroitRecuperation = null;
							}

						}

						column_index_tMysqlInput_2 = 26;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.recuperationAccorde = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.recuperationAccorde = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.recuperationAccorde = null;
							}

						}

						column_index_tMysqlInput_2 = 27;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.bckIdEnroll = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.bckIdEnroll = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.bckIdEnroll = null;
							}

						}

						column_index_tMysqlInput_2 = 28;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.bckId = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.bckId = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.bckId = null;
							}

						}

						column_index_tMysqlInput_2 = 29;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.infoSupp = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.infoSupp = tmpContent_tMysqlInput_2;
							} else {
								personnel.infoSupp = null;
							}

						}

						column_index_tMysqlInput_2 = 30;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.idter = null;
						} else {

							if (rs_tMysqlInput_2
									.getObject(column_index_tMysqlInput_2) != null) {
								personnel.idter = rs_tMysqlInput_2
										.getInt(column_index_tMysqlInput_2);
							} else {
								personnel.idter = null;
							}

						}

						column_index_tMysqlInput_2 = 31;

						if (colQtyInRs_tMysqlInput_2 < column_index_tMysqlInput_2) {
							personnel.photoName = null;
						} else {

							tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(column_index_tMysqlInput_2);
							if (tmpContent_tMysqlInput_2 != null) {
								personnel.photoName = tmpContent_tMysqlInput_2;
							} else {
								personnel.photoName = null;
							}

						}

						/**
						 * [tMysqlInput_2 begin ] stop
						 */
						/**
						 * [tMysqlInput_2 main ] start
						 */

						currentComponent = "tMysqlInput_2";

						tos_count_tMysqlInput_2++;

						/**
						 * [tMysqlInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							personnelOut = null;

							// # Output table : 'personnelOut'
							personnelOut_tmp.idper = personnel.idper;
							personnelOut_tmp.matricule = personnel.matricule;
							personnelOut_tmp.nom = personnel.nom;
							personnelOut_tmp.prenom = personnel.prenom;
							personnelOut_tmp.adresse = personnel.adresse;
							personnelOut_tmp.cp = personnel.cp;
							personnelOut_tmp.ville = personnel.ville;
							personnelOut_tmp.cin = personnel.cin;
							personnelOut_tmp.photo = personnel.photo;
							personnelOut_tmp.debutContrat = personnel.debutContrat;
							personnelOut_tmp.finContrat = personnel.finContrat;
							personnelOut_tmp.mail = personnel.mail;
							personnelOut_tmp.dateNaissance = personnel.dateNaissance;
							personnelOut_tmp.typeContrat = personnel.typeContrat;
							personnelOut_tmp.dateCreation = personnel.dateCreation;
							personnelOut_tmp.actif = personnel.actif;
							personnelOut_tmp.civilite = personnel.civilite;
							personnelOut_tmp.telFixe = personnel.telFixe;
							personnelOut_tmp.telGsm = personnel.telGsm;
							personnelOut_tmp.bckNom = personnel.bckNom;
							personnelOut_tmp.bckPrivilege = personnel.bckPrivilege;
							personnelOut_tmp.droitConge = personnel.droitConge;
							personnelOut_tmp.congeAccorde = personnel.congeAccorde;
							personnelOut_tmp.droitRecuperation = personnel.droitRecuperation;
							personnelOut_tmp.encoursDroitRecuperation = personnel.encoursDroitRecuperation;
							personnelOut_tmp.recuperationAccorde = personnel.recuperationAccorde;
							personnelOut_tmp.bckIdEnroll = personnel.bckIdEnroll;
							personnelOut_tmp.bckId = personnel.bckId;
							personnelOut_tmp.infoSupp = personnel.infoSupp;
							personnelOut_tmp.idter = personnel.idter;
							personnelOut_tmp.photoName = personnel.photoName;
							personnelOut_tmp.nomPrenom = personnel.nom + " "
									+ personnel.prenom;
							personnelOut = personnelOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "personnelOut"
						if (personnelOut != null) {

							/**
							 * [tMysqlOutput_2 main ] start
							 */

							currentComponent = "tMysqlOutput_2";

							whetherReject_tMysqlOutput_2 = false;
							pstmt_tMysqlOutput_2.setInt(1, personnelOut.idper);

							if (personnelOut.matricule == null) {
								pstmt_tMysqlOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(2,
										personnelOut.matricule);
							}

							if (personnelOut.nom == null) {
								pstmt_tMysqlOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(3,
										personnelOut.nom);
							}

							if (personnelOut.prenom == null) {
								pstmt_tMysqlOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(4,
										personnelOut.prenom);
							}

							if (personnelOut.adresse == null) {
								pstmt_tMysqlOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(5,
										personnelOut.adresse);
							}

							if (personnelOut.cp == null) {
								pstmt_tMysqlOutput_2.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(6, personnelOut.cp);
							}

							if (personnelOut.ville == null) {
								pstmt_tMysqlOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(7,
										personnelOut.ville);
							}

							if (personnelOut.cin == null) {
								pstmt_tMysqlOutput_2.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setLong(8,
										personnelOut.cin);
							}

							if (personnelOut.photo == null) {
								pstmt_tMysqlOutput_2.setNull(9,
										java.sql.Types.OTHER);
							} else {
								pstmt_tMysqlOutput_2.setObject(9,
										personnelOut.photo);
							}

							if (personnelOut.debutContrat != null) {
								date_tMysqlOutput_2 = personnelOut.debutContrat
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(10,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(10,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(10,
										java.sql.Types.DATE);
							}

							if (personnelOut.finContrat != null) {
								date_tMysqlOutput_2 = personnelOut.finContrat
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(11,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(11,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(11,
										java.sql.Types.DATE);
							}

							if (personnelOut.mail == null) {
								pstmt_tMysqlOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(12,
										personnelOut.mail);
							}

							if (personnelOut.dateNaissance != null) {
								date_tMysqlOutput_2 = personnelOut.dateNaissance
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(13,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(13,
										java.sql.Types.DATE);
							}

							if (personnelOut.typeContrat == null) {
								pstmt_tMysqlOutput_2.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(14,
										personnelOut.typeContrat);
							}

							if (personnelOut.dateCreation != null) {
								date_tMysqlOutput_2 = personnelOut.dateCreation
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(15,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(15,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(15,
										java.sql.Types.DATE);
							}

							if (personnelOut.actif == null) {
								pstmt_tMysqlOutput_2.setNull(16,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_2.setBoolean(16,
										personnelOut.actif);
							}

							if (personnelOut.civilite == null) {
								pstmt_tMysqlOutput_2.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(17,
										personnelOut.civilite);
							}

							if (personnelOut.telFixe == null) {
								pstmt_tMysqlOutput_2.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(18,
										personnelOut.telFixe);
							}

							if (personnelOut.telGsm == null) {
								pstmt_tMysqlOutput_2.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(19,
										personnelOut.telGsm);
							}

							if (personnelOut.bckNom == null) {
								pstmt_tMysqlOutput_2.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(20,
										personnelOut.bckNom);
							}

							if (personnelOut.bckPrivilege == null) {
								pstmt_tMysqlOutput_2.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(21,
										personnelOut.bckPrivilege);
							}

							if (personnelOut.droitConge == null) {
								pstmt_tMysqlOutput_2.setNull(22,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(22,
										personnelOut.droitConge);
							}

							if (personnelOut.congeAccorde == null) {
								pstmt_tMysqlOutput_2.setNull(23,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(23,
										personnelOut.congeAccorde);
							}

							if (personnelOut.droitRecuperation == null) {
								pstmt_tMysqlOutput_2.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(24,
										personnelOut.droitRecuperation);
							}

							if (personnelOut.encoursDroitRecuperation == null) {
								pstmt_tMysqlOutput_2.setNull(25,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(25,
										personnelOut.encoursDroitRecuperation);
							}

							if (personnelOut.recuperationAccorde == null) {
								pstmt_tMysqlOutput_2.setNull(26,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(26,
										personnelOut.recuperationAccorde);
							}

							if (personnelOut.bckIdEnroll == null) {
								pstmt_tMysqlOutput_2.setNull(27,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(27,
										personnelOut.bckIdEnroll);
							}

							if (personnelOut.bckId == null) {
								pstmt_tMysqlOutput_2.setNull(28,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(28,
										personnelOut.bckId);
							}

							if (personnelOut.infoSupp == null) {
								pstmt_tMysqlOutput_2.setNull(29,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(29,
										personnelOut.infoSupp);
							}

							if (personnelOut.idter == null) {
								pstmt_tMysqlOutput_2.setNull(30,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(30,
										personnelOut.idter);
							}

							if (personnelOut.photoName == null) {
								pstmt_tMysqlOutput_2.setNull(31,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(31,
										personnelOut.photoName);
							}

							if (personnelOut.nomPrenom == null) {
								pstmt_tMysqlOutput_2.setNull(32,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(32,
										personnelOut.nomPrenom);
							}

							if (personnelOut.matricule == null) {
								pstmt_tMysqlOutput_2.setNull(33,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(33,
										personnelOut.matricule);
							}

							if (personnelOut.nom == null) {
								pstmt_tMysqlOutput_2.setNull(34,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(34,
										personnelOut.nom);
							}

							if (personnelOut.prenom == null) {
								pstmt_tMysqlOutput_2.setNull(35,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(35,
										personnelOut.prenom);
							}

							if (personnelOut.adresse == null) {
								pstmt_tMysqlOutput_2.setNull(36,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(36,
										personnelOut.adresse);
							}

							if (personnelOut.cp == null) {
								pstmt_tMysqlOutput_2.setNull(37,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2
										.setInt(37, personnelOut.cp);
							}

							if (personnelOut.ville == null) {
								pstmt_tMysqlOutput_2.setNull(38,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(38,
										personnelOut.ville);
							}

							if (personnelOut.cin == null) {
								pstmt_tMysqlOutput_2.setNull(39,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setLong(39,
										personnelOut.cin);
							}

							if (personnelOut.photo == null) {
								pstmt_tMysqlOutput_2.setNull(40,
										java.sql.Types.OTHER);
							} else {
								pstmt_tMysqlOutput_2.setObject(40,
										personnelOut.photo);
							}

							if (personnelOut.debutContrat != null) {
								date_tMysqlOutput_2 = personnelOut.debutContrat
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(41,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(41,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(41,
										java.sql.Types.DATE);
							}

							if (personnelOut.finContrat != null) {
								date_tMysqlOutput_2 = personnelOut.finContrat
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(42,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(42,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(42,
										java.sql.Types.DATE);
							}

							if (personnelOut.mail == null) {
								pstmt_tMysqlOutput_2.setNull(43,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(43,
										personnelOut.mail);
							}

							if (personnelOut.dateNaissance != null) {
								date_tMysqlOutput_2 = personnelOut.dateNaissance
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(44,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(44,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(44,
										java.sql.Types.DATE);
							}

							if (personnelOut.typeContrat == null) {
								pstmt_tMysqlOutput_2.setNull(45,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(45,
										personnelOut.typeContrat);
							}

							if (personnelOut.dateCreation != null) {
								date_tMysqlOutput_2 = personnelOut.dateCreation
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(46,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(46,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(46,
										java.sql.Types.DATE);
							}

							if (personnelOut.actif == null) {
								pstmt_tMysqlOutput_2.setNull(47,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_2.setBoolean(47,
										personnelOut.actif);
							}

							if (personnelOut.civilite == null) {
								pstmt_tMysqlOutput_2.setNull(48,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(48,
										personnelOut.civilite);
							}

							if (personnelOut.telFixe == null) {
								pstmt_tMysqlOutput_2.setNull(49,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(49,
										personnelOut.telFixe);
							}

							if (personnelOut.telGsm == null) {
								pstmt_tMysqlOutput_2.setNull(50,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(50,
										personnelOut.telGsm);
							}

							if (personnelOut.bckNom == null) {
								pstmt_tMysqlOutput_2.setNull(51,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(51,
										personnelOut.bckNom);
							}

							if (personnelOut.bckPrivilege == null) {
								pstmt_tMysqlOutput_2.setNull(52,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(52,
										personnelOut.bckPrivilege);
							}

							if (personnelOut.droitConge == null) {
								pstmt_tMysqlOutput_2.setNull(53,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(53,
										personnelOut.droitConge);
							}

							if (personnelOut.congeAccorde == null) {
								pstmt_tMysqlOutput_2.setNull(54,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(54,
										personnelOut.congeAccorde);
							}

							if (personnelOut.droitRecuperation == null) {
								pstmt_tMysqlOutput_2.setNull(55,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(55,
										personnelOut.droitRecuperation);
							}

							if (personnelOut.encoursDroitRecuperation == null) {
								pstmt_tMysqlOutput_2.setNull(56,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(56,
										personnelOut.encoursDroitRecuperation);
							}

							if (personnelOut.recuperationAccorde == null) {
								pstmt_tMysqlOutput_2.setNull(57,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(57,
										personnelOut.recuperationAccorde);
							}

							if (personnelOut.bckIdEnroll == null) {
								pstmt_tMysqlOutput_2.setNull(58,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(58,
										personnelOut.bckIdEnroll);
							}

							if (personnelOut.bckId == null) {
								pstmt_tMysqlOutput_2.setNull(59,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(59,
										personnelOut.bckId);
							}

							if (personnelOut.infoSupp == null) {
								pstmt_tMysqlOutput_2.setNull(60,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(60,
										personnelOut.infoSupp);
							}

							if (personnelOut.idter == null) {
								pstmt_tMysqlOutput_2.setNull(61,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_2.setInt(61,
										personnelOut.idter);
							}

							if (personnelOut.photoName == null) {
								pstmt_tMysqlOutput_2.setNull(62,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(62,
										personnelOut.photoName);
							}

							if (personnelOut.nomPrenom == null) {
								pstmt_tMysqlOutput_2.setNull(63,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(63,
										personnelOut.nomPrenom);
							}

							int count_on_duplicate_key_tMysqlOutput_2 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_2 = pstmt_tMysqlOutput_2
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_2 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_2 == 1) {
								insertedCount_tMysqlOutput_2 += count_on_duplicate_key_tMysqlOutput_2;
							} else {
								insertedCount_tMysqlOutput_2 += 1;
								updatedCount_tMysqlOutput_2 += count_on_duplicate_key_tMysqlOutput_2 - 1;
							}
							commitCounter_tMysqlOutput_2++;

							if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

								conn_tMysqlOutput_2.commit();

								commitCounter_tMysqlOutput_2 = 0;

							}

							tos_count_tMysqlOutput_2++;

							/**
							 * [tMysqlOutput_2 main ] stop
							 */

						} // End of branch "personnelOut"

						/**
						 * [tMysqlInput_2 end ] start
						 */

						currentComponent = "tMysqlInput_2";

					}
				} finally {
					rs_tMysqlInput_2.close();
					stmt_tMysqlInput_2.close();

					if (conn_tMysqlInput_2 != null
							&& !conn_tMysqlInput_2.isClosed()) {
						conn_tMysqlInput_2.close();
					}

				}
				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_2 finally ] start
				 */

				currentComponent = "tMysqlInput_2";

				/**
				 * [tMysqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class opOutStruct implements
			routines.system.IPersistableRow<opOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idop;

		public int getIdop() {
			return this.idop;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String motPasse;

		public String getMotPasse() {
			return this.motPasse;
		}

		public Integer idper;

		public Integer getIdper() {
			return this.idper;
		}

		public String theme;

		public String getTheme() {
			return this.theme;
		}

		public String langue;

		public String getLangue() {
			return this.langue;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idop;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final opOutStruct other = (opOutStruct) obj;

			if (this.idop != other.idop)
				return false;

			return true;
		}

		public void copyDataTo(opOutStruct other) {

			other.idop = this.idop;
			other.login = this.login;
			other.motPasse = this.motPasse;
			other.idper = this.idper;
			other.theme = this.theme;
			other.langue = this.langue;

		}

		public void copyKeysDataTo(opOutStruct other) {

			other.idop = this.idop;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idop = dis.readInt();

					this.login = readString(dis);

					this.motPasse = readString(dis);

					this.idper = readInteger(dis);

					this.theme = readString(dis);

					this.langue = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idop);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.motPasse, dos);

				// Integer

				writeInteger(this.idper, dos);

				// String

				writeString(this.theme, dos);

				// String

				writeString(this.langue, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idop=" + String.valueOf(idop));
			sb.append(",login=" + login);
			sb.append(",motPasse=" + motPasse);
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",theme=" + theme);
			sb.append(",langue=" + langue);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(opOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idop, other.idop);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class operateurInStruct implements
			routines.system.IPersistableRow<operateurInStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idop;

		public int getIdop() {
			return this.idop;
		}

		public String login;

		public String getLogin() {
			return this.login;
		}

		public String motPasse;

		public String getMotPasse() {
			return this.motPasse;
		}

		public Integer idper;

		public Integer getIdper() {
			return this.idper;
		}

		public String theme;

		public String getTheme() {
			return this.theme;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idop = dis.readInt();

					this.login = readString(dis);

					this.motPasse = readString(dis);

					this.idper = readInteger(dis);

					this.theme = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idop);

				// String

				writeString(this.login, dos);

				// String

				writeString(this.motPasse, dos);

				// Integer

				writeInteger(this.idper, dos);

				// String

				writeString(this.theme, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idop=" + String.valueOf(idop));
			sb.append(",login=" + login);
			sb.append(",motPasse=" + motPasse);
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",theme=" + theme);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(operateurInStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				operateurInStruct operateurIn = new operateurInStruct();
				opOutStruct opOut = new opOutStruct();

				/**
				 * [tMysqlOutput_8 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_8", false);
				start_Hash.put("tMysqlOutput_8", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_8";

				int tos_count_tMysqlOutput_8 = 0;

				int nb_line_tMysqlOutput_8 = 0;
				int nb_line_update_tMysqlOutput_8 = 0;
				int nb_line_inserted_tMysqlOutput_8 = 0;
				int nb_line_deleted_tMysqlOutput_8 = 0;
				int nb_line_rejected_tMysqlOutput_8 = 0;

				int deletedCount_tMysqlOutput_8 = 0;
				int updatedCount_tMysqlOutput_8 = 0;
				int insertedCount_tMysqlOutput_8 = 0;

				int rejectedCount_tMysqlOutput_8 = 0;

				String tableName_tMysqlOutput_8 = "operateur";
				boolean whetherReject_tMysqlOutput_8 = false;

				java.util.Calendar calendar_tMysqlOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_8 = calendar_tMysqlOutput_8.getTime()
						.getTime();
				calendar_tMysqlOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_8 = calendar_tMysqlOutput_8
						.getTime().getTime();
				long date_tMysqlOutput_8;

				java.sql.Connection conn_tMysqlOutput_8 = null;
				String dbProperties_tMysqlOutput_8 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_8 = null;
				if (dbProperties_tMysqlOutput_8 == null
						|| dbProperties_tMysqlOutput_8.trim().length() == 0) {
					url_tMysqlOutput_8 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_8 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_8;
				}
				String dbUser_tMysqlOutput_8 = "kb2i";
				String dbPwd_tMysqlOutput_8 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_8 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_8, dbUser_tMysqlOutput_8,
						dbPwd_tMysqlOutput_8);

				conn_tMysqlOutput_8.setAutoCommit(false);
				int commitEvery_tMysqlOutput_8 = 10000;
				int commitCounter_tMysqlOutput_8 = 0;

				int count_tMysqlOutput_8 = 0;

				String insertIgnore_tMysqlOutput_8 = "INSERT IGNORE INTO `"
						+ "operateur"
						+ "` (`idop`,`login`,`motPasse`,`idper`,`theme`,`langue`) VALUES (?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `login` = ?,`motPasse` = ?,`idper` = ?,`theme` = ?,`langue` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_8 = conn_tMysqlOutput_8
						.prepareStatement(insertIgnore_tMysqlOutput_8);

				/**
				 * [tMysqlOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				opOutStruct opOut_tmp = new opOutStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tMysqlInput_10 begin ] start
				 */

				ok_Hash.put("tMysqlInput_10", false);
				start_Hash.put("tMysqlInput_10", System.currentTimeMillis());

				currentComponent = "tMysqlInput_10";

				int tos_count_tMysqlInput_10 = 0;

				java.util.Calendar calendar_tMysqlInput_10 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_10.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_10 = calendar_tMysqlInput_10
						.getTime();
				int nb_line_tMysqlInput_10 = 0;
				java.sql.Connection conn_tMysqlInput_10 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_10 = "kb2i";
				String dbPwd_tMysqlInput_10 = "citrec";

				String url_tMysqlInput_10 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_10 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_10, dbUser_tMysqlInput_10,
						dbPwd_tMysqlInput_10);

				java.sql.Statement stmt_tMysqlInput_10 = conn_tMysqlInput_10
						.createStatement();

				String dbquery_tMysqlInput_10 = "SELECT    `operateur`.`idop`,    `operateur`.`login`,    `operateur`.`motPasse`,    `operateur`.`idper`,    `operateur`.`theme` FROM `operateur`";

				globalMap.put("tMysqlInput_10_QUERY", dbquery_tMysqlInput_10);
				java.sql.ResultSet rs_tMysqlInput_10 = null;
				try {
					rs_tMysqlInput_10 = stmt_tMysqlInput_10
							.executeQuery(dbquery_tMysqlInput_10);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_10 = rs_tMysqlInput_10
							.getMetaData();
					int colQtyInRs_tMysqlInput_10 = rsmd_tMysqlInput_10
							.getColumnCount();

					String tmpContent_tMysqlInput_10 = null;
					int column_index_tMysqlInput_10 = 1;

					while (rs_tMysqlInput_10.next()) {
						nb_line_tMysqlInput_10++;

						column_index_tMysqlInput_10 = 1;

						if (colQtyInRs_tMysqlInput_10 < column_index_tMysqlInput_10) {
							operateurIn.idop = 0;
						} else {

							if (rs_tMysqlInput_10
									.getObject(column_index_tMysqlInput_10) != null) {
								operateurIn.idop = rs_tMysqlInput_10
										.getInt(column_index_tMysqlInput_10);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_10 = 2;

						if (colQtyInRs_tMysqlInput_10 < column_index_tMysqlInput_10) {
							operateurIn.login = null;
						} else {

							tmpContent_tMysqlInput_10 = rs_tMysqlInput_10
									.getString(column_index_tMysqlInput_10);
							if (tmpContent_tMysqlInput_10 != null) {
								operateurIn.login = tmpContent_tMysqlInput_10;
							} else {
								operateurIn.login = null;
							}

						}

						column_index_tMysqlInput_10 = 3;

						if (colQtyInRs_tMysqlInput_10 < column_index_tMysqlInput_10) {
							operateurIn.motPasse = null;
						} else {

							tmpContent_tMysqlInput_10 = rs_tMysqlInput_10
									.getString(column_index_tMysqlInput_10);
							if (tmpContent_tMysqlInput_10 != null) {
								operateurIn.motPasse = tmpContent_tMysqlInput_10;
							} else {
								operateurIn.motPasse = null;
							}

						}

						column_index_tMysqlInput_10 = 4;

						if (colQtyInRs_tMysqlInput_10 < column_index_tMysqlInput_10) {
							operateurIn.idper = null;
						} else {

							if (rs_tMysqlInput_10
									.getObject(column_index_tMysqlInput_10) != null) {
								operateurIn.idper = rs_tMysqlInput_10
										.getInt(column_index_tMysqlInput_10);
							} else {
								operateurIn.idper = null;
							}

						}

						column_index_tMysqlInput_10 = 5;

						if (colQtyInRs_tMysqlInput_10 < column_index_tMysqlInput_10) {
							operateurIn.theme = null;
						} else {

							tmpContent_tMysqlInput_10 = rs_tMysqlInput_10
									.getString(column_index_tMysqlInput_10);
							if (tmpContent_tMysqlInput_10 != null) {
								operateurIn.theme = tmpContent_tMysqlInput_10;
							} else {
								operateurIn.theme = null;
							}

						}

						/**
						 * [tMysqlInput_10 begin ] stop
						 */
						/**
						 * [tMysqlInput_10 main ] start
						 */

						currentComponent = "tMysqlInput_10";

						tos_count_tMysqlInput_10++;

						/**
						 * [tMysqlInput_10 main ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							opOut = null;

							// # Output table : 'opOut'
							opOut_tmp.idop = operateurIn.idop;
							opOut_tmp.login = operateurIn.login;
							opOut_tmp.motPasse = operateurIn.motPasse;
							opOut_tmp.idper = operateurIn.idper;
							opOut_tmp.theme = operateurIn.theme;
							opOut_tmp.langue = null;
							opOut = opOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */
						// Start of branch "opOut"
						if (opOut != null) {

							/**
							 * [tMysqlOutput_8 main ] start
							 */

							currentComponent = "tMysqlOutput_8";

							whetherReject_tMysqlOutput_8 = false;
							pstmt_tMysqlOutput_8.setInt(1, opOut.idop);

							if (opOut.login == null) {
								pstmt_tMysqlOutput_8.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(2, opOut.login);
							}

							if (opOut.motPasse == null) {
								pstmt_tMysqlOutput_8.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(3,
										opOut.motPasse);
							}

							if (opOut.idper == null) {
								pstmt_tMysqlOutput_8.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_8.setInt(4, opOut.idper);
							}

							if (opOut.theme == null) {
								pstmt_tMysqlOutput_8.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(5, opOut.theme);
							}

							if (opOut.langue == null) {
								pstmt_tMysqlOutput_8.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(6, opOut.langue);
							}

							if (opOut.login == null) {
								pstmt_tMysqlOutput_8.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(7, opOut.login);
							}

							if (opOut.motPasse == null) {
								pstmt_tMysqlOutput_8.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(8,
										opOut.motPasse);
							}

							if (opOut.idper == null) {
								pstmt_tMysqlOutput_8.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_8.setInt(9, opOut.idper);
							}

							if (opOut.theme == null) {
								pstmt_tMysqlOutput_8.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8.setString(10, opOut.theme);
							}

							if (opOut.langue == null) {
								pstmt_tMysqlOutput_8.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_8
										.setString(11, opOut.langue);
							}

							int count_on_duplicate_key_tMysqlOutput_8 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_8 = pstmt_tMysqlOutput_8
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_8 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_8 == 1) {
								insertedCount_tMysqlOutput_8 += count_on_duplicate_key_tMysqlOutput_8;
							} else {
								insertedCount_tMysqlOutput_8 += 1;
								updatedCount_tMysqlOutput_8 += count_on_duplicate_key_tMysqlOutput_8 - 1;
							}
							commitCounter_tMysqlOutput_8++;

							if (commitEvery_tMysqlOutput_8 <= commitCounter_tMysqlOutput_8) {

								conn_tMysqlOutput_8.commit();

								commitCounter_tMysqlOutput_8 = 0;

							}

							tos_count_tMysqlOutput_8++;

							/**
							 * [tMysqlOutput_8 main ] stop
							 */

						} // End of branch "opOut"

						/**
						 * [tMysqlInput_10 end ] start
						 */

						currentComponent = "tMysqlInput_10";

					}
				} finally {
					rs_tMysqlInput_10.close();
					stmt_tMysqlInput_10.close();

					if (conn_tMysqlInput_10 != null
							&& !conn_tMysqlInput_10.isClosed()) {
						conn_tMysqlInput_10.close();
					}

				}
				globalMap.put("tMysqlInput_10_NB_LINE", nb_line_tMysqlInput_10);

				ok_Hash.put("tMysqlInput_10", true);
				end_Hash.put("tMysqlInput_10", System.currentTimeMillis());

				/**
				 * [tMysqlInput_10 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMysqlOutput_8 end ] start
				 */

				currentComponent = "tMysqlOutput_8";

				if (pstmt_tMysqlOutput_8 != null) {

					pstmt_tMysqlOutput_8.close();

				}

				conn_tMysqlOutput_8.commit();

				conn_tMysqlOutput_8.close();

				nb_line_deleted_tMysqlOutput_8 = nb_line_deleted_tMysqlOutput_8
						+ deletedCount_tMysqlOutput_8;
				nb_line_update_tMysqlOutput_8 = nb_line_update_tMysqlOutput_8
						+ updatedCount_tMysqlOutput_8;
				nb_line_inserted_tMysqlOutput_8 = nb_line_inserted_tMysqlOutput_8
						+ insertedCount_tMysqlOutput_8;
				nb_line_rejected_tMysqlOutput_8 = nb_line_rejected_tMysqlOutput_8
						+ rejectedCount_tMysqlOutput_8;

				globalMap.put("tMysqlOutput_8_NB_LINE", nb_line_tMysqlOutput_8);
				globalMap.put("tMysqlOutput_8_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_8);
				globalMap.put("tMysqlOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_8);
				globalMap.put("tMysqlOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_8);
				globalMap.put("tMysqlOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_8);

				ok_Hash.put("tMysqlOutput_8", true);
				end_Hash.put("tMysqlOutput_8", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_10 finally ] start
				 */

				currentComponent = "tMysqlInput_10";

				/**
				 * [tMysqlInput_10 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tMysqlOutput_8 finally ] start
				 */

				currentComponent = "tMysqlOutput_8";

				/**
				 * [tMysqlOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 1);
	}

	public static class pointageOutStruct implements
			routines.system.IPersistableRow<pointageOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date jour;

		public java.util.Date getJour() {
			return this.jour;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public java.util.Date e1;

		public java.util.Date getE1() {
			return this.e1;
		}

		public java.util.Date s1;

		public java.util.Date getS1() {
			return this.s1;
		}

		public java.util.Date e2;

		public java.util.Date getE2() {
			return this.e2;
		}

		public java.util.Date s2;

		public java.util.Date getS2() {
			return this.s2;
		}

		public Boolean absent;

		public Boolean getAbsent() {
			return this.absent;
		}

		public java.util.Date retard1;

		public java.util.Date getRetard1() {
			return this.retard1;
		}

		public java.util.Date retard2;

		public java.util.Date getRetard2() {
			return this.retard2;
		}

		public java.util.Date retardTotal;

		public java.util.Date getRetardTotal() {
			return this.retardTotal;
		}

		public java.util.Date presenceHrMn;

		public java.util.Date getPresenceHrMn() {
			return this.presenceHrMn;
		}

		public java.util.Date retardHrMn;

		public java.util.Date getRetardHrMn() {
			return this.retardHrMn;
		}

		public java.util.Date hSupHrMn;

		public java.util.Date getHSupHrMn() {
			return this.hSupHrMn;
		}

		public java.util.Date budgHrMn;

		public java.util.Date getBudgHrMn() {
			return this.budgHrMn;
		}

		public Boolean ferie;

		public Boolean getFerie() {
			return this.ferie;
		}

		public Boolean conge;

		public Boolean getConge() {
			return this.conge;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public String typeSup;

		public String getTypeSup() {
			return this.typeSup;
		}

		public Integer detailJour;

		public Integer getDetailJour() {
			return this.detailJour;
		}

		public Integer numjour;

		public Integer getNumjour() {
			return this.numjour;
		}

		public Boolean anomalie;

		public Boolean getAnomalie() {
			return this.anomalie;
		}

		public java.util.Date sa;

		public java.util.Date getSa() {
			return this.sa;
		}

		public java.util.Date ra;

		public java.util.Date getRa() {
			return this.ra;
		}

		public java.util.Date retardautorisation;

		public java.util.Date getRetardautorisation() {
			return this.retardautorisation;
		}

		public java.util.Date timeAuto;

		public java.util.Date getTimeAuto() {
			return this.timeAuto;
		}

		public int idpnt;

		public int getIdpnt() {
			return this.idpnt;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.jour == null) ? 0 : this.jour.hashCode());

				result = prime * result + (int) this.idper;

				result = prime * result + (int) this.idpnt;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final pointageOutStruct other = (pointageOutStruct) obj;

			if (this.jour == null) {
				if (other.jour != null)
					return false;

			} else if (!this.jour.equals(other.jour))

				return false;

			if (this.idper != other.idper)
				return false;

			if (this.idpnt != other.idpnt)
				return false;

			return true;
		}

		public void copyDataTo(pointageOutStruct other) {

			other.jour = this.jour;
			other.idper = this.idper;
			other.e1 = this.e1;
			other.s1 = this.s1;
			other.e2 = this.e2;
			other.s2 = this.s2;
			other.absent = this.absent;
			other.retard1 = this.retard1;
			other.retard2 = this.retard2;
			other.retardTotal = this.retardTotal;
			other.presenceHrMn = this.presenceHrMn;
			other.retardHrMn = this.retardHrMn;
			other.hSupHrMn = this.hSupHrMn;
			other.budgHrMn = this.budgHrMn;
			other.ferie = this.ferie;
			other.conge = this.conge;
			other.autorisation = this.autorisation;
			other.typeSup = this.typeSup;
			other.detailJour = this.detailJour;
			other.numjour = this.numjour;
			other.anomalie = this.anomalie;
			other.sa = this.sa;
			other.ra = this.ra;
			other.retardautorisation = this.retardautorisation;
			other.timeAuto = this.timeAuto;
			other.idpnt = this.idpnt;

		}

		public void copyKeysDataTo(pointageOutStruct other) {

			other.jour = this.jour;
			other.idper = this.idper;
			other.idpnt = this.idpnt;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.jour = readDate(dis);

					this.idper = dis.readInt();

					this.e1 = readDate(dis);

					this.s1 = readDate(dis);

					this.e2 = readDate(dis);

					this.s2 = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.absent = null;
					} else {
						this.absent = dis.readBoolean();
					}

					this.retard1 = readDate(dis);

					this.retard2 = readDate(dis);

					this.retardTotal = readDate(dis);

					this.presenceHrMn = readDate(dis);

					this.retardHrMn = readDate(dis);

					this.hSupHrMn = readDate(dis);

					this.budgHrMn = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ferie = null;
					} else {
						this.ferie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conge = null;
					} else {
						this.conge = dis.readBoolean();
					}

					this.autorisation = readInteger(dis);

					this.typeSup = readString(dis);

					this.detailJour = readInteger(dis);

					this.numjour = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anomalie = null;
					} else {
						this.anomalie = dis.readBoolean();
					}

					this.sa = readDate(dis);

					this.ra = readDate(dis);

					this.retardautorisation = readDate(dis);

					this.timeAuto = readDate(dis);

					this.idpnt = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.jour, dos);

				// int

				dos.writeInt(this.idper);

				// java.util.Date

				writeDate(this.e1, dos);

				// java.util.Date

				writeDate(this.s1, dos);

				// java.util.Date

				writeDate(this.e2, dos);

				// java.util.Date

				writeDate(this.s2, dos);

				// Boolean

				if (this.absent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.absent);
				}

				// java.util.Date

				writeDate(this.retard1, dos);

				// java.util.Date

				writeDate(this.retard2, dos);

				// java.util.Date

				writeDate(this.retardTotal, dos);

				// java.util.Date

				writeDate(this.presenceHrMn, dos);

				// java.util.Date

				writeDate(this.retardHrMn, dos);

				// java.util.Date

				writeDate(this.hSupHrMn, dos);

				// java.util.Date

				writeDate(this.budgHrMn, dos);

				// Boolean

				if (this.ferie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ferie);
				}

				// Boolean

				if (this.conge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.conge);
				}

				// Integer

				writeInteger(this.autorisation, dos);

				// String

				writeString(this.typeSup, dos);

				// Integer

				writeInteger(this.detailJour, dos);

				// Integer

				writeInteger(this.numjour, dos);

				// Boolean

				if (this.anomalie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anomalie);
				}

				// java.util.Date

				writeDate(this.sa, dos);

				// java.util.Date

				writeDate(this.ra, dos);

				// java.util.Date

				writeDate(this.retardautorisation, dos);

				// java.util.Date

				writeDate(this.timeAuto, dos);

				// int

				dos.writeInt(this.idpnt);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("jour=" + String.valueOf(jour));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",e1=" + String.valueOf(e1));
			sb.append(",s1=" + String.valueOf(s1));
			sb.append(",e2=" + String.valueOf(e2));
			sb.append(",s2=" + String.valueOf(s2));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",retard1=" + String.valueOf(retard1));
			sb.append(",retard2=" + String.valueOf(retard2));
			sb.append(",retardTotal=" + String.valueOf(retardTotal));
			sb.append(",presenceHrMn=" + String.valueOf(presenceHrMn));
			sb.append(",retardHrMn=" + String.valueOf(retardHrMn));
			sb.append(",hSupHrMn=" + String.valueOf(hSupHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append(",ferie=" + String.valueOf(ferie));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",typeSup=" + typeSup);
			sb.append(",detailJour=" + String.valueOf(detailJour));
			sb.append(",numjour=" + String.valueOf(numjour));
			sb.append(",anomalie=" + String.valueOf(anomalie));
			sb.append(",sa=" + String.valueOf(sa));
			sb.append(",ra=" + String.valueOf(ra));
			sb.append(",retardautorisation="
					+ String.valueOf(retardautorisation));
			sb.append(",timeAuto=" + String.valueOf(timeAuto));
			sb.append(",idpnt=" + String.valueOf(idpnt));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointageOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.jour, other.jour);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.idper, other.idper);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.idpnt, other.idpnt);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointageInStruct implements
			routines.system.IPersistableRow<pointageInStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public java.util.Date jour;

		public java.util.Date getJour() {
			return this.jour;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public java.util.Date e1;

		public java.util.Date getE1() {
			return this.e1;
		}

		public java.util.Date s1;

		public java.util.Date getS1() {
			return this.s1;
		}

		public java.util.Date e2;

		public java.util.Date getE2() {
			return this.e2;
		}

		public java.util.Date s2;

		public java.util.Date getS2() {
			return this.s2;
		}

		public Boolean absent;

		public Boolean getAbsent() {
			return this.absent;
		}

		public java.util.Date retard1;

		public java.util.Date getRetard1() {
			return this.retard1;
		}

		public java.util.Date retard2;

		public java.util.Date getRetard2() {
			return this.retard2;
		}

		public java.util.Date retardTotal;

		public java.util.Date getRetardTotal() {
			return this.retardTotal;
		}

		public java.util.Date presenceHrMn;

		public java.util.Date getPresenceHrMn() {
			return this.presenceHrMn;
		}

		public java.util.Date retardHrMn;

		public java.util.Date getRetardHrMn() {
			return this.retardHrMn;
		}

		public java.util.Date hSupHrMn;

		public java.util.Date getHSupHrMn() {
			return this.hSupHrMn;
		}

		public java.util.Date budgHrMn;

		public java.util.Date getBudgHrMn() {
			return this.budgHrMn;
		}

		public Boolean ferie;

		public Boolean getFerie() {
			return this.ferie;
		}

		public Boolean conge;

		public Boolean getConge() {
			return this.conge;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public String typeSup;

		public String getTypeSup() {
			return this.typeSup;
		}

		public Integer detailJour;

		public Integer getDetailJour() {
			return this.detailJour;
		}

		public Integer numjour;

		public Integer getNumjour() {
			return this.numjour;
		}

		public Boolean anomalie;

		public Boolean getAnomalie() {
			return this.anomalie;
		}

		public java.util.Date sa;

		public java.util.Date getSa() {
			return this.sa;
		}

		public java.util.Date ra;

		public java.util.Date getRa() {
			return this.ra;
		}

		public java.util.Date retardautorisation;

		public java.util.Date getRetardautorisation() {
			return this.retardautorisation;
		}

		public java.util.Date timeAuto;

		public java.util.Date getTimeAuto() {
			return this.timeAuto;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.jour = readDate(dis);

					this.idper = dis.readInt();

					this.e1 = readDate(dis);

					this.s1 = readDate(dis);

					this.e2 = readDate(dis);

					this.s2 = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.absent = null;
					} else {
						this.absent = dis.readBoolean();
					}

					this.retard1 = readDate(dis);

					this.retard2 = readDate(dis);

					this.retardTotal = readDate(dis);

					this.presenceHrMn = readDate(dis);

					this.retardHrMn = readDate(dis);

					this.hSupHrMn = readDate(dis);

					this.budgHrMn = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ferie = null;
					} else {
						this.ferie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conge = null;
					} else {
						this.conge = dis.readBoolean();
					}

					this.autorisation = readInteger(dis);

					this.typeSup = readString(dis);

					this.detailJour = readInteger(dis);

					this.numjour = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anomalie = null;
					} else {
						this.anomalie = dis.readBoolean();
					}

					this.sa = readDate(dis);

					this.ra = readDate(dis);

					this.retardautorisation = readDate(dis);

					this.timeAuto = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.jour, dos);

				// int

				dos.writeInt(this.idper);

				// java.util.Date

				writeDate(this.e1, dos);

				// java.util.Date

				writeDate(this.s1, dos);

				// java.util.Date

				writeDate(this.e2, dos);

				// java.util.Date

				writeDate(this.s2, dos);

				// Boolean

				if (this.absent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.absent);
				}

				// java.util.Date

				writeDate(this.retard1, dos);

				// java.util.Date

				writeDate(this.retard2, dos);

				// java.util.Date

				writeDate(this.retardTotal, dos);

				// java.util.Date

				writeDate(this.presenceHrMn, dos);

				// java.util.Date

				writeDate(this.retardHrMn, dos);

				// java.util.Date

				writeDate(this.hSupHrMn, dos);

				// java.util.Date

				writeDate(this.budgHrMn, dos);

				// Boolean

				if (this.ferie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ferie);
				}

				// Boolean

				if (this.conge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.conge);
				}

				// Integer

				writeInteger(this.autorisation, dos);

				// String

				writeString(this.typeSup, dos);

				// Integer

				writeInteger(this.detailJour, dos);

				// Integer

				writeInteger(this.numjour, dos);

				// Boolean

				if (this.anomalie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anomalie);
				}

				// java.util.Date

				writeDate(this.sa, dos);

				// java.util.Date

				writeDate(this.ra, dos);

				// java.util.Date

				writeDate(this.retardautorisation, dos);

				// java.util.Date

				writeDate(this.timeAuto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("jour=" + String.valueOf(jour));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",e1=" + String.valueOf(e1));
			sb.append(",s1=" + String.valueOf(s1));
			sb.append(",e2=" + String.valueOf(e2));
			sb.append(",s2=" + String.valueOf(s2));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",retard1=" + String.valueOf(retard1));
			sb.append(",retard2=" + String.valueOf(retard2));
			sb.append(",retardTotal=" + String.valueOf(retardTotal));
			sb.append(",presenceHrMn=" + String.valueOf(presenceHrMn));
			sb.append(",retardHrMn=" + String.valueOf(retardHrMn));
			sb.append(",hSupHrMn=" + String.valueOf(hSupHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append(",ferie=" + String.valueOf(ferie));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",typeSup=" + typeSup);
			sb.append(",detailJour=" + String.valueOf(detailJour));
			sb.append(",numjour=" + String.valueOf(numjour));
			sb.append(",anomalie=" + String.valueOf(anomalie));
			sb.append(",sa=" + String.valueOf(sa));
			sb.append(",ra=" + String.valueOf(ra));
			sb.append(",retardautorisation="
					+ String.valueOf(retardautorisation));
			sb.append(",timeAuto=" + String.valueOf(timeAuto));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointageInStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				pointageInStruct pointageIn = new pointageInStruct();
				pointageOutStruct pointageOut = new pointageOutStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "pointage";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = "kb2i";
				String dbPwd_tMysqlOutput_1 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				java.sql.Statement stmtClear_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();

				stmtClear_tMysqlOutput_1.executeUpdate("DELETE FROM `"
						+ tableName_tMysqlOutput_1 + "`");

				stmtClear_tMysqlOutput_1.close();

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "pointage"
						+ "` (`jour`,`idper`,`e1`,`s1`,`e2`,`s2`,`absent`,`retard1`,`retard2`,`retardTotal`,`presenceHrMn`,`retardHrMn`,`hSupHrMn`,`budgHrMn`,`ferie`,`conge`,`autorisation`,`typeSup`,`detailJour`,`numjour`,`anomalie`,`sa`,`ra`,`retardautorisation`,`timeAuto`,`idpnt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_1 = 100;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				pointageOutStruct pointageOut_tmp = new pointageOutStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = "kb2i";
				String dbPwd_tMysqlInput_1 = "citrec";

				String url_tMysqlInput_1 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT    `pointage`.`jour`,    `pointage`.`idper`,    `pointage`.`e1`,    `pointage`.`s1`,    `pointage`.`e2`,    `pointage`.`s2`,    `pointage`.`absent`,    `pointage`.`retard1`,    `pointage`.`retard2`,    `pointage`.`retardTotal`,    `pointage`.`presenceHrMn`,    `pointage`.`retardHrMn`,    `pointage`.`hSupHrMn`,    `pointage`.`budgHrMn`,    `pointage`.`ferie`,    `pointage`.`conge`,    `pointage`.`autorisation`,    `pointage`.`typeSup`,    `pointage`.`detailJour`,    `pointage`.`numjour`,    `pointage`.`anomalie`,    `pointage`.`sa`,    `pointage`.`ra`,    `pointage`.`retardautorisation`,    `pointage`.`timeAuto` FROM `pointage`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;
					int column_index_tMysqlInput_1 = 1;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						column_index_tMysqlInput_1 = 1;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.jour = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.jour = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.jour = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.jour = null;
							}

						}

						column_index_tMysqlInput_1 = 2;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.idper = 0;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.idper = rs_tMysqlInput_1
										.getInt(column_index_tMysqlInput_1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_1 = 3;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.e1 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.e1 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.e1 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.e1 = null;
							}

						}

						column_index_tMysqlInput_1 = 4;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.s1 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.s1 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.s1 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.s1 = null;
							}

						}

						column_index_tMysqlInput_1 = 5;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.e2 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.e2 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.e2 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.e2 = null;
							}

						}

						column_index_tMysqlInput_1 = 6;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.s2 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.s2 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.s2 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.s2 = null;
							}

						}

						column_index_tMysqlInput_1 = 7;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.absent = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.absent = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								pointageIn.absent = null;
							}

						}

						column_index_tMysqlInput_1 = 8;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.retard1 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.retard1 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.retard1 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.retard1 = null;
							}

						}

						column_index_tMysqlInput_1 = 9;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.retard2 = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.retard2 = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.retard2 = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.retard2 = null;
							}

						}

						column_index_tMysqlInput_1 = 10;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.retardTotal = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.retardTotal = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.retardTotal = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.retardTotal = null;
							}

						}

						column_index_tMysqlInput_1 = 11;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.presenceHrMn = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.presenceHrMn = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.presenceHrMn = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.presenceHrMn = null;
							}

						}

						column_index_tMysqlInput_1 = 12;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.retardHrMn = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.retardHrMn = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.retardHrMn = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.retardHrMn = null;
							}

						}

						column_index_tMysqlInput_1 = 13;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.hSupHrMn = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.hSupHrMn = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.hSupHrMn = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.hSupHrMn = null;
							}

						}

						column_index_tMysqlInput_1 = 14;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.budgHrMn = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.budgHrMn = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.budgHrMn = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.budgHrMn = null;
							}

						}

						column_index_tMysqlInput_1 = 15;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.ferie = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.ferie = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								pointageIn.ferie = null;
							}

						}

						column_index_tMysqlInput_1 = 16;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.conge = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.conge = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								pointageIn.conge = null;
							}

						}

						column_index_tMysqlInput_1 = 17;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.autorisation = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.autorisation = rs_tMysqlInput_1
										.getInt(column_index_tMysqlInput_1);
							} else {
								pointageIn.autorisation = null;
							}

						}

						column_index_tMysqlInput_1 = 18;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.typeSup = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								pointageIn.typeSup = tmpContent_tMysqlInput_1;
							} else {
								pointageIn.typeSup = null;
							}

						}

						column_index_tMysqlInput_1 = 19;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.detailJour = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.detailJour = rs_tMysqlInput_1
										.getInt(column_index_tMysqlInput_1);
							} else {
								pointageIn.detailJour = null;
							}

						}

						column_index_tMysqlInput_1 = 20;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.numjour = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.numjour = rs_tMysqlInput_1
										.getInt(column_index_tMysqlInput_1);
							} else {
								pointageIn.numjour = null;
							}

						}

						column_index_tMysqlInput_1 = 21;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.anomalie = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								pointageIn.anomalie = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								pointageIn.anomalie = null;
							}

						}

						column_index_tMysqlInput_1 = 22;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.sa = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.sa = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.sa = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.sa = null;
							}

						}

						column_index_tMysqlInput_1 = 23;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.ra = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.ra = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.ra = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.ra = null;
							}

						}

						column_index_tMysqlInput_1 = 24;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.retardautorisation = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.retardautorisation = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.retardautorisation = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.retardautorisation = null;
							}

						}

						column_index_tMysqlInput_1 = 25;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							pointageIn.timeAuto = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									pointageIn.timeAuto = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									pointageIn.timeAuto = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								pointageIn.timeAuto = null;
							}

						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */
						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							pointageOut = null;

							// # Output table : 'pointageOut'
							pointageOut_tmp.jour = pointageIn.jour;
							pointageOut_tmp.idper = pointageIn.idper;
							pointageOut_tmp.e1 = pointageIn.e1;
							pointageOut_tmp.s1 = pointageIn.s1;
							pointageOut_tmp.e2 = pointageIn.e2;
							pointageOut_tmp.s2 = pointageIn.s2;
							pointageOut_tmp.absent = pointageIn.absent;
							pointageOut_tmp.retard1 = pointageIn.retard1;
							pointageOut_tmp.retard2 = pointageIn.retard2;
							pointageOut_tmp.retardTotal = pointageIn.retardTotal;
							pointageOut_tmp.presenceHrMn = pointageIn.presenceHrMn;
							pointageOut_tmp.retardHrMn = pointageIn.retardHrMn;
							pointageOut_tmp.hSupHrMn = pointageIn.hSupHrMn;
							pointageOut_tmp.budgHrMn = pointageIn.budgHrMn;
							pointageOut_tmp.ferie = pointageIn.ferie;
							pointageOut_tmp.conge = pointageIn.conge;
							pointageOut_tmp.autorisation = pointageIn.autorisation;
							pointageOut_tmp.typeSup = pointageIn.typeSup;
							pointageOut_tmp.detailJour = pointageIn.detailJour;
							pointageOut_tmp.numjour = pointageIn.numjour;
							pointageOut_tmp.anomalie = pointageIn.anomalie;
							pointageOut_tmp.sa = pointageIn.sa;
							pointageOut_tmp.ra = pointageIn.ra;
							pointageOut_tmp.retardautorisation = pointageIn.retardautorisation;
							pointageOut_tmp.timeAuto = pointageIn.timeAuto;
							pointageOut_tmp.idpnt = 0;
							pointageOut = pointageOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "pointageOut"
						if (pointageOut != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							whetherReject_tMysqlOutput_1 = false;
							if (pointageOut.jour != null) {
								date_tMysqlOutput_1 = pointageOut.jour
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(1,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(1,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(1,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_1.setInt(2, pointageOut.idper);

							if (pointageOut.e1 != null) {
								date_tMysqlOutput_1 = pointageOut.e1.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(3,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(3,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.DATE);
							}

							if (pointageOut.s1 != null) {
								date_tMysqlOutput_1 = pointageOut.s1.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(4,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(4,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(4,
										java.sql.Types.DATE);
							}

							if (pointageOut.e2 != null) {
								date_tMysqlOutput_1 = pointageOut.e2.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(5,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.DATE);
							}

							if (pointageOut.s2 != null) {
								date_tMysqlOutput_1 = pointageOut.s2.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(6,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(6,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.DATE);
							}

							if (pointageOut.absent == null) {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(7,
										pointageOut.absent);
							}

							if (pointageOut.retard1 != null) {
								date_tMysqlOutput_1 = pointageOut.retard1
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(8,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(8,
										java.sql.Types.DATE);
							}

							if (pointageOut.retard2 != null) {
								date_tMysqlOutput_1 = pointageOut.retard2
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(9,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(9,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(9,
										java.sql.Types.DATE);
							}

							if (pointageOut.retardTotal != null) {
								date_tMysqlOutput_1 = pointageOut.retardTotal
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(10,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(10,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.DATE);
							}

							if (pointageOut.presenceHrMn != null) {
								date_tMysqlOutput_1 = pointageOut.presenceHrMn
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(11,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(11,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.DATE);
							}

							if (pointageOut.retardHrMn != null) {
								date_tMysqlOutput_1 = pointageOut.retardHrMn
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(12,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(12,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(12,
										java.sql.Types.DATE);
							}

							if (pointageOut.hSupHrMn != null) {
								date_tMysqlOutput_1 = pointageOut.hSupHrMn
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(13,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(13,
										java.sql.Types.DATE);
							}

							if (pointageOut.budgHrMn != null) {
								date_tMysqlOutput_1 = pointageOut.budgHrMn
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(14,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(14,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(14,
										java.sql.Types.DATE);
							}

							if (pointageOut.ferie == null) {
								pstmt_tMysqlOutput_1.setNull(15,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(15,
										pointageOut.ferie);
							}

							if (pointageOut.conge == null) {
								pstmt_tMysqlOutput_1.setNull(16,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(16,
										pointageOut.conge);
							}

							if (pointageOut.autorisation == null) {
								pstmt_tMysqlOutput_1.setNull(17,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(17,
										pointageOut.autorisation);
							}

							if (pointageOut.typeSup == null) {
								pstmt_tMysqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(18,
										pointageOut.typeSup);
							}

							if (pointageOut.detailJour == null) {
								pstmt_tMysqlOutput_1.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(19,
										pointageOut.detailJour);
							}

							if (pointageOut.numjour == null) {
								pstmt_tMysqlOutput_1.setNull(20,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_1.setInt(20,
										pointageOut.numjour);
							}

							if (pointageOut.anomalie == null) {
								pstmt_tMysqlOutput_1.setNull(21,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(21,
										pointageOut.anomalie);
							}

							if (pointageOut.sa != null) {
								date_tMysqlOutput_1 = pointageOut.sa.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(22,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(22,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(22,
										java.sql.Types.DATE);
							}

							if (pointageOut.ra != null) {
								date_tMysqlOutput_1 = pointageOut.ra.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(23,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(23,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(23,
										java.sql.Types.DATE);
							}

							if (pointageOut.retardautorisation != null) {
								date_tMysqlOutput_1 = pointageOut.retardautorisation
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(24,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(24,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(24,
										java.sql.Types.DATE);
							}

							if (pointageOut.timeAuto != null) {
								date_tMysqlOutput_1 = pointageOut.timeAuto
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(25,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(25,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(25,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_1.setInt(26, pointageOut.idpnt);

							pstmt_tMysqlOutput_1.addBatch();
							nb_line_tMysqlOutput_1++;

							batchSizeCounter_tMysqlOutput_1++;

							if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.err.println(e.getMessage());

								}

								batchSizeCounter_tMysqlOutput_1 = 0;
							}

							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								try {
									int countSum_tMysqlOutput_1 = 0;

									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_1.commit();

								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "pointageOut"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					rs_tMysqlInput_1.close();
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (batchSizeCounter_tMysqlOutput_1 != 0) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_1 = 0;

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;

						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class affClosureStruct implements
			routines.system.IPersistableRow<affClosureStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public String designation;

		public String getDesignation() {
			return this.designation;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer idpar;

		public Integer getIdpar() {
			return this.idpar;
		}

		public String codeteam;

		public String getCodeteam() {
			return this.codeteam;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idaff;

				result = prime * result
						+ ((this.idpar == null) ? 0 : this.idpar.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final affClosureStruct other = (affClosureStruct) obj;

			if (this.idaff != other.idaff)
				return false;

			if (this.idpar == null) {
				if (other.idpar != null)
					return false;

			} else if (!this.idpar.equals(other.idpar))

				return false;

			return true;
		}

		public void copyDataTo(affClosureStruct other) {

			other.idaff = this.idaff;
			other.designation = this.designation;
			other.description = this.description;
			other.type = this.type;
			other.idpar = this.idpar;
			other.codeteam = this.codeteam;

		}

		public void copyKeysDataTo(affClosureStruct other) {

			other.idaff = this.idaff;
			other.idpar = this.idpar;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idaff = dis.readInt();

					this.designation = readString(dis);

					this.description = readString(dis);

					this.type = readString(dis);

					this.idpar = readInteger(dis);

					this.codeteam = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idaff);

				// String

				writeString(this.designation, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.idpar, dos);

				// String

				writeString(this.codeteam, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idaff=" + String.valueOf(idaff));
			sb.append(",designation=" + designation);
			sb.append(",description=" + description);
			sb.append(",type=" + type);
			sb.append(",idpar=" + String.valueOf(idpar));
			sb.append(",codeteam=" + codeteam);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(affClosureStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idaff, other.idaff);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.idpar, other.idpar);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class affStruct implements
			routines.system.IPersistableRow<affStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public String designation;

		public String getDesignation() {
			return this.designation;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer idpar;

		public Integer getIdpar() {
			return this.idpar;
		}

		public String codeteam;

		public String getCodeteam() {
			return this.codeteam;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idaff = dis.readInt();

					this.designation = readString(dis);

					this.description = readString(dis);

					this.type = readString(dis);

					this.idpar = readInteger(dis);

					this.codeteam = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idaff);

				// String

				writeString(this.designation, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.idpar, dos);

				// String

				writeString(this.codeteam, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idaff=" + String.valueOf(idaff));
			sb.append(",designation=" + designation);
			sb.append(",description=" + description);
			sb.append(",type=" + type);
			sb.append(",idpar=" + String.valueOf(idpar));
			sb.append(",codeteam=" + codeteam);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(affStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				affStruct aff = new affStruct();
				affClosureStruct affClosure = new affClosureStruct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "affiliation";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_3;
				}
				String dbUser_tMysqlOutput_3 = "kb2i";
				String dbPwd_tMysqlOutput_3 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				String insertIgnore_tMysqlOutput_3 = "INSERT IGNORE INTO `"
						+ "affiliation"
						+ "` (`idaff`,`designation`,`description`,`type`,`idpar`,`codeteam`) VALUES (?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `designation` = ?,`description` = ?,`type` = ?,`codeteam` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insertIgnore_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				affClosureStruct affClosure_tmp = new affClosureStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_3 = "kb2i";
				String dbPwd_tMysqlInput_3 = "citrec";

				String url_tMysqlInput_3 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT    `affiliation`.`idaff`,    `affiliation`.`designation`,    `affiliation`.`description`,    `affiliation`.`type`,    `affiliation`.`idpar`,    `affiliation`.`codeteam` FROM `affiliation`";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);
				java.sql.ResultSet rs_tMysqlInput_3 = null;
				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3
							.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
							.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
							.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;
					int column_index_tMysqlInput_3 = 1;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						column_index_tMysqlInput_3 = 1;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.idaff = 0;
						} else {

							if (rs_tMysqlInput_3
									.getObject(column_index_tMysqlInput_3) != null) {
								aff.idaff = rs_tMysqlInput_3
										.getInt(column_index_tMysqlInput_3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_3 = 2;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.designation = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								aff.designation = tmpContent_tMysqlInput_3;
							} else {
								aff.designation = null;
							}

						}

						column_index_tMysqlInput_3 = 3;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.description = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								aff.description = tmpContent_tMysqlInput_3;
							} else {
								aff.description = null;
							}

						}

						column_index_tMysqlInput_3 = 4;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.type = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								aff.type = tmpContent_tMysqlInput_3;
							} else {
								aff.type = null;
							}

						}

						column_index_tMysqlInput_3 = 5;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.idpar = null;
						} else {

							if (rs_tMysqlInput_3
									.getObject(column_index_tMysqlInput_3) != null) {
								aff.idpar = rs_tMysqlInput_3
										.getInt(column_index_tMysqlInput_3);
							} else {
								aff.idpar = null;
							}

						}

						column_index_tMysqlInput_3 = 6;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							aff.codeteam = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								aff.codeteam = tmpContent_tMysqlInput_3;
							} else {
								aff.codeteam = null;
							}

						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */
						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							affClosure = null;

							// # Output table : 'affClosure'
							affClosure_tmp.idaff = aff.idaff;
							affClosure_tmp.designation = aff.designation;
							affClosure_tmp.description = aff.description;
							affClosure_tmp.type = aff.type;
							affClosure_tmp.idpar = aff.idpar;
							affClosure_tmp.codeteam = aff.codeteam;
							affClosure = affClosure_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "affClosure"
						if (affClosure != null) {

							/**
							 * [tMysqlOutput_3 main ] start
							 */

							currentComponent = "tMysqlOutput_3";

							whetherReject_tMysqlOutput_3 = false;
							pstmt_tMysqlOutput_3.setInt(1, affClosure.idaff);

							if (affClosure.designation == null) {
								pstmt_tMysqlOutput_3.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(2,
										affClosure.designation);
							}

							if (affClosure.description == null) {
								pstmt_tMysqlOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(3,
										affClosure.description);
							}

							if (affClosure.type == null) {
								pstmt_tMysqlOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(4,
										affClosure.type);
							}

							if (affClosure.idpar == null) {
								pstmt_tMysqlOutput_3.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_3
										.setInt(5, affClosure.idpar);
							}

							if (affClosure.codeteam == null) {
								pstmt_tMysqlOutput_3.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(6,
										affClosure.codeteam);
							}

							if (affClosure.designation == null) {
								pstmt_tMysqlOutput_3.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(7,
										affClosure.designation);
							}

							if (affClosure.description == null) {
								pstmt_tMysqlOutput_3.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(8,
										affClosure.description);
							}

							if (affClosure.type == null) {
								pstmt_tMysqlOutput_3.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(9,
										affClosure.type);
							}

							if (affClosure.codeteam == null) {
								pstmt_tMysqlOutput_3.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_3.setString(10,
										affClosure.codeteam);
							}

							int count_on_duplicate_key_tMysqlOutput_3 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_3 = pstmt_tMysqlOutput_3
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_3 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_3 == 1) {
								insertedCount_tMysqlOutput_3 += count_on_duplicate_key_tMysqlOutput_3;
							} else {
								insertedCount_tMysqlOutput_3 += 1;
								updatedCount_tMysqlOutput_3 += count_on_duplicate_key_tMysqlOutput_3 - 1;
							}
							commitCounter_tMysqlOutput_3++;

							if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

								conn_tMysqlOutput_3.commit();

								commitCounter_tMysqlOutput_3 = 0;

							}

							tos_count_tMysqlOutput_3++;

							/**
							 * [tMysqlOutput_3 main ] stop
							 */

						} // End of branch "affClosure"

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					rs_tMysqlInput_3.close();
					stmt_tMysqlInput_3.close();

					if (conn_tMysqlInput_3 != null
							&& !conn_tMysqlInput_3.isClosed()) {
						conn_tMysqlInput_3.close();
					}

				}
				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				conn_tMysqlOutput_3.commit();

				conn_tMysqlOutput_3.close();

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class tempsOutputStruct implements
			routines.system.IPersistableRow<tempsOutputStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idtmp;

		public int getIdtmp() {
			return this.idtmp;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public String mois_char;

		public String getMois_char() {
			return this.mois_char;
		}

		public String jour_char;

		public String getJour_char() {
			return this.jour_char;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idtmp;

				result = prime * result
						+ ((this.date == null) ? 0 : this.date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tempsOutputStruct other = (tempsOutputStruct) obj;

			if (this.idtmp != other.idtmp)
				return false;

			if (this.date == null) {
				if (other.date != null)
					return false;

			} else if (!this.date.equals(other.date))

				return false;

			return true;
		}

		public void copyDataTo(tempsOutputStruct other) {

			other.idtmp = this.idtmp;
			other.date = this.date;
			other.jour = this.jour;
			other.mois = this.mois;
			other.Annee = this.Annee;
			other.mois_char = this.mois_char;
			other.jour_char = this.jour_char;

		}

		public void copyKeysDataTo(tempsOutputStruct other) {

			other.idtmp = this.idtmp;
			other.date = this.date;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idtmp = dis.readInt();

					this.date = readDate(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.Annee = readInteger(dis);

					this.mois_char = readString(dis);

					this.jour_char = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtmp);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// String

				writeString(this.mois_char, dos);

				// String

				writeString(this.jour_char, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtmp=" + String.valueOf(idtmp));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",mois_char=" + mois_char);
			sb.append(",jour_char=" + jour_char);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tempsOutputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtmp, other.idtmp);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointageStruct implements
			routines.system.IPersistableRow<pointageStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public java.util.Date jour;

		public java.util.Date getJour() {
			return this.jour;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public java.util.Date e1;

		public java.util.Date getE1() {
			return this.e1;
		}

		public java.util.Date s1;

		public java.util.Date getS1() {
			return this.s1;
		}

		public java.util.Date e2;

		public java.util.Date getE2() {
			return this.e2;
		}

		public java.util.Date s2;

		public java.util.Date getS2() {
			return this.s2;
		}

		public Boolean absent;

		public Boolean getAbsent() {
			return this.absent;
		}

		public java.util.Date retard1;

		public java.util.Date getRetard1() {
			return this.retard1;
		}

		public java.util.Date retard2;

		public java.util.Date getRetard2() {
			return this.retard2;
		}

		public java.util.Date retardTotal;

		public java.util.Date getRetardTotal() {
			return this.retardTotal;
		}

		public java.util.Date presenceHrMn;

		public java.util.Date getPresenceHrMn() {
			return this.presenceHrMn;
		}

		public java.util.Date retardHrMn;

		public java.util.Date getRetardHrMn() {
			return this.retardHrMn;
		}

		public java.util.Date hSupHrMn;

		public java.util.Date getHSupHrMn() {
			return this.hSupHrMn;
		}

		public java.util.Date budgHrMn;

		public java.util.Date getBudgHrMn() {
			return this.budgHrMn;
		}

		public Boolean ferie;

		public Boolean getFerie() {
			return this.ferie;
		}

		public Boolean conge;

		public Boolean getConge() {
			return this.conge;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public String typeSup;

		public String getTypeSup() {
			return this.typeSup;
		}

		public Integer detailJour;

		public Integer getDetailJour() {
			return this.detailJour;
		}

		public Integer numjour;

		public Integer getNumjour() {
			return this.numjour;
		}

		public Boolean anomalie;

		public Boolean getAnomalie() {
			return this.anomalie;
		}

		public java.util.Date sa;

		public java.util.Date getSa() {
			return this.sa;
		}

		public java.util.Date ra;

		public java.util.Date getRa() {
			return this.ra;
		}

		public java.util.Date retardautorisation;

		public java.util.Date getRetardautorisation() {
			return this.retardautorisation;
		}

		public java.util.Date timeAuto;

		public java.util.Date getTimeAuto() {
			return this.timeAuto;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.jour = readDate(dis);

					this.idper = dis.readInt();

					this.e1 = readDate(dis);

					this.s1 = readDate(dis);

					this.e2 = readDate(dis);

					this.s2 = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.absent = null;
					} else {
						this.absent = dis.readBoolean();
					}

					this.retard1 = readDate(dis);

					this.retard2 = readDate(dis);

					this.retardTotal = readDate(dis);

					this.presenceHrMn = readDate(dis);

					this.retardHrMn = readDate(dis);

					this.hSupHrMn = readDate(dis);

					this.budgHrMn = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ferie = null;
					} else {
						this.ferie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conge = null;
					} else {
						this.conge = dis.readBoolean();
					}

					this.autorisation = readInteger(dis);

					this.typeSup = readString(dis);

					this.detailJour = readInteger(dis);

					this.numjour = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anomalie = null;
					} else {
						this.anomalie = dis.readBoolean();
					}

					this.sa = readDate(dis);

					this.ra = readDate(dis);

					this.retardautorisation = readDate(dis);

					this.timeAuto = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.jour, dos);

				// int

				dos.writeInt(this.idper);

				// java.util.Date

				writeDate(this.e1, dos);

				// java.util.Date

				writeDate(this.s1, dos);

				// java.util.Date

				writeDate(this.e2, dos);

				// java.util.Date

				writeDate(this.s2, dos);

				// Boolean

				if (this.absent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.absent);
				}

				// java.util.Date

				writeDate(this.retard1, dos);

				// java.util.Date

				writeDate(this.retard2, dos);

				// java.util.Date

				writeDate(this.retardTotal, dos);

				// java.util.Date

				writeDate(this.presenceHrMn, dos);

				// java.util.Date

				writeDate(this.retardHrMn, dos);

				// java.util.Date

				writeDate(this.hSupHrMn, dos);

				// java.util.Date

				writeDate(this.budgHrMn, dos);

				// Boolean

				if (this.ferie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ferie);
				}

				// Boolean

				if (this.conge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.conge);
				}

				// Integer

				writeInteger(this.autorisation, dos);

				// String

				writeString(this.typeSup, dos);

				// Integer

				writeInteger(this.detailJour, dos);

				// Integer

				writeInteger(this.numjour, dos);

				// Boolean

				if (this.anomalie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anomalie);
				}

				// java.util.Date

				writeDate(this.sa, dos);

				// java.util.Date

				writeDate(this.ra, dos);

				// java.util.Date

				writeDate(this.retardautorisation, dos);

				// java.util.Date

				writeDate(this.timeAuto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("jour=" + String.valueOf(jour));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",e1=" + String.valueOf(e1));
			sb.append(",s1=" + String.valueOf(s1));
			sb.append(",e2=" + String.valueOf(e2));
			sb.append(",s2=" + String.valueOf(s2));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",retard1=" + String.valueOf(retard1));
			sb.append(",retard2=" + String.valueOf(retard2));
			sb.append(",retardTotal=" + String.valueOf(retardTotal));
			sb.append(",presenceHrMn=" + String.valueOf(presenceHrMn));
			sb.append(",retardHrMn=" + String.valueOf(retardHrMn));
			sb.append(",hSupHrMn=" + String.valueOf(hSupHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append(",ferie=" + String.valueOf(ferie));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",typeSup=" + typeSup);
			sb.append(",detailJour=" + String.valueOf(detailJour));
			sb.append(",numjour=" + String.valueOf(numjour));
			sb.append(",anomalie=" + String.valueOf(anomalie));
			sb.append(",sa=" + String.valueOf(sa));
			sb.append(",ra=" + String.valueOf(ra));
			sb.append(",retardautorisation="
					+ String.valueOf(retardautorisation));
			sb.append(",timeAuto=" + String.valueOf(timeAuto));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				pointageStruct pointage = new pointageStruct();
				tempsOutputStruct tempsOutput = new tempsOutputStruct();

				/**
				 * [tMysqlOutput_5 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_5", false);
				start_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_5";

				int tos_count_tMysqlOutput_5 = 0;

				int nb_line_tMysqlOutput_5 = 0;
				int nb_line_update_tMysqlOutput_5 = 0;
				int nb_line_inserted_tMysqlOutput_5 = 0;
				int nb_line_deleted_tMysqlOutput_5 = 0;
				int nb_line_rejected_tMysqlOutput_5 = 0;

				int deletedCount_tMysqlOutput_5 = 0;
				int updatedCount_tMysqlOutput_5 = 0;
				int insertedCount_tMysqlOutput_5 = 0;

				int rejectedCount_tMysqlOutput_5 = 0;

				String tableName_tMysqlOutput_5 = "temps";
				boolean whetherReject_tMysqlOutput_5 = false;

				java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5.getTime()
						.getTime();
				calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5
						.getTime().getTime();
				long date_tMysqlOutput_5;

				java.sql.Connection conn_tMysqlOutput_5 = null;
				String dbProperties_tMysqlOutput_5 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_5 = null;
				if (dbProperties_tMysqlOutput_5 == null
						|| dbProperties_tMysqlOutput_5.trim().length() == 0) {
					url_tMysqlOutput_5 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_5 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_5;
				}
				String dbUser_tMysqlOutput_5 = "kb2i";
				String dbPwd_tMysqlOutput_5 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_5, dbUser_tMysqlOutput_5,
						dbPwd_tMysqlOutput_5);

				conn_tMysqlOutput_5.setAutoCommit(false);
				int commitEvery_tMysqlOutput_5 = 10000;
				int commitCounter_tMysqlOutput_5 = 0;

				int count_tMysqlOutput_5 = 0;

				java.sql.Statement stmtClear_tMysqlOutput_5 = conn_tMysqlOutput_5
						.createStatement();

				stmtClear_tMysqlOutput_5.executeUpdate("DELETE FROM `"
						+ tableName_tMysqlOutput_5 + "`");

				stmtClear_tMysqlOutput_5.close();

				String insert_tMysqlOutput_5 = "INSERT INTO `"
						+ "temps"
						+ "` (`idtmp`,`date`,`jour`,`mois`,`Annee`,`mois_char`,`jour_char`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_5 = 100;
				int batchSizeCounter_tMysqlOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5
						.prepareStatement(insert_tMysqlOutput_5);

				/**
				 * [tMysqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
					int mois;
					int jour;
					int annee;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tempsOutputStruct tempsOutput_tmp = new tempsOutputStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tMysqlInput_5 begin ] start
				 */

				ok_Hash.put("tMysqlInput_5", false);
				start_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				currentComponent = "tMysqlInput_5";

				int tos_count_tMysqlInput_5 = 0;

				java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5
						.getTime();
				int nb_line_tMysqlInput_5 = 0;
				java.sql.Connection conn_tMysqlInput_5 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_5 = "kb2i";
				String dbPwd_tMysqlInput_5 = "citrec";

				String url_tMysqlInput_5 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_5, dbUser_tMysqlInput_5,
						dbPwd_tMysqlInput_5);

				java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5
						.createStatement();

				String dbquery_tMysqlInput_5 = "SELECT  distinct(pointage.`jour`) FROM `pointage`";

				globalMap.put("tMysqlInput_5_QUERY", dbquery_tMysqlInput_5);
				java.sql.ResultSet rs_tMysqlInput_5 = null;
				try {
					rs_tMysqlInput_5 = stmt_tMysqlInput_5
							.executeQuery(dbquery_tMysqlInput_5);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5
							.getMetaData();
					int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5
							.getColumnCount();

					String tmpContent_tMysqlInput_5 = null;
					int column_index_tMysqlInput_5 = 1;

					while (rs_tMysqlInput_5.next()) {
						nb_line_tMysqlInput_5++;

						column_index_tMysqlInput_5 = 1;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.jour = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.jour = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.jour = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.jour = null;
							}

						}

						column_index_tMysqlInput_5 = 2;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.idper = 0;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.idper = rs_tMysqlInput_5
										.getInt(column_index_tMysqlInput_5);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_5 = 3;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.e1 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.e1 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.e1 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.e1 = null;
							}

						}

						column_index_tMysqlInput_5 = 4;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.s1 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.s1 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.s1 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.s1 = null;
							}

						}

						column_index_tMysqlInput_5 = 5;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.e2 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.e2 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.e2 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.e2 = null;
							}

						}

						column_index_tMysqlInput_5 = 6;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.s2 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.s2 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.s2 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.s2 = null;
							}

						}

						column_index_tMysqlInput_5 = 7;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.absent = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.absent = rs_tMysqlInput_5
										.getBoolean(column_index_tMysqlInput_5);
							} else {
								pointage.absent = null;
							}

						}

						column_index_tMysqlInput_5 = 8;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.retard1 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.retard1 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.retard1 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.retard1 = null;
							}

						}

						column_index_tMysqlInput_5 = 9;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.retard2 = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.retard2 = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.retard2 = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.retard2 = null;
							}

						}

						column_index_tMysqlInput_5 = 10;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.retardTotal = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.retardTotal = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.retardTotal = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.retardTotal = null;
							}

						}

						column_index_tMysqlInput_5 = 11;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.presenceHrMn = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.presenceHrMn = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.presenceHrMn = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.presenceHrMn = null;
							}

						}

						column_index_tMysqlInput_5 = 12;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.retardHrMn = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.retardHrMn = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.retardHrMn = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.retardHrMn = null;
							}

						}

						column_index_tMysqlInput_5 = 13;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.hSupHrMn = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.hSupHrMn = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.hSupHrMn = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.hSupHrMn = null;
							}

						}

						column_index_tMysqlInput_5 = 14;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.budgHrMn = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.budgHrMn = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.budgHrMn = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.budgHrMn = null;
							}

						}

						column_index_tMysqlInput_5 = 15;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.ferie = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.ferie = rs_tMysqlInput_5
										.getBoolean(column_index_tMysqlInput_5);
							} else {
								pointage.ferie = null;
							}

						}

						column_index_tMysqlInput_5 = 16;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.conge = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.conge = rs_tMysqlInput_5
										.getBoolean(column_index_tMysqlInput_5);
							} else {
								pointage.conge = null;
							}

						}

						column_index_tMysqlInput_5 = 17;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.autorisation = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.autorisation = rs_tMysqlInput_5
										.getInt(column_index_tMysqlInput_5);
							} else {
								pointage.autorisation = null;
							}

						}

						column_index_tMysqlInput_5 = 18;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.typeSup = null;
						} else {

							tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5);
							if (tmpContent_tMysqlInput_5 != null) {
								pointage.typeSup = tmpContent_tMysqlInput_5;
							} else {
								pointage.typeSup = null;
							}

						}

						column_index_tMysqlInput_5 = 19;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.detailJour = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.detailJour = rs_tMysqlInput_5
										.getInt(column_index_tMysqlInput_5);
							} else {
								pointage.detailJour = null;
							}

						}

						column_index_tMysqlInput_5 = 20;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.numjour = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.numjour = rs_tMysqlInput_5
										.getInt(column_index_tMysqlInput_5);
							} else {
								pointage.numjour = null;
							}

						}

						column_index_tMysqlInput_5 = 21;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.anomalie = null;
						} else {

							if (rs_tMysqlInput_5
									.getObject(column_index_tMysqlInput_5) != null) {
								pointage.anomalie = rs_tMysqlInput_5
										.getBoolean(column_index_tMysqlInput_5);
							} else {
								pointage.anomalie = null;
							}

						}

						column_index_tMysqlInput_5 = 22;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.sa = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.sa = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.sa = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.sa = null;
							}

						}

						column_index_tMysqlInput_5 = 23;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.ra = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.ra = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.ra = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.ra = null;
							}

						}

						column_index_tMysqlInput_5 = 24;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.retardautorisation = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.retardautorisation = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.retardautorisation = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.retardautorisation = null;
							}

						}

						column_index_tMysqlInput_5 = 25;

						if (colQtyInRs_tMysqlInput_5 < column_index_tMysqlInput_5) {
							pointage.timeAuto = null;
						} else {

							if (rs_tMysqlInput_5
									.getString(column_index_tMysqlInput_5) != null) {
								String dateString_tMysqlInput_5 = rs_tMysqlInput_5
										.getString(column_index_tMysqlInput_5);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_5)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_5)) {
									pointage.timeAuto = rs_tMysqlInput_5
											.getTimestamp(column_index_tMysqlInput_5);
								} else {
									pointage.timeAuto = (java.util.Date) year0_tMysqlInput_5
											.clone();
								}
							} else {
								pointage.timeAuto = null;
							}

						}

						/**
						 * [tMysqlInput_5 begin ] stop
						 */
						/**
						 * [tMysqlInput_5 main ] start
						 */

						currentComponent = "tMysqlInput_5";

						tos_count_tMysqlInput_5++;

						/**
						 * [tMysqlInput_5 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;
							Var.mois = TalendDate.getPartOfDate("MONTH",
									TalendDate.parseDate("yyyy-MM-dd",
											(pointage.jour).toString()));
							Var.jour = TalendDate.getPartOfDate("DAY_OF_MONTH",
									TalendDate.parseDate("yyyy-MM-dd",
											(pointage.jour).toString()));
							Var.annee = TalendDate.getPartOfDate("YEAR",
									TalendDate.parseDate("yyyy-MM-dd",
											(pointage.jour).toString()));// ###############################
							// ###############################
							// # Output tables

							tempsOutput = null;

							// # Output table : 'tempsOutput'
							tempsOutput_tmp.idtmp = 0;
							tempsOutput_tmp.date = pointage.jour;
							tempsOutput_tmp.jour = Var.jour;
							tempsOutput_tmp.mois = Var.mois + 1;
							tempsOutput_tmp.Annee = Var.annee;
							tempsOutput_tmp.mois_char = null;
							tempsOutput_tmp.jour_char = null;
							tempsOutput = tempsOutput_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "tempsOutput"
						if (tempsOutput != null) {

							/**
							 * [tMysqlOutput_5 main ] start
							 */

							currentComponent = "tMysqlOutput_5";

							whetherReject_tMysqlOutput_5 = false;
							pstmt_tMysqlOutput_5.setInt(1, tempsOutput.idtmp);

							if (tempsOutput.date != null) {
								date_tMysqlOutput_5 = tempsOutput.date
										.getTime();
								if (date_tMysqlOutput_5 < year1_tMysqlOutput_5
										|| date_tMysqlOutput_5 >= year10000_tMysqlOutput_5) {
									pstmt_tMysqlOutput_5.setString(2,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_5.setTimestamp(2,
											new java.sql.Timestamp(
													date_tMysqlOutput_5));
								}
							} else {
								pstmt_tMysqlOutput_5.setNull(2,
										java.sql.Types.DATE);
							}

							if (tempsOutput.jour == null) {
								pstmt_tMysqlOutput_5.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_5
										.setInt(3, tempsOutput.jour);
							}

							if (tempsOutput.mois == null) {
								pstmt_tMysqlOutput_5.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_5
										.setInt(4, tempsOutput.mois);
							}

							if (tempsOutput.Annee == null) {
								pstmt_tMysqlOutput_5.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_5.setInt(5,
										tempsOutput.Annee);
							}

							if (tempsOutput.mois_char == null) {
								pstmt_tMysqlOutput_5.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(6,
										tempsOutput.mois_char);
							}

							if (tempsOutput.jour_char == null) {
								pstmt_tMysqlOutput_5.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_5.setString(7,
										tempsOutput.jour_char);
							}

							pstmt_tMysqlOutput_5.addBatch();
							nb_line_tMysqlOutput_5++;

							batchSizeCounter_tMysqlOutput_5++;

							if (batchSize_tMysqlOutput_5 <= batchSizeCounter_tMysqlOutput_5) {
								try {
									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

									System.err.println(e.getMessage());

								}

								batchSizeCounter_tMysqlOutput_5 = 0;
							}

							commitCounter_tMysqlOutput_5++;

							if (commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

								try {
									int countSum_tMysqlOutput_5 = 0;

									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_5.commit();

								commitCounter_tMysqlOutput_5 = 0;

							}

							tos_count_tMysqlOutput_5++;

							/**
							 * [tMysqlOutput_5 main ] stop
							 */

						} // End of branch "tempsOutput"

						/**
						 * [tMysqlInput_5 end ] start
						 */

						currentComponent = "tMysqlInput_5";

					}
				} finally {
					rs_tMysqlInput_5.close();
					stmt_tMysqlInput_5.close();

					if (conn_tMysqlInput_5 != null
							&& !conn_tMysqlInput_5.isClosed()) {
						conn_tMysqlInput_5.close();
					}

				}
				globalMap.put("tMysqlInput_5_NB_LINE", nb_line_tMysqlInput_5);

				ok_Hash.put("tMysqlInput_5", true);
				end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				/**
				 * [tMysqlInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMysqlOutput_5 end ] start
				 */

				currentComponent = "tMysqlOutput_5";

				try {
					if (batchSizeCounter_tMysqlOutput_5 != 0) {
						int countSum_tMysqlOutput_5 = 0;
						for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
								.executeBatch()) {
							countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
									: countEach_tMysqlOutput_5);
						}

						insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_5 = 0;
					for (int countEach_tMysqlOutput_5 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
								: countEach_tMysqlOutput_5);
					}

					insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_5 = 0;

				try {
					if (pstmt_tMysqlOutput_5 != null) {
						int countSum_tMysqlOutput_5 = 0;

						for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
								.executeBatch()) {
							countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
									: countEach_tMysqlOutput_5);
						}

						insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_5 = 0;
					for (int countEach_tMysqlOutput_5 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
								: countEach_tMysqlOutput_5);
					}

					insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_5 != null) {

					pstmt_tMysqlOutput_5.close();

				}

				conn_tMysqlOutput_5.commit();

				conn_tMysqlOutput_5.close();

				nb_line_deleted_tMysqlOutput_5 = nb_line_deleted_tMysqlOutput_5
						+ deletedCount_tMysqlOutput_5;
				nb_line_update_tMysqlOutput_5 = nb_line_update_tMysqlOutput_5
						+ updatedCount_tMysqlOutput_5;
				nb_line_inserted_tMysqlOutput_5 = nb_line_inserted_tMysqlOutput_5
						+ insertedCount_tMysqlOutput_5;
				nb_line_rejected_tMysqlOutput_5 = nb_line_rejected_tMysqlOutput_5
						+ rejectedCount_tMysqlOutput_5;

				globalMap.put("tMysqlOutput_5_NB_LINE", nb_line_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_5);
				globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_5);

				ok_Hash.put("tMysqlOutput_5", true);
				end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_5 finally ] start
				 */

				currentComponent = "tMysqlInput_5";

				/**
				 * [tMysqlInput_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMysqlOutput_5 finally ] start
				 */

				currentComponent = "tMysqlOutput_5";

				/**
				 * [tMysqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class tempsOutput2Struct implements
			routines.system.IPersistableRow<tempsOutput2Struct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idtmp;

		public int getIdtmp() {
			return this.idtmp;
		}

		public String mois_char;

		public String getMois_char() {
			return this.mois_char;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idtmp;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tempsOutput2Struct other = (tempsOutput2Struct) obj;

			if (this.idtmp != other.idtmp)
				return false;

			return true;
		}

		public void copyDataTo(tempsOutput2Struct other) {

			other.idtmp = this.idtmp;
			other.mois_char = this.mois_char;

		}

		public void copyKeysDataTo(tempsOutput2Struct other) {

			other.idtmp = this.idtmp;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idtmp = dis.readInt();

					this.mois_char = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtmp);

				// String

				writeString(this.mois_char, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtmp=" + String.valueOf(idtmp));
			sb.append(",mois_char=" + mois_char);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tempsOutput2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtmp, other.idtmp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tempsStruct implements
			routines.system.IPersistableRow<tempsStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idtmp;

		public int getIdtmp() {
			return this.idtmp;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public String mois_char;

		public String getMois_char() {
			return this.mois_char;
		}

		public String jour_char;

		public String getJour_char() {
			return this.jour_char;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idtmp = dis.readInt();

					this.date = readDate(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.Annee = readInteger(dis);

					this.mois_char = readString(dis);

					this.jour_char = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtmp);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// String

				writeString(this.mois_char, dos);

				// String

				writeString(this.jour_char, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtmp=" + String.valueOf(idtmp));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",mois_char=" + mois_char);
			sb.append(",jour_char=" + jour_char);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tempsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMysqlInput_6Struct implements
			routines.system.IPersistableRow<after_tMysqlInput_6Struct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idtmp;

		public int getIdtmp() {
			return this.idtmp;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public String mois_char;

		public String getMois_char() {
			return this.mois_char;
		}

		public String jour_char;

		public String getJour_char() {
			return this.jour_char;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idtmp;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_6Struct other = (after_tMysqlInput_6Struct) obj;

			if (this.idtmp != other.idtmp)
				return false;

			return true;
		}

		public void copyDataTo(after_tMysqlInput_6Struct other) {

			other.idtmp = this.idtmp;
			other.date = this.date;
			other.jour = this.jour;
			other.mois = this.mois;
			other.Annee = this.Annee;
			other.mois_char = this.mois_char;
			other.jour_char = this.jour_char;

		}

		public void copyKeysDataTo(after_tMysqlInput_6Struct other) {

			other.idtmp = this.idtmp;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idtmp = dis.readInt();

					this.date = readDate(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.Annee = readInteger(dis);

					this.mois_char = readString(dis);

					this.jour_char = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtmp);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// String

				writeString(this.mois_char, dos);

				// String

				writeString(this.jour_char, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtmp=" + String.valueOf(idtmp));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",mois_char=" + mois_char);
			sb.append(",jour_char=" + jour_char);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMysqlInput_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idtmp, other.idtmp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_7Process(globalMap);

				tempsStruct temps = new tempsStruct();
				tempsOutput2Struct tempsOutput2 = new tempsOutput2Struct();

				/**
				 * [tMysqlOutput_6 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_6", false);
				start_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_6";

				int tos_count_tMysqlOutput_6 = 0;

				int updateKeyCount_tMysqlOutput_6 = 1;
				if (updateKeyCount_tMysqlOutput_6 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_6 = 0;
				int nb_line_update_tMysqlOutput_6 = 0;
				int nb_line_inserted_tMysqlOutput_6 = 0;
				int nb_line_deleted_tMysqlOutput_6 = 0;
				int nb_line_rejected_tMysqlOutput_6 = 0;

				int deletedCount_tMysqlOutput_6 = 0;
				int updatedCount_tMysqlOutput_6 = 0;
				int insertedCount_tMysqlOutput_6 = 0;

				int rejectedCount_tMysqlOutput_6 = 0;

				String tableName_tMysqlOutput_6 = "temps";
				boolean whetherReject_tMysqlOutput_6 = false;

				java.util.Calendar calendar_tMysqlOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_6 = calendar_tMysqlOutput_6.getTime()
						.getTime();
				calendar_tMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_6 = calendar_tMysqlOutput_6
						.getTime().getTime();
				long date_tMysqlOutput_6;

				java.sql.Connection conn_tMysqlOutput_6 = null;
				String dbProperties_tMysqlOutput_6 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_6 = null;
				if (dbProperties_tMysqlOutput_6 == null
						|| dbProperties_tMysqlOutput_6.trim().length() == 0) {
					url_tMysqlOutput_6 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_6 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_6;
				}
				String dbUser_tMysqlOutput_6 = "kb2i";
				String dbPwd_tMysqlOutput_6 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_6 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_6, dbUser_tMysqlOutput_6,
						dbPwd_tMysqlOutput_6);

				conn_tMysqlOutput_6.setAutoCommit(false);
				int commitEvery_tMysqlOutput_6 = 10000;
				int commitCounter_tMysqlOutput_6 = 0;
				int batchSize_tMysqlOutput_6 = 10000;
				int batchSizeCounter_tMysqlOutput_6 = 0;

				int count_tMysqlOutput_6 = 0;

				String update_tMysqlOutput_6 = "UPDATE `" + "temps"
						+ "` SET `mois_char` = ? WHERE `idtmp` = ?";

				java.sql.PreparedStatement pstmt_tMysqlOutput_6 = conn_tMysqlOutput_6
						.prepareStatement(update_tMysqlOutput_6);

				/**
				 * [tMysqlOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moisStruct> tHash_Lookup_mois = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moisStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moisStruct>) globalMap
						.get("tHash_Lookup_mois"));

				moisStruct moisHashKey = new moisStruct();
				moisStruct moisDefault = new moisStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tempsOutput2Struct tempsOutput2_tmp = new tempsOutput2Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tMysqlInput_6 begin ] start
				 */

				ok_Hash.put("tMysqlInput_6", false);
				start_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				currentComponent = "tMysqlInput_6";

				int tos_count_tMysqlInput_6 = 0;

				java.util.Calendar calendar_tMysqlInput_6 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_6 = calendar_tMysqlInput_6
						.getTime();
				int nb_line_tMysqlInput_6 = 0;
				java.sql.Connection conn_tMysqlInput_6 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_6 = "kb2i";
				String dbPwd_tMysqlInput_6 = "citrec";

				String url_tMysqlInput_6 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_6 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_6, dbUser_tMysqlInput_6,
						dbPwd_tMysqlInput_6);

				java.sql.Statement stmt_tMysqlInput_6 = conn_tMysqlInput_6
						.createStatement();

				String dbquery_tMysqlInput_6 = "SELECT    `temps`.`idtmp`,    `temps`.`date`,    `temps`.`jour`,    `temps`.`mois`,    `temps`.`Annee`,    `temps`.`mois_char`,    `temps`.`jour_char` FROM `temps`";

				globalMap.put("tMysqlInput_6_QUERY", dbquery_tMysqlInput_6);
				java.sql.ResultSet rs_tMysqlInput_6 = null;
				try {
					rs_tMysqlInput_6 = stmt_tMysqlInput_6
							.executeQuery(dbquery_tMysqlInput_6);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_6 = rs_tMysqlInput_6
							.getMetaData();
					int colQtyInRs_tMysqlInput_6 = rsmd_tMysqlInput_6
							.getColumnCount();

					String tmpContent_tMysqlInput_6 = null;
					int column_index_tMysqlInput_6 = 1;

					while (rs_tMysqlInput_6.next()) {
						nb_line_tMysqlInput_6++;

						column_index_tMysqlInput_6 = 1;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.idtmp = 0;
						} else {

							if (rs_tMysqlInput_6
									.getObject(column_index_tMysqlInput_6) != null) {
								temps.idtmp = rs_tMysqlInput_6
										.getInt(column_index_tMysqlInput_6);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_6 = 2;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.date = null;
						} else {

							if (rs_tMysqlInput_6
									.getString(column_index_tMysqlInput_6) != null) {
								String dateString_tMysqlInput_6 = rs_tMysqlInput_6
										.getString(column_index_tMysqlInput_6);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_6)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_6)) {
									temps.date = rs_tMysqlInput_6
											.getTimestamp(column_index_tMysqlInput_6);
								} else {
									temps.date = (java.util.Date) year0_tMysqlInput_6
											.clone();
								}
							} else {
								temps.date = null;
							}

						}

						column_index_tMysqlInput_6 = 3;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.jour = null;
						} else {

							if (rs_tMysqlInput_6
									.getObject(column_index_tMysqlInput_6) != null) {
								temps.jour = rs_tMysqlInput_6
										.getInt(column_index_tMysqlInput_6);
							} else {
								temps.jour = null;
							}

						}

						column_index_tMysqlInput_6 = 4;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.mois = null;
						} else {

							if (rs_tMysqlInput_6
									.getObject(column_index_tMysqlInput_6) != null) {
								temps.mois = rs_tMysqlInput_6
										.getInt(column_index_tMysqlInput_6);
							} else {
								temps.mois = null;
							}

						}

						column_index_tMysqlInput_6 = 5;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.Annee = null;
						} else {

							if (rs_tMysqlInput_6
									.getObject(column_index_tMysqlInput_6) != null) {
								temps.Annee = rs_tMysqlInput_6
										.getInt(column_index_tMysqlInput_6);
							} else {
								temps.Annee = null;
							}

						}

						column_index_tMysqlInput_6 = 6;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.mois_char = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(column_index_tMysqlInput_6);
							if (tmpContent_tMysqlInput_6 != null) {
								temps.mois_char = tmpContent_tMysqlInput_6;
							} else {
								temps.mois_char = null;
							}

						}

						column_index_tMysqlInput_6 = 7;

						if (colQtyInRs_tMysqlInput_6 < column_index_tMysqlInput_6) {
							temps.jour_char = null;
						} else {

							tmpContent_tMysqlInput_6 = rs_tMysqlInput_6
									.getString(column_index_tMysqlInput_6);
							if (tmpContent_tMysqlInput_6 != null) {
								temps.jour_char = tmpContent_tMysqlInput_6;
							} else {
								temps.jour_char = null;
							}

						}

						/**
						 * [tMysqlInput_6 begin ] stop
						 */
						/**
						 * [tMysqlInput_6 main ] start
						 */

						currentComponent = "tMysqlInput_6";

						tos_count_tMysqlInput_6++;

						/**
						 * [tMysqlInput_6 main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "mois"
						// /////////////////////////////////////////////

						boolean forceLoopmois = false;

						moisStruct moisObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_6 = false;

							Object exprKeyValue_mois__idmois = temps.mois;
							if (exprKeyValue_mois__idmois == null) {
								hasCasePrimitiveKeyWithNull_tMap_6 = true;
							} else {
								moisHashKey.idmois = (int) (Integer) exprKeyValue_mois__idmois;
							}

							moisHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_6) { // G_TM_M_091

								tHash_Lookup_mois.lookup(moisHashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_mois != null
								&& tHash_Lookup_mois.getCount(moisHashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'mois' and it contains more one result from keys :  mois.idmois = '"
							// + moisHashKey.idmois + "'");
						} // G 071

						moisStruct mois = null;

						moisStruct fromLookup_mois = null;
						mois = moisDefault;

						if (tHash_Lookup_mois != null
								&& tHash_Lookup_mois.hasNext()) { // G 099

							fromLookup_mois = tHash_Lookup_mois.next();

						} // G 099

						if (fromLookup_mois != null) {
							mois = fromLookup_mois;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							tempsOutput2 = null;

							// # Output table : 'tempsOutput2'
							tempsOutput2_tmp.idtmp = temps.idtmp;
							tempsOutput2_tmp.mois_char = mois.designation_FR;
							tempsOutput2 = tempsOutput2_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */
						// Start of branch "tempsOutput2"
						if (tempsOutput2 != null) {

							/**
							 * [tMysqlOutput_6 main ] start
							 */

							currentComponent = "tMysqlOutput_6";

							whetherReject_tMysqlOutput_6 = false;
							if (tempsOutput2.mois_char == null) {
								pstmt_tMysqlOutput_6.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_6.setString(1,
										tempsOutput2.mois_char);
							}

							pstmt_tMysqlOutput_6.setInt(
									2 + count_tMysqlOutput_6,
									tempsOutput2.idtmp);

							pstmt_tMysqlOutput_6.addBatch();
							nb_line_tMysqlOutput_6++;

							batchSizeCounter_tMysqlOutput_6++;

							if (batchSize_tMysqlOutput_6 <= batchSizeCounter_tMysqlOutput_6) {
								try {
									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
											.executeBatch()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									batchSizeCounter_tMysqlOutput_6 = 0;
								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									System.err.println(e.getMessage());

								}

							}

							commitCounter_tMysqlOutput_6++;

							if (commitEvery_tMysqlOutput_6 <= commitCounter_tMysqlOutput_6) {

								try {
									int countSum_tMysqlOutput_6 = 0;

									for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
											.executeBatch()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_6 = 0;
									for (int countEach_tMysqlOutput_6 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
												: countEach_tMysqlOutput_6);
									}

									updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

									System.out.println(e.getMessage());

								}

								conn_tMysqlOutput_6.commit();

								commitCounter_tMysqlOutput_6 = 0;

							}

							tos_count_tMysqlOutput_6++;

							/**
							 * [tMysqlOutput_6 main ] stop
							 */

						} // End of branch "tempsOutput2"

						/**
						 * [tMysqlInput_6 end ] start
						 */

						currentComponent = "tMysqlInput_6";

					}
				} finally {
					rs_tMysqlInput_6.close();
					stmt_tMysqlInput_6.close();

					if (conn_tMysqlInput_6 != null
							&& !conn_tMysqlInput_6.isClosed()) {
						conn_tMysqlInput_6.close();
					}

				}
				globalMap.put("tMysqlInput_6_NB_LINE", nb_line_tMysqlInput_6);

				ok_Hash.put("tMysqlInput_6", true);
				end_Hash.put("tMysqlInput_6", System.currentTimeMillis());

				/**
				 * [tMysqlInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_mois != null) {
					tHash_Lookup_mois.endGet();
				}
				globalMap.remove("tHash_Lookup_mois");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMysqlOutput_6 end ] start
				 */

				currentComponent = "tMysqlOutput_6";

				try {
					if (pstmt_tMysqlOutput_6 != null) {
						int countSum_tMysqlOutput_6 = 0;

						for (int countEach_tMysqlOutput_6 : pstmt_tMysqlOutput_6
								.executeBatch()) {
							countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
									: countEach_tMysqlOutput_6);
						}

						updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_6 = 0;
					for (int countEach_tMysqlOutput_6 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_6 += (countEach_tMysqlOutput_6 < 0 ? 0
								: countEach_tMysqlOutput_6);
					}

					updatedCount_tMysqlOutput_6 += countSum_tMysqlOutput_6;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_6 != null) {

					pstmt_tMysqlOutput_6.close();

				}

				conn_tMysqlOutput_6.commit();

				conn_tMysqlOutput_6.close();

				nb_line_deleted_tMysqlOutput_6 = nb_line_deleted_tMysqlOutput_6
						+ deletedCount_tMysqlOutput_6;
				nb_line_update_tMysqlOutput_6 = nb_line_update_tMysqlOutput_6
						+ updatedCount_tMysqlOutput_6;
				nb_line_inserted_tMysqlOutput_6 = nb_line_inserted_tMysqlOutput_6
						+ insertedCount_tMysqlOutput_6;
				nb_line_rejected_tMysqlOutput_6 = nb_line_rejected_tMysqlOutput_6
						+ rejectedCount_tMysqlOutput_6;

				globalMap.put("tMysqlOutput_6_NB_LINE", nb_line_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_6);
				globalMap.put("tMysqlOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_6);

				ok_Hash.put("tMysqlOutput_6", true);
				end_Hash.put("tMysqlOutput_6", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_mois");

			try {

				/**
				 * [tMysqlInput_6 finally ] start
				 */

				currentComponent = "tMysqlInput_6";

				/**
				 * [tMysqlInput_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMysqlOutput_6 finally ] start
				 */

				currentComponent = "tMysqlOutput_6";

				/**
				 * [tMysqlOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class histOutStruct implements
			routines.system.IPersistableRow<histOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhis;

		public int getIdhis() {
			return this.idhis;
		}

		public java.util.Date Du;

		public java.util.Date getDu() {
			return this.Du;
		}

		public java.util.Date Au;

		public java.util.Date getAu() {
			return this.Au;
		}

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public Integer idcat;

		public Integer getIdcat() {
			return this.idcat;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idhis;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final histOutStruct other = (histOutStruct) obj;

			if (this.idhis != other.idhis)
				return false;

			return true;
		}

		public void copyDataTo(histOutStruct other) {

			other.idhis = this.idhis;
			other.Du = this.Du;
			other.Au = this.Au;
			other.idaff = this.idaff;
			other.idper = this.idper;
			other.idcat = this.idcat;

		}

		public void copyKeysDataTo(histOutStruct other) {

			other.idhis = this.idhis;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idhis = dis.readInt();

					this.Du = readDate(dis);

					this.Au = readDate(dis);

					this.idaff = dis.readInt();

					this.idper = dis.readInt();

					this.idcat = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhis);

				// java.util.Date

				writeDate(this.Du, dos);

				// java.util.Date

				writeDate(this.Au, dos);

				// int

				dos.writeInt(this.idaff);

				// int

				dos.writeInt(this.idper);

				// Integer

				writeInteger(this.idcat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhis=" + String.valueOf(idhis));
			sb.append(",Du=" + String.valueOf(Du));
			sb.append(",Au=" + String.valueOf(Au));
			sb.append(",idaff=" + String.valueOf(idaff));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",idcat=" + String.valueOf(idcat));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(histOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idhis, other.idhis);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class histInStruct implements
			routines.system.IPersistableRow<histInStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idhis;

		public int getIdhis() {
			return this.idhis;
		}

		public java.util.Date Du;

		public java.util.Date getDu() {
			return this.Du;
		}

		public java.util.Date Au;

		public java.util.Date getAu() {
			return this.Au;
		}

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public Integer idcat;

		public Integer getIdcat() {
			return this.idcat;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idhis = dis.readInt();

					this.Du = readDate(dis);

					this.Au = readDate(dis);

					this.idaff = dis.readInt();

					this.idper = dis.readInt();

					this.idcat = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idhis);

				// java.util.Date

				writeDate(this.Du, dos);

				// java.util.Date

				writeDate(this.Au, dos);

				// int

				dos.writeInt(this.idaff);

				// int

				dos.writeInt(this.idper);

				// Integer

				writeInteger(this.idcat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhis=" + String.valueOf(idhis));
			sb.append(",Du=" + String.valueOf(Du));
			sb.append(",Au=" + String.valueOf(Au));
			sb.append(",idaff=" + String.valueOf(idaff));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",idcat=" + String.valueOf(idcat));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(histInStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				histInStruct histIn = new histInStruct();
				histOutStruct histOut = new histOutStruct();

				/**
				 * [tMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_4", false);
				start_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_4";

				int tos_count_tMysqlOutput_4 = 0;

				int nb_line_tMysqlOutput_4 = 0;
				int nb_line_update_tMysqlOutput_4 = 0;
				int nb_line_inserted_tMysqlOutput_4 = 0;
				int nb_line_deleted_tMysqlOutput_4 = 0;
				int nb_line_rejected_tMysqlOutput_4 = 0;

				int deletedCount_tMysqlOutput_4 = 0;
				int updatedCount_tMysqlOutput_4 = 0;
				int insertedCount_tMysqlOutput_4 = 0;

				int rejectedCount_tMysqlOutput_4 = 0;

				String tableName_tMysqlOutput_4 = "historique";
				boolean whetherReject_tMysqlOutput_4 = false;

				java.util.Calendar calendar_tMysqlOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_4 = calendar_tMysqlOutput_4.getTime()
						.getTime();
				calendar_tMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_4 = calendar_tMysqlOutput_4
						.getTime().getTime();
				long date_tMysqlOutput_4;

				java.sql.Connection conn_tMysqlOutput_4 = null;
				String dbProperties_tMysqlOutput_4 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_4 = null;
				if (dbProperties_tMysqlOutput_4 == null
						|| dbProperties_tMysqlOutput_4.trim().length() == 0) {
					url_tMysqlOutput_4 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_4 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_4;
				}
				String dbUser_tMysqlOutput_4 = "kb2i";
				String dbPwd_tMysqlOutput_4 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_4 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_4, dbUser_tMysqlOutput_4,
						dbPwd_tMysqlOutput_4);

				conn_tMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tMysqlOutput_4 = 10000;
				int commitCounter_tMysqlOutput_4 = 0;

				int count_tMysqlOutput_4 = 0;

				String insertIgnore_tMysqlOutput_4 = "INSERT IGNORE INTO `"
						+ "historique"
						+ "` (`idhis`,`Du`,`Au`,`idaff`,`idper`,`idcat`) VALUES (?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `Du` = ?,`Au` = ?,`idaff` = ?,`idper` = ?,`idcat` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_4 = conn_tMysqlOutput_4
						.prepareStatement(insertIgnore_tMysqlOutput_4);

				/**
				 * [tMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				histOutStruct histOut_tmp = new histOutStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMysqlInput_4 begin ] start
				 */

				ok_Hash.put("tMysqlInput_4", false);
				start_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				currentComponent = "tMysqlInput_4";

				int tos_count_tMysqlInput_4 = 0;

				java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4
						.getTime();
				int nb_line_tMysqlInput_4 = 0;
				java.sql.Connection conn_tMysqlInput_4 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_4 = "kb2i";
				String dbPwd_tMysqlInput_4 = "citrec";

				String url_tMysqlInput_4 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "BiopointKb2i" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_4, dbUser_tMysqlInput_4,
						dbPwd_tMysqlInput_4);

				java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4
						.createStatement();

				String dbquery_tMysqlInput_4 = "SELECT    `historique`.`idhis`,    `historique`.`Du`,    `historique`.`Au`,    `historique`.`idaff`,    `historique`.`idper`,    `historique`.`idcat` FROM `historique`";

				globalMap.put("tMysqlInput_4_QUERY", dbquery_tMysqlInput_4);
				java.sql.ResultSet rs_tMysqlInput_4 = null;
				try {
					rs_tMysqlInput_4 = stmt_tMysqlInput_4
							.executeQuery(dbquery_tMysqlInput_4);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4
							.getMetaData();
					int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4
							.getColumnCount();

					String tmpContent_tMysqlInput_4 = null;
					int column_index_tMysqlInput_4 = 1;

					while (rs_tMysqlInput_4.next()) {
						nb_line_tMysqlInput_4++;

						column_index_tMysqlInput_4 = 1;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.idhis = 0;
						} else {

							if (rs_tMysqlInput_4
									.getObject(column_index_tMysqlInput_4) != null) {
								histIn.idhis = rs_tMysqlInput_4
										.getInt(column_index_tMysqlInput_4);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_4 = 2;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.Du = null;
						} else {

							if (rs_tMysqlInput_4
									.getString(column_index_tMysqlInput_4) != null) {
								String dateString_tMysqlInput_4 = rs_tMysqlInput_4
										.getString(column_index_tMysqlInput_4);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_4)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_4)) {
									histIn.Du = rs_tMysqlInput_4
											.getTimestamp(column_index_tMysqlInput_4);
								} else {
									histIn.Du = (java.util.Date) year0_tMysqlInput_4
											.clone();
								}
							} else {
								histIn.Du = null;
							}

						}

						column_index_tMysqlInput_4 = 3;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.Au = null;
						} else {

							if (rs_tMysqlInput_4
									.getString(column_index_tMysqlInput_4) != null) {
								String dateString_tMysqlInput_4 = rs_tMysqlInput_4
										.getString(column_index_tMysqlInput_4);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_4)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_4)) {
									histIn.Au = rs_tMysqlInput_4
											.getTimestamp(column_index_tMysqlInput_4);
								} else {
									histIn.Au = (java.util.Date) year0_tMysqlInput_4
											.clone();
								}
							} else {
								histIn.Au = null;
							}

						}

						column_index_tMysqlInput_4 = 4;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.idaff = 0;
						} else {

							if (rs_tMysqlInput_4
									.getObject(column_index_tMysqlInput_4) != null) {
								histIn.idaff = rs_tMysqlInput_4
										.getInt(column_index_tMysqlInput_4);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_4 = 5;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.idper = 0;
						} else {

							if (rs_tMysqlInput_4
									.getObject(column_index_tMysqlInput_4) != null) {
								histIn.idper = rs_tMysqlInput_4
										.getInt(column_index_tMysqlInput_4);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_4 = 6;

						if (colQtyInRs_tMysqlInput_4 < column_index_tMysqlInput_4) {
							histIn.idcat = null;
						} else {

							if (rs_tMysqlInput_4
									.getObject(column_index_tMysqlInput_4) != null) {
								histIn.idcat = rs_tMysqlInput_4
										.getInt(column_index_tMysqlInput_4);
							} else {
								histIn.idcat = null;
							}

						}

						/**
						 * [tMysqlInput_4 begin ] stop
						 */
						/**
						 * [tMysqlInput_4 main ] start
						 */

						currentComponent = "tMysqlInput_4";

						tos_count_tMysqlInput_4++;

						/**
						 * [tMysqlInput_4 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							histOut = null;

							// # Output table : 'histOut'
							histOut_tmp.idhis = histIn.idhis;
							histOut_tmp.Du = histIn.Du;
							histOut_tmp.Au = histIn.Au;
							histOut_tmp.idaff = histIn.idaff;
							histOut_tmp.idper = histIn.idper;
							histOut_tmp.idcat = histIn.idcat;
							histOut = histOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "histOut"
						if (histOut != null) {

							/**
							 * [tMysqlOutput_4 main ] start
							 */

							currentComponent = "tMysqlOutput_4";

							whetherReject_tMysqlOutput_4 = false;
							pstmt_tMysqlOutput_4.setInt(1, histOut.idhis);

							if (histOut.Du != null) {
								date_tMysqlOutput_4 = histOut.Du.getTime();
								if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
										|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
									pstmt_tMysqlOutput_4.setString(2,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_4.setTimestamp(2,
											new java.sql.Timestamp(
													date_tMysqlOutput_4));
								}
							} else {
								pstmt_tMysqlOutput_4.setNull(2,
										java.sql.Types.DATE);
							}

							if (histOut.Au != null) {
								date_tMysqlOutput_4 = histOut.Au.getTime();
								if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
										|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
									pstmt_tMysqlOutput_4.setString(3,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_4.setTimestamp(3,
											new java.sql.Timestamp(
													date_tMysqlOutput_4));
								}
							} else {
								pstmt_tMysqlOutput_4.setNull(3,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_4.setInt(4, histOut.idaff);

							pstmt_tMysqlOutput_4.setInt(5, histOut.idper);

							if (histOut.idcat == null) {
								pstmt_tMysqlOutput_4.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_4.setInt(6, histOut.idcat);
							}

							if (histOut.Du != null) {
								date_tMysqlOutput_4 = histOut.Du.getTime();
								if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
										|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
									pstmt_tMysqlOutput_4.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_4.setTimestamp(7,
											new java.sql.Timestamp(
													date_tMysqlOutput_4));
								}
							} else {
								pstmt_tMysqlOutput_4.setNull(7,
										java.sql.Types.DATE);
							}

							if (histOut.Au != null) {
								date_tMysqlOutput_4 = histOut.Au.getTime();
								if (date_tMysqlOutput_4 < year1_tMysqlOutput_4
										|| date_tMysqlOutput_4 >= year10000_tMysqlOutput_4) {
									pstmt_tMysqlOutput_4.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_4.setTimestamp(8,
											new java.sql.Timestamp(
													date_tMysqlOutput_4));
								}
							} else {
								pstmt_tMysqlOutput_4.setNull(8,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_4.setInt(9, histOut.idaff);

							pstmt_tMysqlOutput_4.setInt(10, histOut.idper);

							if (histOut.idcat == null) {
								pstmt_tMysqlOutput_4.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tMysqlOutput_4.setInt(11, histOut.idcat);
							}

							int count_on_duplicate_key_tMysqlOutput_4 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_4 = pstmt_tMysqlOutput_4
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_4 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_4 == 1) {
								insertedCount_tMysqlOutput_4 += count_on_duplicate_key_tMysqlOutput_4;
							} else {
								insertedCount_tMysqlOutput_4 += 1;
								updatedCount_tMysqlOutput_4 += count_on_duplicate_key_tMysqlOutput_4 - 1;
							}
							commitCounter_tMysqlOutput_4++;

							if (commitEvery_tMysqlOutput_4 <= commitCounter_tMysqlOutput_4) {

								conn_tMysqlOutput_4.commit();

								commitCounter_tMysqlOutput_4 = 0;

							}

							tos_count_tMysqlOutput_4++;

							/**
							 * [tMysqlOutput_4 main ] stop
							 */

						} // End of branch "histOut"

						/**
						 * [tMysqlInput_4 end ] start
						 */

						currentComponent = "tMysqlInput_4";

					}
				} finally {
					rs_tMysqlInput_4.close();
					stmt_tMysqlInput_4.close();

					if (conn_tMysqlInput_4 != null
							&& !conn_tMysqlInput_4.isClosed()) {
						conn_tMysqlInput_4.close();
					}

				}
				globalMap.put("tMysqlInput_4_NB_LINE", nb_line_tMysqlInput_4);

				ok_Hash.put("tMysqlInput_4", true);
				end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				/**
				 * [tMysqlInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMysqlOutput_4 end ] start
				 */

				currentComponent = "tMysqlOutput_4";

				if (pstmt_tMysqlOutput_4 != null) {

					pstmt_tMysqlOutput_4.close();

				}

				conn_tMysqlOutput_4.commit();

				conn_tMysqlOutput_4.close();

				nb_line_deleted_tMysqlOutput_4 = nb_line_deleted_tMysqlOutput_4
						+ deletedCount_tMysqlOutput_4;
				nb_line_update_tMysqlOutput_4 = nb_line_update_tMysqlOutput_4
						+ updatedCount_tMysqlOutput_4;
				nb_line_inserted_tMysqlOutput_4 = nb_line_inserted_tMysqlOutput_4
						+ insertedCount_tMysqlOutput_4;
				nb_line_rejected_tMysqlOutput_4 = nb_line_rejected_tMysqlOutput_4
						+ rejectedCount_tMysqlOutput_4;

				globalMap.put("tMysqlOutput_4_NB_LINE", nb_line_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_4);
				globalMap.put("tMysqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_4);

				ok_Hash.put("tMysqlOutput_4", true);
				end_Hash.put("tMysqlOutput_4", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_4 finally ] start
				 */

				currentComponent = "tMysqlInput_4";

				/**
				 * [tMysqlInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMysqlOutput_4 finally ] start
				 */

				currentComponent = "tMysqlOutput_4";

				/**
				 * [tMysqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class pointage_faitStruct implements
			routines.system.IPersistableRow<pointage_faitStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer idper;

		public Integer getIdper() {
			return this.idper;
		}

		public Integer idaff;

		public Integer getIdaff() {
			return this.idaff;
		}

		public Integer idseq;

		public Integer getIdseq() {
			return this.idseq;
		}

		public Integer idcat;

		public Integer getIdcat() {
			return this.idcat;
		}

		public Integer idcng;

		public Integer getIdcng() {
			return this.idcng;
		}

		public Integer idmot;

		public Integer getIdmot() {
			return this.idmot;
		}

		public Integer absent;

		public Integer getAbsent() {
			return this.absent;
		}

		public Integer present;

		public Integer getPresent() {
			return this.present;
		}

		public Integer id_tmp;

		public Integer getId_tmp() {
			return this.id_tmp;
		}

		public Integer idpnt;

		public Integer getIdpnt() {
			return this.idpnt;
		}

		public Integer jour_budgetise;

		public Integer getJour_budgetise() {
			return this.jour_budgetise;
		}

		public Integer conge;

		public Integer getConge() {
			return this.conge;
		}

		public Integer retardTot;

		public Integer getRetardTot() {
			return this.retardTot;
		}

		public Integer hSup;

		public Integer getHSup() {
			return this.hSup;
		}

		public Integer nbreAut;

		public Integer getNbreAut() {
			return this.nbreAut;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public Integer PresenceHrMn;

		public Integer getPresenceHrMn() {
			return this.PresenceHrMn;
		}

		public Integer budgHrMn;

		public Integer getBudgHrMn() {
			return this.budgHrMn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.idper == null) ? 0 : this.idper.hashCode());

				result = prime * result
						+ ((this.idaff == null) ? 0 : this.idaff.hashCode());

				result = prime * result
						+ ((this.id_tmp == null) ? 0 : this.id_tmp.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final pointage_faitStruct other = (pointage_faitStruct) obj;

			if (this.idper == null) {
				if (other.idper != null)
					return false;

			} else if (!this.idper.equals(other.idper))

				return false;

			if (this.idaff == null) {
				if (other.idaff != null)
					return false;

			} else if (!this.idaff.equals(other.idaff))

				return false;

			if (this.id_tmp == null) {
				if (other.id_tmp != null)
					return false;

			} else if (!this.id_tmp.equals(other.id_tmp))

				return false;

			return true;
		}

		public void copyDataTo(pointage_faitStruct other) {

			other.idper = this.idper;
			other.idaff = this.idaff;
			other.idseq = this.idseq;
			other.idcat = this.idcat;
			other.idcng = this.idcng;
			other.idmot = this.idmot;
			other.absent = this.absent;
			other.present = this.present;
			other.id_tmp = this.id_tmp;
			other.idpnt = this.idpnt;
			other.jour_budgetise = this.jour_budgetise;
			other.conge = this.conge;
			other.retardTot = this.retardTot;
			other.hSup = this.hSup;
			other.nbreAut = this.nbreAut;
			other.autorisation = this.autorisation;
			other.PresenceHrMn = this.PresenceHrMn;
			other.budgHrMn = this.budgHrMn;

		}

		public void copyKeysDataTo(pointage_faitStruct other) {

			other.idper = this.idper;
			other.idaff = this.idaff;
			other.id_tmp = this.id_tmp;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idper = readInteger(dis);

					this.idaff = readInteger(dis);

					this.idseq = readInteger(dis);

					this.idcat = readInteger(dis);

					this.idcng = readInteger(dis);

					this.idmot = readInteger(dis);

					this.absent = readInteger(dis);

					this.present = readInteger(dis);

					this.id_tmp = readInteger(dis);

					this.idpnt = readInteger(dis);

					this.jour_budgetise = readInteger(dis);

					this.conge = readInteger(dis);

					this.retardTot = readInteger(dis);

					this.hSup = readInteger(dis);

					this.nbreAut = readInteger(dis);

					this.autorisation = readInteger(dis);

					this.PresenceHrMn = readInteger(dis);

					this.budgHrMn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.idper, dos);

				// Integer

				writeInteger(this.idaff, dos);

				// Integer

				writeInteger(this.idseq, dos);

				// Integer

				writeInteger(this.idcat, dos);

				// Integer

				writeInteger(this.idcng, dos);

				// Integer

				writeInteger(this.idmot, dos);

				// Integer

				writeInteger(this.absent, dos);

				// Integer

				writeInteger(this.present, dos);

				// Integer

				writeInteger(this.id_tmp, dos);

				// Integer

				writeInteger(this.idpnt, dos);

				// Integer

				writeInteger(this.jour_budgetise, dos);

				// Integer

				writeInteger(this.conge, dos);

				// Integer

				writeInteger(this.retardTot, dos);

				// Integer

				writeInteger(this.hSup, dos);

				// Integer

				writeInteger(this.nbreAut, dos);

				// Integer

				writeInteger(this.autorisation, dos);

				// Integer

				writeInteger(this.PresenceHrMn, dos);

				// Integer

				writeInteger(this.budgHrMn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idper=" + String.valueOf(idper));
			sb.append(",idaff=" + String.valueOf(idaff));
			sb.append(",idseq=" + String.valueOf(idseq));
			sb.append(",idcat=" + String.valueOf(idcat));
			sb.append(",idcng=" + String.valueOf(idcng));
			sb.append(",idmot=" + String.valueOf(idmot));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",present=" + String.valueOf(present));
			sb.append(",id_tmp=" + String.valueOf(id_tmp));
			sb.append(",idpnt=" + String.valueOf(idpnt));
			sb.append(",jour_budgetise=" + String.valueOf(jour_budgetise));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",retardTot=" + String.valueOf(retardTot));
			sb.append(",hSup=" + String.valueOf(hSup));
			sb.append(",nbreAut=" + String.valueOf(nbreAut));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",PresenceHrMn=" + String.valueOf(PresenceHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointage_faitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idper, other.idper);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.idaff, other.idaff);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_tmp, other.id_tmp);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pointageDWStruct implements
			routines.system.IPersistableRow<pointageDWStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public java.util.Date jour;

		public java.util.Date getJour() {
			return this.jour;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public java.util.Date e1;

		public java.util.Date getE1() {
			return this.e1;
		}

		public java.util.Date s1;

		public java.util.Date getS1() {
			return this.s1;
		}

		public java.util.Date e2;

		public java.util.Date getE2() {
			return this.e2;
		}

		public java.util.Date s2;

		public java.util.Date getS2() {
			return this.s2;
		}

		public Boolean absent;

		public Boolean getAbsent() {
			return this.absent;
		}

		public java.util.Date retard1;

		public java.util.Date getRetard1() {
			return this.retard1;
		}

		public java.util.Date retard2;

		public java.util.Date getRetard2() {
			return this.retard2;
		}

		public java.util.Date retardTotal;

		public java.util.Date getRetardTotal() {
			return this.retardTotal;
		}

		public java.util.Date presenceHrMn;

		public java.util.Date getPresenceHrMn() {
			return this.presenceHrMn;
		}

		public java.util.Date retardHrMn;

		public java.util.Date getRetardHrMn() {
			return this.retardHrMn;
		}

		public java.util.Date hSupHrMn;

		public java.util.Date getHSupHrMn() {
			return this.hSupHrMn;
		}

		public java.util.Date budgHrMn;

		public java.util.Date getBudgHrMn() {
			return this.budgHrMn;
		}

		public Boolean ferie;

		public Boolean getFerie() {
			return this.ferie;
		}

		public Boolean conge;

		public Boolean getConge() {
			return this.conge;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public String typeSup;

		public String getTypeSup() {
			return this.typeSup;
		}

		public Integer detailJour;

		public Integer getDetailJour() {
			return this.detailJour;
		}

		public Integer numjour;

		public Integer getNumjour() {
			return this.numjour;
		}

		public Boolean anomalie;

		public Boolean getAnomalie() {
			return this.anomalie;
		}

		public java.util.Date sa;

		public java.util.Date getSa() {
			return this.sa;
		}

		public java.util.Date ra;

		public java.util.Date getRa() {
			return this.ra;
		}

		public java.util.Date retardautorisation;

		public java.util.Date getRetardautorisation() {
			return this.retardautorisation;
		}

		public java.util.Date timeAuto;

		public java.util.Date getTimeAuto() {
			return this.timeAuto;
		}

		public int idpnt;

		public int getIdpnt() {
			return this.idpnt;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.jour = readDate(dis);

					this.idper = dis.readInt();

					this.e1 = readDate(dis);

					this.s1 = readDate(dis);

					this.e2 = readDate(dis);

					this.s2 = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.absent = null;
					} else {
						this.absent = dis.readBoolean();
					}

					this.retard1 = readDate(dis);

					this.retard2 = readDate(dis);

					this.retardTotal = readDate(dis);

					this.presenceHrMn = readDate(dis);

					this.retardHrMn = readDate(dis);

					this.hSupHrMn = readDate(dis);

					this.budgHrMn = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ferie = null;
					} else {
						this.ferie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conge = null;
					} else {
						this.conge = dis.readBoolean();
					}

					this.autorisation = readInteger(dis);

					this.typeSup = readString(dis);

					this.detailJour = readInteger(dis);

					this.numjour = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anomalie = null;
					} else {
						this.anomalie = dis.readBoolean();
					}

					this.sa = readDate(dis);

					this.ra = readDate(dis);

					this.retardautorisation = readDate(dis);

					this.timeAuto = readDate(dis);

					this.idpnt = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.jour, dos);

				// int

				dos.writeInt(this.idper);

				// java.util.Date

				writeDate(this.e1, dos);

				// java.util.Date

				writeDate(this.s1, dos);

				// java.util.Date

				writeDate(this.e2, dos);

				// java.util.Date

				writeDate(this.s2, dos);

				// Boolean

				if (this.absent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.absent);
				}

				// java.util.Date

				writeDate(this.retard1, dos);

				// java.util.Date

				writeDate(this.retard2, dos);

				// java.util.Date

				writeDate(this.retardTotal, dos);

				// java.util.Date

				writeDate(this.presenceHrMn, dos);

				// java.util.Date

				writeDate(this.retardHrMn, dos);

				// java.util.Date

				writeDate(this.hSupHrMn, dos);

				// java.util.Date

				writeDate(this.budgHrMn, dos);

				// Boolean

				if (this.ferie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ferie);
				}

				// Boolean

				if (this.conge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.conge);
				}

				// Integer

				writeInteger(this.autorisation, dos);

				// String

				writeString(this.typeSup, dos);

				// Integer

				writeInteger(this.detailJour, dos);

				// Integer

				writeInteger(this.numjour, dos);

				// Boolean

				if (this.anomalie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anomalie);
				}

				// java.util.Date

				writeDate(this.sa, dos);

				// java.util.Date

				writeDate(this.ra, dos);

				// java.util.Date

				writeDate(this.retardautorisation, dos);

				// java.util.Date

				writeDate(this.timeAuto, dos);

				// int

				dos.writeInt(this.idpnt);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("jour=" + String.valueOf(jour));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",e1=" + String.valueOf(e1));
			sb.append(",s1=" + String.valueOf(s1));
			sb.append(",e2=" + String.valueOf(e2));
			sb.append(",s2=" + String.valueOf(s2));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",retard1=" + String.valueOf(retard1));
			sb.append(",retard2=" + String.valueOf(retard2));
			sb.append(",retardTotal=" + String.valueOf(retardTotal));
			sb.append(",presenceHrMn=" + String.valueOf(presenceHrMn));
			sb.append(",retardHrMn=" + String.valueOf(retardHrMn));
			sb.append(",hSupHrMn=" + String.valueOf(hSupHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append(",ferie=" + String.valueOf(ferie));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",typeSup=" + typeSup);
			sb.append(",detailJour=" + String.valueOf(detailJour));
			sb.append(",numjour=" + String.valueOf(numjour));
			sb.append(",anomalie=" + String.valueOf(anomalie));
			sb.append(",sa=" + String.valueOf(sa));
			sb.append(",ra=" + String.valueOf(ra));
			sb.append(",retardautorisation="
					+ String.valueOf(retardautorisation));
			sb.append(",timeAuto=" + String.valueOf(timeAuto));
			sb.append(",idpnt=" + String.valueOf(idpnt));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pointageDWStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMysqlInput_8Struct implements
			routines.system.IPersistableRow<after_tMysqlInput_8Struct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date jour;

		public java.util.Date getJour() {
			return this.jour;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public java.util.Date e1;

		public java.util.Date getE1() {
			return this.e1;
		}

		public java.util.Date s1;

		public java.util.Date getS1() {
			return this.s1;
		}

		public java.util.Date e2;

		public java.util.Date getE2() {
			return this.e2;
		}

		public java.util.Date s2;

		public java.util.Date getS2() {
			return this.s2;
		}

		public Boolean absent;

		public Boolean getAbsent() {
			return this.absent;
		}

		public java.util.Date retard1;

		public java.util.Date getRetard1() {
			return this.retard1;
		}

		public java.util.Date retard2;

		public java.util.Date getRetard2() {
			return this.retard2;
		}

		public java.util.Date retardTotal;

		public java.util.Date getRetardTotal() {
			return this.retardTotal;
		}

		public java.util.Date presenceHrMn;

		public java.util.Date getPresenceHrMn() {
			return this.presenceHrMn;
		}

		public java.util.Date retardHrMn;

		public java.util.Date getRetardHrMn() {
			return this.retardHrMn;
		}

		public java.util.Date hSupHrMn;

		public java.util.Date getHSupHrMn() {
			return this.hSupHrMn;
		}

		public java.util.Date budgHrMn;

		public java.util.Date getBudgHrMn() {
			return this.budgHrMn;
		}

		public Boolean ferie;

		public Boolean getFerie() {
			return this.ferie;
		}

		public Boolean conge;

		public Boolean getConge() {
			return this.conge;
		}

		public Integer autorisation;

		public Integer getAutorisation() {
			return this.autorisation;
		}

		public String typeSup;

		public String getTypeSup() {
			return this.typeSup;
		}

		public Integer detailJour;

		public Integer getDetailJour() {
			return this.detailJour;
		}

		public Integer numjour;

		public Integer getNumjour() {
			return this.numjour;
		}

		public Boolean anomalie;

		public Boolean getAnomalie() {
			return this.anomalie;
		}

		public java.util.Date sa;

		public java.util.Date getSa() {
			return this.sa;
		}

		public java.util.Date ra;

		public java.util.Date getRa() {
			return this.ra;
		}

		public java.util.Date retardautorisation;

		public java.util.Date getRetardautorisation() {
			return this.retardautorisation;
		}

		public java.util.Date timeAuto;

		public java.util.Date getTimeAuto() {
			return this.timeAuto;
		}

		public int idpnt;

		public int getIdpnt() {
			return this.idpnt;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idpnt;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_8Struct other = (after_tMysqlInput_8Struct) obj;

			if (this.idpnt != other.idpnt)
				return false;

			return true;
		}

		public void copyDataTo(after_tMysqlInput_8Struct other) {

			other.jour = this.jour;
			other.idper = this.idper;
			other.e1 = this.e1;
			other.s1 = this.s1;
			other.e2 = this.e2;
			other.s2 = this.s2;
			other.absent = this.absent;
			other.retard1 = this.retard1;
			other.retard2 = this.retard2;
			other.retardTotal = this.retardTotal;
			other.presenceHrMn = this.presenceHrMn;
			other.retardHrMn = this.retardHrMn;
			other.hSupHrMn = this.hSupHrMn;
			other.budgHrMn = this.budgHrMn;
			other.ferie = this.ferie;
			other.conge = this.conge;
			other.autorisation = this.autorisation;
			other.typeSup = this.typeSup;
			other.detailJour = this.detailJour;
			other.numjour = this.numjour;
			other.anomalie = this.anomalie;
			other.sa = this.sa;
			other.ra = this.ra;
			other.retardautorisation = this.retardautorisation;
			other.timeAuto = this.timeAuto;
			other.idpnt = this.idpnt;

		}

		public void copyKeysDataTo(after_tMysqlInput_8Struct other) {

			other.idpnt = this.idpnt;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.jour = readDate(dis);

					this.idper = dis.readInt();

					this.e1 = readDate(dis);

					this.s1 = readDate(dis);

					this.e2 = readDate(dis);

					this.s2 = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.absent = null;
					} else {
						this.absent = dis.readBoolean();
					}

					this.retard1 = readDate(dis);

					this.retard2 = readDate(dis);

					this.retardTotal = readDate(dis);

					this.presenceHrMn = readDate(dis);

					this.retardHrMn = readDate(dis);

					this.hSupHrMn = readDate(dis);

					this.budgHrMn = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ferie = null;
					} else {
						this.ferie = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.conge = null;
					} else {
						this.conge = dis.readBoolean();
					}

					this.autorisation = readInteger(dis);

					this.typeSup = readString(dis);

					this.detailJour = readInteger(dis);

					this.numjour = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anomalie = null;
					} else {
						this.anomalie = dis.readBoolean();
					}

					this.sa = readDate(dis);

					this.ra = readDate(dis);

					this.retardautorisation = readDate(dis);

					this.timeAuto = readDate(dis);

					this.idpnt = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.jour, dos);

				// int

				dos.writeInt(this.idper);

				// java.util.Date

				writeDate(this.e1, dos);

				// java.util.Date

				writeDate(this.s1, dos);

				// java.util.Date

				writeDate(this.e2, dos);

				// java.util.Date

				writeDate(this.s2, dos);

				// Boolean

				if (this.absent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.absent);
				}

				// java.util.Date

				writeDate(this.retard1, dos);

				// java.util.Date

				writeDate(this.retard2, dos);

				// java.util.Date

				writeDate(this.retardTotal, dos);

				// java.util.Date

				writeDate(this.presenceHrMn, dos);

				// java.util.Date

				writeDate(this.retardHrMn, dos);

				// java.util.Date

				writeDate(this.hSupHrMn, dos);

				// java.util.Date

				writeDate(this.budgHrMn, dos);

				// Boolean

				if (this.ferie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ferie);
				}

				// Boolean

				if (this.conge == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.conge);
				}

				// Integer

				writeInteger(this.autorisation, dos);

				// String

				writeString(this.typeSup, dos);

				// Integer

				writeInteger(this.detailJour, dos);

				// Integer

				writeInteger(this.numjour, dos);

				// Boolean

				if (this.anomalie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.anomalie);
				}

				// java.util.Date

				writeDate(this.sa, dos);

				// java.util.Date

				writeDate(this.ra, dos);

				// java.util.Date

				writeDate(this.retardautorisation, dos);

				// java.util.Date

				writeDate(this.timeAuto, dos);

				// int

				dos.writeInt(this.idpnt);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("jour=" + String.valueOf(jour));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",e1=" + String.valueOf(e1));
			sb.append(",s1=" + String.valueOf(s1));
			sb.append(",e2=" + String.valueOf(e2));
			sb.append(",s2=" + String.valueOf(s2));
			sb.append(",absent=" + String.valueOf(absent));
			sb.append(",retard1=" + String.valueOf(retard1));
			sb.append(",retard2=" + String.valueOf(retard2));
			sb.append(",retardTotal=" + String.valueOf(retardTotal));
			sb.append(",presenceHrMn=" + String.valueOf(presenceHrMn));
			sb.append(",retardHrMn=" + String.valueOf(retardHrMn));
			sb.append(",hSupHrMn=" + String.valueOf(hSupHrMn));
			sb.append(",budgHrMn=" + String.valueOf(budgHrMn));
			sb.append(",ferie=" + String.valueOf(ferie));
			sb.append(",conge=" + String.valueOf(conge));
			sb.append(",autorisation=" + String.valueOf(autorisation));
			sb.append(",typeSup=" + typeSup);
			sb.append(",detailJour=" + String.valueOf(detailJour));
			sb.append(",numjour=" + String.valueOf(numjour));
			sb.append(",anomalie=" + String.valueOf(anomalie));
			sb.append(",sa=" + String.valueOf(sa));
			sb.append(",ra=" + String.valueOf(ra));
			sb.append(",retardautorisation="
					+ String.valueOf(retardautorisation));
			sb.append(",timeAuto=" + String.valueOf(timeAuto));
			sb.append(",idpnt=" + String.valueOf(idpnt));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMysqlInput_8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idpnt, other.idpnt);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_11Process(globalMap);
				tMysqlInput_12Process(globalMap);
				tMysqlInput_9Process(globalMap);

				pointageDWStruct pointageDW = new pointageDWStruct();
				pointage_faitStruct pointage_fait = new pointage_faitStruct();

				/**
				 * [tMysqlOutput_7 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_7", false);
				start_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_7";

				int tos_count_tMysqlOutput_7 = 0;

				int nb_line_tMysqlOutput_7 = 0;
				int nb_line_update_tMysqlOutput_7 = 0;
				int nb_line_inserted_tMysqlOutput_7 = 0;
				int nb_line_deleted_tMysqlOutput_7 = 0;
				int nb_line_rejected_tMysqlOutput_7 = 0;

				int deletedCount_tMysqlOutput_7 = 0;
				int updatedCount_tMysqlOutput_7 = 0;
				int insertedCount_tMysqlOutput_7 = 0;

				int rejectedCount_tMysqlOutput_7 = 0;

				String tableName_tMysqlOutput_7 = "pointage_fait";
				boolean whetherReject_tMysqlOutput_7 = false;

				java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7.getTime()
						.getTime();
				calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7
						.getTime().getTime();
				long date_tMysqlOutput_7;

				java.sql.Connection conn_tMysqlOutput_7 = null;
				String dbProperties_tMysqlOutput_7 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_7 = null;
				if (dbProperties_tMysqlOutput_7 == null
						|| dbProperties_tMysqlOutput_7.trim().length() == 0) {
					url_tMysqlOutput_7 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_7 = "jdbc:mysql://" + "192.168.1.2" + ":"
							+ "3306" + "/" + "biopointDW" + "?"
							+ properties_tMysqlOutput_7;
				}
				String dbUser_tMysqlOutput_7 = "kb2i";
				String dbPwd_tMysqlOutput_7 = "citrec";
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_7 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_7, dbUser_tMysqlOutput_7,
						dbPwd_tMysqlOutput_7);

				conn_tMysqlOutput_7.setAutoCommit(false);
				int commitEvery_tMysqlOutput_7 = 10000;
				int commitCounter_tMysqlOutput_7 = 0;

				int count_tMysqlOutput_7 = 0;

				java.sql.Statement stmtClear_tMysqlOutput_7 = conn_tMysqlOutput_7
						.createStatement();

				stmtClear_tMysqlOutput_7.executeUpdate("DELETE FROM `"
						+ tableName_tMysqlOutput_7 + "`");

				stmtClear_tMysqlOutput_7.close();

				String insert_tMysqlOutput_7 = "INSERT INTO `"
						+ "pointage_fait"
						+ "` (`idper`,`idaff`,`idseq`,`idcat`,`idcng`,`idmot`,`absent`,`present`,`id_tmp`,`idpnt`,`jour_budgetise`,`conge`,`retardTot`,`hSup`,`nbreAut`,`autorisation`,`PresenceHrMn`,`budgHrMn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_7 = 100;
				int batchSizeCounter_tMysqlOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7
						.prepareStatement(insert_tMysqlOutput_7);

				/**
				 * [tMysqlOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<historiqueDWStruct> tHash_Lookup_historiqueDW = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<historiqueDWStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<historiqueDWStruct>) globalMap
						.get("tHash_Lookup_historiqueDW"));

				historiqueDWStruct historiqueDWHashKey = new historiqueDWStruct();
				historiqueDWStruct historiqueDWDefault = new historiqueDWStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<affiliationDWStruct> tHash_Lookup_affiliationDW = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<affiliationDWStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<affiliationDWStruct>) globalMap
						.get("tHash_Lookup_affiliationDW"));

				affiliationDWStruct affiliationDWHashKey = new affiliationDWStruct();
				affiliationDWStruct affiliationDWDefault = new affiliationDWStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsDWStruct> tHash_Lookup_tempsDW = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsDWStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsDWStruct>) globalMap
						.get("tHash_Lookup_tempsDW"));

				tHash_Lookup_tempsDW.initGet();

				tempsDWStruct tempsDWHashKey = new tempsDWStruct();
				tempsDWStruct tempsDWDefault = new tempsDWStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					int absentVar;
					int presenceVar;
					int jourVar;
					int congeVar;
					Integer retardTot;
					Integer hSup;
					int nbreAutorisation;
					Integer dureeAutorisation;
					Integer presenceHrMn;
					Integer budgHrMn;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				pointage_faitStruct pointage_fait_tmp = new pointage_faitStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMysqlInput_8 begin ] start
				 */

				ok_Hash.put("tMysqlInput_8", false);
				start_Hash.put("tMysqlInput_8", System.currentTimeMillis());

				currentComponent = "tMysqlInput_8";

				int tos_count_tMysqlInput_8 = 0;

				java.util.Calendar calendar_tMysqlInput_8 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_8.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_8 = calendar_tMysqlInput_8
						.getTime();
				int nb_line_tMysqlInput_8 = 0;
				java.sql.Connection conn_tMysqlInput_8 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_8 = "kb2i";
				String dbPwd_tMysqlInput_8 = "citrec";

				String url_tMysqlInput_8 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_8 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_8, dbUser_tMysqlInput_8,
						dbPwd_tMysqlInput_8);

				java.sql.Statement stmt_tMysqlInput_8 = conn_tMysqlInput_8
						.createStatement();

				String dbquery_tMysqlInput_8 = "SELECT    `pointage`.`jour`,    `pointage`.`idper`,    `pointage`.`e1`,    `pointage`.`s1`,    `pointage`.`e2`,    `pointage`.`s2`,    `pointage`.`absent`,    `pointage`.`retard1`,    `pointage`.`retard2`,    `pointage`.`retardTotal`,    `pointage`.`presenceHrMn`,    `pointage`.`retardHrMn`,    `pointage`.`hSupHrMn`,    `pointage`.`budgHrMn`,    `pointage`.`ferie`,    `pointage`.`conge`,    `pointage`.`autorisation`,    `pointage`.`typeSup`,    `pointage`.`detailJour`,    `pointage`.`numjour`,    `pointage`.`anomalie`,    `pointage`.`sa`,    `pointage`.`ra`,    `pointage`.`retardautorisation`,    `pointage`.`timeAuto`,    `pointage`.`idpnt` FROM `pointage`";

				globalMap.put("tMysqlInput_8_QUERY", dbquery_tMysqlInput_8);
				java.sql.ResultSet rs_tMysqlInput_8 = null;
				try {
					rs_tMysqlInput_8 = stmt_tMysqlInput_8
							.executeQuery(dbquery_tMysqlInput_8);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_8 = rs_tMysqlInput_8
							.getMetaData();
					int colQtyInRs_tMysqlInput_8 = rsmd_tMysqlInput_8
							.getColumnCount();

					String tmpContent_tMysqlInput_8 = null;
					int column_index_tMysqlInput_8 = 1;

					while (rs_tMysqlInput_8.next()) {
						nb_line_tMysqlInput_8++;

						column_index_tMysqlInput_8 = 1;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.jour = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.jour = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.jour = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.jour = null;
							}

						}

						column_index_tMysqlInput_8 = 2;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.idper = 0;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.idper = rs_tMysqlInput_8
										.getInt(column_index_tMysqlInput_8);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_8 = 3;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.e1 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.e1 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.e1 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.e1 = null;
							}

						}

						column_index_tMysqlInput_8 = 4;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.s1 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.s1 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.s1 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.s1 = null;
							}

						}

						column_index_tMysqlInput_8 = 5;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.e2 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.e2 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.e2 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.e2 = null;
							}

						}

						column_index_tMysqlInput_8 = 6;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.s2 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.s2 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.s2 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.s2 = null;
							}

						}

						column_index_tMysqlInput_8 = 7;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.absent = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.absent = rs_tMysqlInput_8
										.getBoolean(column_index_tMysqlInput_8);
							} else {
								pointageDW.absent = null;
							}

						}

						column_index_tMysqlInput_8 = 8;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.retard1 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.retard1 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.retard1 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.retard1 = null;
							}

						}

						column_index_tMysqlInput_8 = 9;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.retard2 = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.retard2 = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.retard2 = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.retard2 = null;
							}

						}

						column_index_tMysqlInput_8 = 10;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.retardTotal = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.retardTotal = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.retardTotal = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.retardTotal = null;
							}

						}

						column_index_tMysqlInput_8 = 11;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.presenceHrMn = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.presenceHrMn = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.presenceHrMn = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.presenceHrMn = null;
							}

						}

						column_index_tMysqlInput_8 = 12;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.retardHrMn = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.retardHrMn = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.retardHrMn = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.retardHrMn = null;
							}

						}

						column_index_tMysqlInput_8 = 13;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.hSupHrMn = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.hSupHrMn = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.hSupHrMn = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.hSupHrMn = null;
							}

						}

						column_index_tMysqlInput_8 = 14;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.budgHrMn = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.budgHrMn = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.budgHrMn = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.budgHrMn = null;
							}

						}

						column_index_tMysqlInput_8 = 15;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.ferie = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.ferie = rs_tMysqlInput_8
										.getBoolean(column_index_tMysqlInput_8);
							} else {
								pointageDW.ferie = null;
							}

						}

						column_index_tMysqlInput_8 = 16;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.conge = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.conge = rs_tMysqlInput_8
										.getBoolean(column_index_tMysqlInput_8);
							} else {
								pointageDW.conge = null;
							}

						}

						column_index_tMysqlInput_8 = 17;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.autorisation = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.autorisation = rs_tMysqlInput_8
										.getInt(column_index_tMysqlInput_8);
							} else {
								pointageDW.autorisation = null;
							}

						}

						column_index_tMysqlInput_8 = 18;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.typeSup = null;
						} else {

							tmpContent_tMysqlInput_8 = rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8);
							if (tmpContent_tMysqlInput_8 != null) {
								pointageDW.typeSup = tmpContent_tMysqlInput_8;
							} else {
								pointageDW.typeSup = null;
							}

						}

						column_index_tMysqlInput_8 = 19;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.detailJour = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.detailJour = rs_tMysqlInput_8
										.getInt(column_index_tMysqlInput_8);
							} else {
								pointageDW.detailJour = null;
							}

						}

						column_index_tMysqlInput_8 = 20;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.numjour = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.numjour = rs_tMysqlInput_8
										.getInt(column_index_tMysqlInput_8);
							} else {
								pointageDW.numjour = null;
							}

						}

						column_index_tMysqlInput_8 = 21;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.anomalie = null;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.anomalie = rs_tMysqlInput_8
										.getBoolean(column_index_tMysqlInput_8);
							} else {
								pointageDW.anomalie = null;
							}

						}

						column_index_tMysqlInput_8 = 22;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.sa = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.sa = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.sa = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.sa = null;
							}

						}

						column_index_tMysqlInput_8 = 23;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.ra = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.ra = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.ra = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.ra = null;
							}

						}

						column_index_tMysqlInput_8 = 24;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.retardautorisation = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.retardautorisation = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.retardautorisation = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.retardautorisation = null;
							}

						}

						column_index_tMysqlInput_8 = 25;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.timeAuto = null;
						} else {

							if (rs_tMysqlInput_8
									.getString(column_index_tMysqlInput_8) != null) {
								String dateString_tMysqlInput_8 = rs_tMysqlInput_8
										.getString(column_index_tMysqlInput_8);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_8)) {
									pointageDW.timeAuto = rs_tMysqlInput_8
											.getTimestamp(column_index_tMysqlInput_8);
								} else {
									pointageDW.timeAuto = (java.util.Date) year0_tMysqlInput_8
											.clone();
								}
							} else {
								pointageDW.timeAuto = null;
							}

						}

						column_index_tMysqlInput_8 = 26;

						if (colQtyInRs_tMysqlInput_8 < column_index_tMysqlInput_8) {
							pointageDW.idpnt = 0;
						} else {

							if (rs_tMysqlInput_8
									.getObject(column_index_tMysqlInput_8) != null) {
								pointageDW.idpnt = rs_tMysqlInput_8
										.getInt(column_index_tMysqlInput_8);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						/**
						 * [tMysqlInput_8 begin ] stop
						 */
						/**
						 * [tMysqlInput_8 main ] start
						 */

						currentComponent = "tMysqlInput_8";

						tos_count_tMysqlInput_8++;

						/**
						 * [tMysqlInput_8 main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "historiqueDW"
						// /////////////////////////////////////////////

						boolean forceLoophistoriqueDW = false;

						historiqueDWStruct historiqueDWObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							Object exprKeyValue_historiqueDW__idper = pointageDW.idper;
							if (exprKeyValue_historiqueDW__idper == null) {
								hasCasePrimitiveKeyWithNull_tMap_7 = true;
							} else {
								historiqueDWHashKey.idper = (int) (Integer) exprKeyValue_historiqueDW__idper;
							}

							historiqueDWHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_7) { // G_TM_M_091

								tHash_Lookup_historiqueDW
										.lookup(historiqueDWHashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_historiqueDW != null
								&& tHash_Lookup_historiqueDW
										.getCount(historiqueDWHashKey) > 1) { // G
																				// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'historiqueDW' and it contains more one result from keys :  historiqueDW.idper = '"
							// + historiqueDWHashKey.idper + "'");
						} // G 071

						historiqueDWStruct historiqueDW = null;

						historiqueDWStruct fromLookup_historiqueDW = null;
						historiqueDW = historiqueDWDefault;

						if (tHash_Lookup_historiqueDW != null
								&& tHash_Lookup_historiqueDW.hasNext()) { // G
																			// 099

							fromLookup_historiqueDW = tHash_Lookup_historiqueDW
									.next();

						} // G 099

						if (fromLookup_historiqueDW != null) {
							historiqueDW = fromLookup_historiqueDW;
						}

						if (!rejectedInnerJoin_tMap_7
								&&

								!(

								(TalendDate.compareDate(historiqueDW.Du,
										pointageDW.jour, "yyyy-MM-dd") == 0 || TalendDate
										.compareDate(historiqueDW.Du,
												pointageDW.jour, "yyyy-MM-dd") == -1) && (TalendDate
										.compareDate(historiqueDW.Au,
												pointageDW.jour, "yyyy-MM-dd") == 0 || TalendDate
										.compareDate(pointageDW.jour,
												historiqueDW.Au, "yyyy-MM-dd") == -1)

								)

						) { // G 016

							fromLookup_historiqueDW = null;
							historiqueDW = historiqueDWDefault;

						} // G 016

						// /////////////////////////////////////////////
						// Starting Lookup Table "affiliationDW"
						// /////////////////////////////////////////////

						boolean forceLoopaffiliationDW = false;

						affiliationDWStruct affiliationDWObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							Object exprKeyValue_affiliationDW__idaff = historiqueDW.idaff;
							if (exprKeyValue_affiliationDW__idaff == null) {
								hasCasePrimitiveKeyWithNull_tMap_7 = true;
							} else {
								affiliationDWHashKey.idaff = (int) (Integer) exprKeyValue_affiliationDW__idaff;
							}

							affiliationDWHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_7) { // G_TM_M_091

								tHash_Lookup_affiliationDW
										.lookup(affiliationDWHashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_affiliationDW != null
								&& tHash_Lookup_affiliationDW
										.getCount(affiliationDWHashKey) > 1) { // G
																				// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'affiliationDW' and it contains more one result from keys :  affiliationDW.idaff = '"
							// + affiliationDWHashKey.idaff + "'");
						} // G 071

						affiliationDWStruct affiliationDW = null;

						affiliationDWStruct fromLookup_affiliationDW = null;
						affiliationDW = affiliationDWDefault;

						if (tHash_Lookup_affiliationDW != null
								&& tHash_Lookup_affiliationDW.hasNext()) { // G
																			// 099

							fromLookup_affiliationDW = tHash_Lookup_affiliationDW
									.next();

						} // G 099

						if (fromLookup_affiliationDW != null) {
							affiliationDW = fromLookup_affiliationDW;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "tempsDW"
						// /////////////////////////////////////////////

						boolean forceLooptempsDW = false;

						tempsDWStruct tempsDWObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							tHash_Lookup_tempsDW.lookup(tempsDWHashKey);

							if (!tHash_Lookup_tempsDW.hasNext()) { // G_TM_M_090

								forceLooptempsDW = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooptempsDW = true;
						} // G 21

						tempsDWStruct tempsDW = null;

						while ((tHash_Lookup_tempsDW != null && tHash_Lookup_tempsDW
								.hasNext()) || forceLooptempsDW) { // G_TM_M_043

							// CALL close loop of lookup 'tempsDW'

							tempsDWStruct fromLookup_tempsDW = null;
							tempsDW = tempsDWDefault;

							if (!forceLooptempsDW) { // G 46

								fromLookup_tempsDW = tHash_Lookup_tempsDW
										.next();

								if (fromLookup_tempsDW != null) {
									tempsDW = fromLookup_tempsDW;
								}

								if (!rejectedInnerJoin_tMap_7
										&&

										!(

										TalendDate.compareDate(pointageDW.jour,
												tempsDW.date, "yyyy-MM-dd") == 0

										)

								) { // G 016

									fromLookup_tempsDW = null;
									tempsDW = tempsDWDefault;

								} // G 016

								if (fromLookup_tempsDW == null
										&& !rejectedInnerJoin_tMap_7) { // G 017

									continue;

								} // G 017

							} // G 46

							forceLooptempsDW = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;
								Var.absentVar = pointageDW.absent == true ? 1
										: 0;
								Var.presenceVar = pointageDW.ferie == false
										&& pointageDW.conge == false
										&& pointageDW.absent == false ? 1 : 0;
								Var.jourVar = pointageDW.ferie == false
										&& pointageDW.conge == false ? 1 : 0;
								Var.congeVar = pointageDW.conge == true ? 1 : 0;
								Var.retardTot = pointageDW.retard1 != null ? pointageDW.retardHrMn
										.getSeconds()
										+ pointageDW.retardHrMn.getMinutes()
										* 60
										+ pointageDW.retardHrMn.getHours()
										* 3600
										: null;
								Var.hSup = pointageDW.hSupHrMn != null ? pointageDW.hSupHrMn
										.getSeconds()
										+ pointageDW.hSupHrMn.getMinutes()
										* 60
										+ pointageDW.hSupHrMn.getHours() * 3600
										: null;
								Var.nbreAutorisation = pointageDW.autorisation != null ? 1
										: 0;
								Var.dureeAutorisation = pointageDW.autorisation != null ? pointageDW.timeAuto
										.getSeconds()
										+ pointageDW.timeAuto.getMinutes()
										* 60
										+ pointageDW.timeAuto.getHours() * 3600
										: null;
								Var.presenceHrMn = pointageDW.presenceHrMn != null ? pointageDW.presenceHrMn
										.getSeconds()
										+ pointageDW.presenceHrMn.getMinutes()
										* 60
										+ pointageDW.presenceHrMn.getHours()
										* 3600
										: null;
								Var.budgHrMn = pointageDW.budgHrMn != null ? pointageDW.budgHrMn
										.getSeconds()
										+ pointageDW.budgHrMn.getMinutes()
										* 60
										+ pointageDW.budgHrMn.getHours() * 3600
										: null;// ###############################
								// ###############################
								// # Output tables

								pointage_fait = null;

								// # Output table : 'pointage_fait'
								pointage_fait_tmp.idper = pointageDW.idper;
								pointage_fait_tmp.idaff = affiliationDW.idaff;
								pointage_fait_tmp.idseq = null;
								pointage_fait_tmp.idcat = null;
								pointage_fait_tmp.idcng = null;
								pointage_fait_tmp.idmot = null;
								pointage_fait_tmp.absent = Var.absentVar;
								pointage_fait_tmp.present = Var.presenceVar;
								pointage_fait_tmp.id_tmp = tempsDW.idtmp;
								pointage_fait_tmp.idpnt = pointageDW.idpnt;
								pointage_fait_tmp.jour_budgetise = Var.jourVar;
								pointage_fait_tmp.conge = Var.congeVar;
								pointage_fait_tmp.retardTot = Var.retardTot;
								pointage_fait_tmp.hSup = Var.hSup;
								pointage_fait_tmp.nbreAut = Var.nbreAutorisation;
								pointage_fait_tmp.autorisation = Var.dureeAutorisation;
								pointage_fait_tmp.PresenceHrMn = Var.presenceHrMn;
								pointage_fait_tmp.budgHrMn = Var.budgHrMn;
								pointage_fait = pointage_fait_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "pointage_fait"
							if (pointage_fait != null) {

								/**
								 * [tMysqlOutput_7 main ] start
								 */

								currentComponent = "tMysqlOutput_7";

								whetherReject_tMysqlOutput_7 = false;
								if (pointage_fait.idper == null) {
									pstmt_tMysqlOutput_7.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(1,
											pointage_fait.idper);
								}

								if (pointage_fait.idaff == null) {
									pstmt_tMysqlOutput_7.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(2,
											pointage_fait.idaff);
								}

								if (pointage_fait.idseq == null) {
									pstmt_tMysqlOutput_7.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(3,
											pointage_fait.idseq);
								}

								if (pointage_fait.idcat == null) {
									pstmt_tMysqlOutput_7.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(4,
											pointage_fait.idcat);
								}

								if (pointage_fait.idcng == null) {
									pstmt_tMysqlOutput_7.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(5,
											pointage_fait.idcng);
								}

								if (pointage_fait.idmot == null) {
									pstmt_tMysqlOutput_7.setNull(6,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(6,
											pointage_fait.idmot);
								}

								if (pointage_fait.absent == null) {
									pstmt_tMysqlOutput_7.setNull(7,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(7,
											pointage_fait.absent);
								}

								if (pointage_fait.present == null) {
									pstmt_tMysqlOutput_7.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(8,
											pointage_fait.present);
								}

								if (pointage_fait.id_tmp == null) {
									pstmt_tMysqlOutput_7.setNull(9,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(9,
											pointage_fait.id_tmp);
								}

								if (pointage_fait.idpnt == null) {
									pstmt_tMysqlOutput_7.setNull(10,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(10,
											pointage_fait.idpnt);
								}

								if (pointage_fait.jour_budgetise == null) {
									pstmt_tMysqlOutput_7.setNull(11,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(11,
											pointage_fait.jour_budgetise);
								}

								if (pointage_fait.conge == null) {
									pstmt_tMysqlOutput_7.setNull(12,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(12,
											pointage_fait.conge);
								}

								if (pointage_fait.retardTot == null) {
									pstmt_tMysqlOutput_7.setNull(13,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(13,
											pointage_fait.retardTot);
								}

								if (pointage_fait.hSup == null) {
									pstmt_tMysqlOutput_7.setNull(14,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(14,
											pointage_fait.hSup);
								}

								if (pointage_fait.nbreAut == null) {
									pstmt_tMysqlOutput_7.setNull(15,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(15,
											pointage_fait.nbreAut);
								}

								if (pointage_fait.autorisation == null) {
									pstmt_tMysqlOutput_7.setNull(16,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(16,
											pointage_fait.autorisation);
								}

								if (pointage_fait.PresenceHrMn == null) {
									pstmt_tMysqlOutput_7.setNull(17,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(17,
											pointage_fait.PresenceHrMn);
								}

								if (pointage_fait.budgHrMn == null) {
									pstmt_tMysqlOutput_7.setNull(18,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_7.setInt(18,
											pointage_fait.budgHrMn);
								}

								pstmt_tMysqlOutput_7.addBatch();
								nb_line_tMysqlOutput_7++;

								batchSizeCounter_tMysqlOutput_7++;

								if (batchSize_tMysqlOutput_7 <= batchSizeCounter_tMysqlOutput_7) {
									try {
										int countSum_tMysqlOutput_7 = 0;
										for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
												.executeBatch()) {
											countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
													: countEach_tMysqlOutput_7);
										}

										insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tMysqlOutput_7 = 0;
										for (int countEach_tMysqlOutput_7 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
													: countEach_tMysqlOutput_7);
										}

										insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

										System.err.println(e.getMessage());

									}

									batchSizeCounter_tMysqlOutput_7 = 0;
								}

								commitCounter_tMysqlOutput_7++;

								if (commitEvery_tMysqlOutput_7 <= commitCounter_tMysqlOutput_7) {

									try {
										int countSum_tMysqlOutput_7 = 0;

										for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
												.executeBatch()) {
											countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
													: countEach_tMysqlOutput_7);
										}

										insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tMysqlOutput_7 = 0;
										for (int countEach_tMysqlOutput_7 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
													: countEach_tMysqlOutput_7);
										}

										insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

										System.out.println(e.getMessage());

									}

									conn_tMysqlOutput_7.commit();

									commitCounter_tMysqlOutput_7 = 0;

								}

								tos_count_tMysqlOutput_7++;

								/**
								 * [tMysqlOutput_7 main ] stop
								 */

							} // End of branch "pointage_fait"

						} // close loop of lookup 'tempsDW' // G_TM_M_043

						/**
						 * [tMysqlInput_8 end ] start
						 */

						currentComponent = "tMysqlInput_8";

					}
				} finally {
					rs_tMysqlInput_8.close();
					stmt_tMysqlInput_8.close();

					if (conn_tMysqlInput_8 != null
							&& !conn_tMysqlInput_8.isClosed()) {
						conn_tMysqlInput_8.close();
					}

				}
				globalMap.put("tMysqlInput_8_NB_LINE", nb_line_tMysqlInput_8);

				ok_Hash.put("tMysqlInput_8", true);
				end_Hash.put("tMysqlInput_8", System.currentTimeMillis());

				/**
				 * [tMysqlInput_8 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_historiqueDW != null) {
					tHash_Lookup_historiqueDW.endGet();
				}
				globalMap.remove("tHash_Lookup_historiqueDW");

				if (tHash_Lookup_affiliationDW != null) {
					tHash_Lookup_affiliationDW.endGet();
				}
				globalMap.remove("tHash_Lookup_affiliationDW");

				if (tHash_Lookup_tempsDW != null) {
					tHash_Lookup_tempsDW.endGet();
				}
				globalMap.remove("tHash_Lookup_tempsDW");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMysqlOutput_7 end ] start
				 */

				currentComponent = "tMysqlOutput_7";

				try {
					if (batchSizeCounter_tMysqlOutput_7 != 0) {
						int countSum_tMysqlOutput_7 = 0;
						for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
								.executeBatch()) {
							countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
									: countEach_tMysqlOutput_7);
						}

						insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_7 = 0;
					for (int countEach_tMysqlOutput_7 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
								: countEach_tMysqlOutput_7);
					}

					insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_7 = 0;

				try {
					if (pstmt_tMysqlOutput_7 != null) {
						int countSum_tMysqlOutput_7 = 0;

						for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
								.executeBatch()) {
							countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
									: countEach_tMysqlOutput_7);
						}

						insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_7 = 0;
					for (int countEach_tMysqlOutput_7 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
								: countEach_tMysqlOutput_7);
					}

					insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_7 != null) {

					pstmt_tMysqlOutput_7.close();

				}

				conn_tMysqlOutput_7.commit();

				conn_tMysqlOutput_7.close();

				nb_line_deleted_tMysqlOutput_7 = nb_line_deleted_tMysqlOutput_7
						+ deletedCount_tMysqlOutput_7;
				nb_line_update_tMysqlOutput_7 = nb_line_update_tMysqlOutput_7
						+ updatedCount_tMysqlOutput_7;
				nb_line_inserted_tMysqlOutput_7 = nb_line_inserted_tMysqlOutput_7
						+ insertedCount_tMysqlOutput_7;
				nb_line_rejected_tMysqlOutput_7 = nb_line_rejected_tMysqlOutput_7
						+ rejectedCount_tMysqlOutput_7;

				globalMap.put("tMysqlOutput_7_NB_LINE", nb_line_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_7);
				globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_7);

				ok_Hash.put("tMysqlOutput_7", true);
				end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_affiliationDW");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_tempsDW");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_historiqueDW");

			try {

				/**
				 * [tMysqlInput_8 finally ] start
				 */

				currentComponent = "tMysqlInput_8";

				/**
				 * [tMysqlInput_8 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tMysqlOutput_7 finally ] start
				 */

				currentComponent = "tMysqlOutput_7";

				/**
				 * [tMysqlOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 1);
	}

	public static class affiliationDWStruct
			implements
			routines.system.IPersistableComparableLookupRow<affiliationDWStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public String designation;

		public String getDesignation() {
			return this.designation;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer idpar;

		public Integer getIdpar() {
			return this.idpar;
		}

		public String codeteam;

		public String getCodeteam() {
			return this.codeteam;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idaff;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final affiliationDWStruct other = (affiliationDWStruct) obj;

			if (this.idaff != other.idaff)
				return false;

			return true;
		}

		public void copyDataTo(affiliationDWStruct other) {

			other.idaff = this.idaff;
			other.designation = this.designation;
			other.description = this.description;
			other.type = this.type;
			other.idpar = this.idpar;
			other.codeteam = this.codeteam;

		}

		public void copyKeysDataTo(affiliationDWStruct other) {

			other.idaff = this.idaff;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idaff = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idaff);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.designation = readString(dis, ois);

				this.description = readString(dis, ois);

				this.type = readString(dis, ois);

				this.idpar = readInteger(dis, ois);

				this.codeteam = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.designation, dos, oos);

				writeString(this.description, dos, oos);

				writeString(this.type, dos, oos);

				writeInteger(this.idpar, dos, oos);

				writeString(this.codeteam, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idaff=" + String.valueOf(idaff));
			sb.append(",designation=" + designation);
			sb.append(",description=" + description);
			sb.append(",type=" + type);
			sb.append(",idpar=" + String.valueOf(idpar));
			sb.append(",codeteam=" + codeteam);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(affiliationDWStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idaff, other.idaff);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				affiliationDWStruct affiliationDW = new affiliationDWStruct();

				/**
				 * [tAdvancedHash_affiliationDW begin ] start
				 */

				ok_Hash.put("tAdvancedHash_affiliationDW", false);
				start_Hash.put("tAdvancedHash_affiliationDW",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_affiliationDW";

				int tos_count_tAdvancedHash_affiliationDW = 0;

				// connection name:affiliationDW
				// source node:tMysqlInput_11 - inputs:(after_tMysqlInput_8)
				// outputs:(affiliationDW,affiliationDW) | target
				// node:tAdvancedHash_affiliationDW - inputs:(affiliationDW)
				// outputs:()
				// linked node: tMap_7 -
				// inputs:(pointageDW,affiliationDW,tempsDW,historiqueDW)
				// outputs:(pointage_fait)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_affiliationDW = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<affiliationDWStruct> tHash_Lookup_affiliationDW = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<affiliationDWStruct> getLookup(matchingModeEnum_affiliationDW);

				globalMap.put("tHash_Lookup_affiliationDW",
						tHash_Lookup_affiliationDW);

				/**
				 * [tAdvancedHash_affiliationDW begin ] stop
				 */

				/**
				 * [tMysqlInput_11 begin ] start
				 */

				ok_Hash.put("tMysqlInput_11", false);
				start_Hash.put("tMysqlInput_11", System.currentTimeMillis());

				currentComponent = "tMysqlInput_11";

				int tos_count_tMysqlInput_11 = 0;

				java.util.Calendar calendar_tMysqlInput_11 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_11 = calendar_tMysqlInput_11
						.getTime();
				int nb_line_tMysqlInput_11 = 0;
				java.sql.Connection conn_tMysqlInput_11 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_11 = "kb2i";
				String dbPwd_tMysqlInput_11 = "citrec";

				String url_tMysqlInput_11 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_11 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_11, dbUser_tMysqlInput_11,
						dbPwd_tMysqlInput_11);

				java.sql.Statement stmt_tMysqlInput_11 = conn_tMysqlInput_11
						.createStatement();

				String dbquery_tMysqlInput_11 = "SELECT    `affiliation`.`idaff`,    `affiliation`.`designation`,    `affiliation`.`description`,    `affiliation`.`type`,    `affiliation`.`idpar`,    `affiliation`.`codeteam` FROM `affiliation`";

				globalMap.put("tMysqlInput_11_QUERY", dbquery_tMysqlInput_11);
				java.sql.ResultSet rs_tMysqlInput_11 = null;
				try {
					rs_tMysqlInput_11 = stmt_tMysqlInput_11
							.executeQuery(dbquery_tMysqlInput_11);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_11 = rs_tMysqlInput_11
							.getMetaData();
					int colQtyInRs_tMysqlInput_11 = rsmd_tMysqlInput_11
							.getColumnCount();

					String tmpContent_tMysqlInput_11 = null;
					int column_index_tMysqlInput_11 = 1;

					while (rs_tMysqlInput_11.next()) {
						nb_line_tMysqlInput_11++;

						column_index_tMysqlInput_11 = 1;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.idaff = 0;
						} else {

							if (rs_tMysqlInput_11
									.getObject(column_index_tMysqlInput_11) != null) {
								affiliationDW.idaff = rs_tMysqlInput_11
										.getInt(column_index_tMysqlInput_11);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_11 = 2;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.designation = null;
						} else {

							tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
									.getString(column_index_tMysqlInput_11);
							if (tmpContent_tMysqlInput_11 != null) {
								affiliationDW.designation = tmpContent_tMysqlInput_11;
							} else {
								affiliationDW.designation = null;
							}

						}

						column_index_tMysqlInput_11 = 3;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.description = null;
						} else {

							tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
									.getString(column_index_tMysqlInput_11);
							if (tmpContent_tMysqlInput_11 != null) {
								affiliationDW.description = tmpContent_tMysqlInput_11;
							} else {
								affiliationDW.description = null;
							}

						}

						column_index_tMysqlInput_11 = 4;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.type = null;
						} else {

							tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
									.getString(column_index_tMysqlInput_11);
							if (tmpContent_tMysqlInput_11 != null) {
								affiliationDW.type = tmpContent_tMysqlInput_11;
							} else {
								affiliationDW.type = null;
							}

						}

						column_index_tMysqlInput_11 = 5;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.idpar = null;
						} else {

							if (rs_tMysqlInput_11
									.getObject(column_index_tMysqlInput_11) != null) {
								affiliationDW.idpar = rs_tMysqlInput_11
										.getInt(column_index_tMysqlInput_11);
							} else {
								affiliationDW.idpar = null;
							}

						}

						column_index_tMysqlInput_11 = 6;

						if (colQtyInRs_tMysqlInput_11 < column_index_tMysqlInput_11) {
							affiliationDW.codeteam = null;
						} else {

							tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
									.getString(column_index_tMysqlInput_11);
							if (tmpContent_tMysqlInput_11 != null) {
								affiliationDW.codeteam = tmpContent_tMysqlInput_11;
							} else {
								affiliationDW.codeteam = null;
							}

						}

						/**
						 * [tMysqlInput_11 begin ] stop
						 */
						/**
						 * [tMysqlInput_11 main ] start
						 */

						currentComponent = "tMysqlInput_11";

						tos_count_tMysqlInput_11++;

						/**
						 * [tMysqlInput_11 main ] stop
						 */

						/**
						 * [tAdvancedHash_affiliationDW main ] start
						 */

						currentComponent = "tAdvancedHash_affiliationDW";

						affiliationDWStruct affiliationDW_HashRow = new affiliationDWStruct();

						affiliationDW_HashRow.idaff = affiliationDW.idaff;

						affiliationDW_HashRow.designation = affiliationDW.designation;

						affiliationDW_HashRow.description = affiliationDW.description;

						affiliationDW_HashRow.type = affiliationDW.type;

						affiliationDW_HashRow.idpar = affiliationDW.idpar;

						affiliationDW_HashRow.codeteam = affiliationDW.codeteam;

						tHash_Lookup_affiliationDW.put(affiliationDW_HashRow);

						tos_count_tAdvancedHash_affiliationDW++;

						/**
						 * [tAdvancedHash_affiliationDW main ] stop
						 */

						/**
						 * [tMysqlInput_11 end ] start
						 */

						currentComponent = "tMysqlInput_11";

					}
				} finally {
					rs_tMysqlInput_11.close();
					stmt_tMysqlInput_11.close();

					if (conn_tMysqlInput_11 != null
							&& !conn_tMysqlInput_11.isClosed()) {
						conn_tMysqlInput_11.close();
					}

				}
				globalMap.put("tMysqlInput_11_NB_LINE", nb_line_tMysqlInput_11);

				ok_Hash.put("tMysqlInput_11", true);
				end_Hash.put("tMysqlInput_11", System.currentTimeMillis());

				/**
				 * [tMysqlInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_affiliationDW end ] start
				 */

				currentComponent = "tAdvancedHash_affiliationDW";

				tHash_Lookup_affiliationDW.endPut();

				ok_Hash.put("tAdvancedHash_affiliationDW", true);
				end_Hash.put("tAdvancedHash_affiliationDW",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_affiliationDW end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_11 finally ] start
				 */

				currentComponent = "tMysqlInput_11";

				/**
				 * [tMysqlInput_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_affiliationDW finally ] start
				 */

				currentComponent = "tAdvancedHash_affiliationDW";

				/**
				 * [tAdvancedHash_affiliationDW finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_11_SUBPROCESS_STATE", 1);
	}

	public static class tempsDWStruct implements
			routines.system.IPersistableRow<tempsDWStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];

		public int idtmp;

		public int getIdtmp() {
			return this.idtmp;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer Annee;

		public Integer getAnnee() {
			return this.Annee;
		}

		public String mois_char;

		public String getMois_char() {
			return this.mois_char;
		}

		public String jour_char;

		public String getJour_char() {
			return this.jour_char;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_loadDataToDW.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_loadDataToDW.length == 0) {
						commonByteArray_MIGRATION_loadDataToDW = new byte[1024];
					} else {
						commonByteArray_MIGRATION_loadDataToDW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_loadDataToDW, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_loadDataToDW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idtmp = dis.readInt();

					this.date = readDate(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.Annee = readInteger(dis);

					this.mois_char = readString(dis);

					this.jour_char = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idtmp);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.Annee, dos);

				// String

				writeString(this.mois_char, dos);

				// String

				writeString(this.jour_char, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idtmp=" + String.valueOf(idtmp));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",Annee=" + String.valueOf(Annee));
			sb.append(",mois_char=" + mois_char);
			sb.append(",jour_char=" + jour_char);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tempsDWStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tempsDWStruct tempsDW = new tempsDWStruct();

				/**
				 * [tAdvancedHash_tempsDW begin ] start
				 */

				ok_Hash.put("tAdvancedHash_tempsDW", false);
				start_Hash.put("tAdvancedHash_tempsDW",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_tempsDW";

				int tos_count_tAdvancedHash_tempsDW = 0;

				// connection name:tempsDW
				// source node:tMysqlInput_12 - inputs:(after_tMysqlInput_8)
				// outputs:(tempsDW,tempsDW) | target node:tAdvancedHash_tempsDW
				// - inputs:(tempsDW) outputs:()
				// linked node: tMap_7 -
				// inputs:(pointageDW,affiliationDW,tempsDW,historiqueDW)
				// outputs:(pointage_fait)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_tempsDW = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsDWStruct> tHash_Lookup_tempsDW = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<tempsDWStruct> getLookup(matchingModeEnum_tempsDW);

				globalMap.put("tHash_Lookup_tempsDW", tHash_Lookup_tempsDW);

				/**
				 * [tAdvancedHash_tempsDW begin ] stop
				 */

				/**
				 * [tMysqlInput_12 begin ] start
				 */

				ok_Hash.put("tMysqlInput_12", false);
				start_Hash.put("tMysqlInput_12", System.currentTimeMillis());

				currentComponent = "tMysqlInput_12";

				int tos_count_tMysqlInput_12 = 0;

				java.util.Calendar calendar_tMysqlInput_12 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_12.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_12 = calendar_tMysqlInput_12
						.getTime();
				int nb_line_tMysqlInput_12 = 0;
				java.sql.Connection conn_tMysqlInput_12 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_12 = "kb2i";
				String dbPwd_tMysqlInput_12 = "citrec";

				String url_tMysqlInput_12 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_12 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_12, dbUser_tMysqlInput_12,
						dbPwd_tMysqlInput_12);

				java.sql.Statement stmt_tMysqlInput_12 = conn_tMysqlInput_12
						.createStatement();

				String dbquery_tMysqlInput_12 = "SELECT    `temps`.`idtmp`,    `temps`.`date`,    `temps`.`jour`,    `temps`.`mois`,    `temps`.`Annee`,    `temps`.`mois_char`,    `temps`.`jour_char` FROM `temps`";

				globalMap.put("tMysqlInput_12_QUERY", dbquery_tMysqlInput_12);
				java.sql.ResultSet rs_tMysqlInput_12 = null;
				try {
					rs_tMysqlInput_12 = stmt_tMysqlInput_12
							.executeQuery(dbquery_tMysqlInput_12);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_12 = rs_tMysqlInput_12
							.getMetaData();
					int colQtyInRs_tMysqlInput_12 = rsmd_tMysqlInput_12
							.getColumnCount();

					String tmpContent_tMysqlInput_12 = null;
					int column_index_tMysqlInput_12 = 1;

					while (rs_tMysqlInput_12.next()) {
						nb_line_tMysqlInput_12++;

						column_index_tMysqlInput_12 = 1;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.idtmp = 0;
						} else {

							if (rs_tMysqlInput_12
									.getObject(column_index_tMysqlInput_12) != null) {
								tempsDW.idtmp = rs_tMysqlInput_12
										.getInt(column_index_tMysqlInput_12);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_12 = 2;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.date = null;
						} else {

							if (rs_tMysqlInput_12
									.getString(column_index_tMysqlInput_12) != null) {
								String dateString_tMysqlInput_12 = rs_tMysqlInput_12
										.getString(column_index_tMysqlInput_12);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_12)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_12)) {
									tempsDW.date = rs_tMysqlInput_12
											.getTimestamp(column_index_tMysqlInput_12);
								} else {
									tempsDW.date = (java.util.Date) year0_tMysqlInput_12
											.clone();
								}
							} else {
								tempsDW.date = null;
							}

						}

						column_index_tMysqlInput_12 = 3;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.jour = null;
						} else {

							if (rs_tMysqlInput_12
									.getObject(column_index_tMysqlInput_12) != null) {
								tempsDW.jour = rs_tMysqlInput_12
										.getInt(column_index_tMysqlInput_12);
							} else {
								tempsDW.jour = null;
							}

						}

						column_index_tMysqlInput_12 = 4;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.mois = null;
						} else {

							if (rs_tMysqlInput_12
									.getObject(column_index_tMysqlInput_12) != null) {
								tempsDW.mois = rs_tMysqlInput_12
										.getInt(column_index_tMysqlInput_12);
							} else {
								tempsDW.mois = null;
							}

						}

						column_index_tMysqlInput_12 = 5;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.Annee = null;
						} else {

							if (rs_tMysqlInput_12
									.getObject(column_index_tMysqlInput_12) != null) {
								tempsDW.Annee = rs_tMysqlInput_12
										.getInt(column_index_tMysqlInput_12);
							} else {
								tempsDW.Annee = null;
							}

						}

						column_index_tMysqlInput_12 = 6;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.mois_char = null;
						} else {

							tmpContent_tMysqlInput_12 = rs_tMysqlInput_12
									.getString(column_index_tMysqlInput_12);
							if (tmpContent_tMysqlInput_12 != null) {
								tempsDW.mois_char = tmpContent_tMysqlInput_12;
							} else {
								tempsDW.mois_char = null;
							}

						}

						column_index_tMysqlInput_12 = 7;

						if (colQtyInRs_tMysqlInput_12 < column_index_tMysqlInput_12) {
							tempsDW.jour_char = null;
						} else {

							tmpContent_tMysqlInput_12 = rs_tMysqlInput_12
									.getString(column_index_tMysqlInput_12);
							if (tmpContent_tMysqlInput_12 != null) {
								tempsDW.jour_char = tmpContent_tMysqlInput_12;
							} else {
								tempsDW.jour_char = null;
							}

						}

						/**
						 * [tMysqlInput_12 begin ] stop
						 */
						/**
						 * [tMysqlInput_12 main ] start
						 */

						currentComponent = "tMysqlInput_12";

						tos_count_tMysqlInput_12++;

						/**
						 * [tMysqlInput_12 main ] stop
						 */

						/**
						 * [tAdvancedHash_tempsDW main ] start
						 */

						currentComponent = "tAdvancedHash_tempsDW";

						tempsDWStruct tempsDW_HashRow = new tempsDWStruct();

						tempsDW_HashRow.idtmp = tempsDW.idtmp;

						tempsDW_HashRow.date = tempsDW.date;

						tempsDW_HashRow.jour = tempsDW.jour;

						tempsDW_HashRow.mois = tempsDW.mois;

						tempsDW_HashRow.Annee = tempsDW.Annee;

						tempsDW_HashRow.mois_char = tempsDW.mois_char;

						tempsDW_HashRow.jour_char = tempsDW.jour_char;

						tHash_Lookup_tempsDW.put(tempsDW_HashRow);

						tos_count_tAdvancedHash_tempsDW++;

						/**
						 * [tAdvancedHash_tempsDW main ] stop
						 */

						/**
						 * [tMysqlInput_12 end ] start
						 */

						currentComponent = "tMysqlInput_12";

					}
				} finally {
					rs_tMysqlInput_12.close();
					stmt_tMysqlInput_12.close();

					if (conn_tMysqlInput_12 != null
							&& !conn_tMysqlInput_12.isClosed()) {
						conn_tMysqlInput_12.close();
					}

				}
				globalMap.put("tMysqlInput_12_NB_LINE", nb_line_tMysqlInput_12);

				ok_Hash.put("tMysqlInput_12", true);
				end_Hash.put("tMysqlInput_12", System.currentTimeMillis());

				/**
				 * [tMysqlInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_tempsDW end ] start
				 */

				currentComponent = "tAdvancedHash_tempsDW";

				tHash_Lookup_tempsDW.endPut();

				ok_Hash.put("tAdvancedHash_tempsDW", true);
				end_Hash.put("tAdvancedHash_tempsDW",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_tempsDW end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_12 finally ] start
				 */

				currentComponent = "tMysqlInput_12";

				/**
				 * [tMysqlInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_tempsDW finally ] start
				 */

				currentComponent = "tAdvancedHash_tempsDW";

				/**
				 * [tAdvancedHash_tempsDW finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_12_SUBPROCESS_STATE", 1);
	}

	public static class moisStruct implements
			routines.system.IPersistableComparableLookupRow<moisStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idmois;

		public int getIdmois() {
			return this.idmois;
		}

		public String designation_FR;

		public String getDesignation_FR() {
			return this.designation_FR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idmois;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final moisStruct other = (moisStruct) obj;

			if (this.idmois != other.idmois)
				return false;

			return true;
		}

		public void copyDataTo(moisStruct other) {

			other.idmois = this.idmois;
			other.designation_FR = this.designation_FR;

		}

		public void copyKeysDataTo(moisStruct other) {

			other.idmois = this.idmois;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idmois = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idmois);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.designation_FR = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.designation_FR, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idmois=" + String.valueOf(idmois));
			sb.append(",designation_FR=" + designation_FR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(moisStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idmois, other.idmois);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				moisStruct mois = new moisStruct();

				/**
				 * [tAdvancedHash_mois begin ] start
				 */

				ok_Hash.put("tAdvancedHash_mois", false);
				start_Hash
						.put("tAdvancedHash_mois", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_mois";

				int tos_count_tAdvancedHash_mois = 0;

				// connection name:mois
				// source node:tMysqlInput_7 - inputs:(after_tMysqlInput_6)
				// outputs:(mois,mois) | target node:tAdvancedHash_mois -
				// inputs:(mois) outputs:()
				// linked node: tMap_6 - inputs:(temps,mois)
				// outputs:(tempsOutput2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_mois = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<moisStruct> tHash_Lookup_mois = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<moisStruct> getLookup(matchingModeEnum_mois);

				globalMap.put("tHash_Lookup_mois", tHash_Lookup_mois);

				/**
				 * [tAdvancedHash_mois begin ] stop
				 */

				/**
				 * [tMysqlInput_7 begin ] start
				 */

				ok_Hash.put("tMysqlInput_7", false);
				start_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				currentComponent = "tMysqlInput_7";

				int tos_count_tMysqlInput_7 = 0;

				java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7
						.getTime();
				int nb_line_tMysqlInput_7 = 0;
				java.sql.Connection conn_tMysqlInput_7 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_7 = "kb2i";
				String dbPwd_tMysqlInput_7 = "citrec";

				String url_tMysqlInput_7 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_7, dbUser_tMysqlInput_7,
						dbPwd_tMysqlInput_7);

				java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7
						.createStatement();

				String dbquery_tMysqlInput_7 = "SELECT    `mois`.`idmois`,    `mois`.`designation_FR` FROM `mois`";

				globalMap.put("tMysqlInput_7_QUERY", dbquery_tMysqlInput_7);
				java.sql.ResultSet rs_tMysqlInput_7 = null;
				try {
					rs_tMysqlInput_7 = stmt_tMysqlInput_7
							.executeQuery(dbquery_tMysqlInput_7);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7
							.getMetaData();
					int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7
							.getColumnCount();

					String tmpContent_tMysqlInput_7 = null;
					int column_index_tMysqlInput_7 = 1;

					while (rs_tMysqlInput_7.next()) {
						nb_line_tMysqlInput_7++;

						column_index_tMysqlInput_7 = 1;

						if (colQtyInRs_tMysqlInput_7 < column_index_tMysqlInput_7) {
							mois.idmois = 0;
						} else {

							if (rs_tMysqlInput_7
									.getObject(column_index_tMysqlInput_7) != null) {
								mois.idmois = rs_tMysqlInput_7
										.getInt(column_index_tMysqlInput_7);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_7 = 2;

						if (colQtyInRs_tMysqlInput_7 < column_index_tMysqlInput_7) {
							mois.designation_FR = null;
						} else {

							tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
									.getString(column_index_tMysqlInput_7);
							if (tmpContent_tMysqlInput_7 != null) {
								mois.designation_FR = tmpContent_tMysqlInput_7;
							} else {
								mois.designation_FR = null;
							}

						}

						/**
						 * [tMysqlInput_7 begin ] stop
						 */
						/**
						 * [tMysqlInput_7 main ] start
						 */

						currentComponent = "tMysqlInput_7";

						tos_count_tMysqlInput_7++;

						/**
						 * [tMysqlInput_7 main ] stop
						 */

						/**
						 * [tAdvancedHash_mois main ] start
						 */

						currentComponent = "tAdvancedHash_mois";

						moisStruct mois_HashRow = new moisStruct();

						mois_HashRow.idmois = mois.idmois;

						mois_HashRow.designation_FR = mois.designation_FR;

						tHash_Lookup_mois.put(mois_HashRow);

						tos_count_tAdvancedHash_mois++;

						/**
						 * [tAdvancedHash_mois main ] stop
						 */

						/**
						 * [tMysqlInput_7 end ] start
						 */

						currentComponent = "tMysqlInput_7";

					}
				} finally {
					rs_tMysqlInput_7.close();
					stmt_tMysqlInput_7.close();

					if (conn_tMysqlInput_7 != null
							&& !conn_tMysqlInput_7.isClosed()) {
						conn_tMysqlInput_7.close();
					}

				}
				globalMap.put("tMysqlInput_7_NB_LINE", nb_line_tMysqlInput_7);

				ok_Hash.put("tMysqlInput_7", true);
				end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				/**
				 * [tMysqlInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_mois end ] start
				 */

				currentComponent = "tAdvancedHash_mois";

				tHash_Lookup_mois.endPut();

				ok_Hash.put("tAdvancedHash_mois", true);
				end_Hash.put("tAdvancedHash_mois", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_mois end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_7 finally ] start
				 */

				currentComponent = "tMysqlInput_7";

				/**
				 * [tMysqlInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_mois finally ] start
				 */

				currentComponent = "tAdvancedHash_mois";

				/**
				 * [tAdvancedHash_mois finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class historiqueDWStruct implements
			routines.system.IPersistableComparableLookupRow<historiqueDWStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_loadDataToDW = new byte[0];
		static byte[] commonByteArray_MIGRATION_loadDataToDW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idhis;

		public int getIdhis() {
			return this.idhis;
		}

		public java.util.Date Du;

		public java.util.Date getDu() {
			return this.Du;
		}

		public java.util.Date Au;

		public java.util.Date getAu() {
			return this.Au;
		}

		public int idaff;

		public int getIdaff() {
			return this.idaff;
		}

		public int idper;

		public int getIdper() {
			return this.idper;
		}

		public Integer idcat;

		public Integer getIdcat() {
			return this.idcat;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idper;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final historiqueDWStruct other = (historiqueDWStruct) obj;

			if (this.idper != other.idper)
				return false;

			return true;
		}

		public void copyDataTo(historiqueDWStruct other) {

			other.idhis = this.idhis;
			other.Du = this.Du;
			other.Au = this.Au;
			other.idaff = this.idaff;
			other.idper = this.idper;
			other.idcat = this.idcat;

		}

		public void copyKeysDataTo(historiqueDWStruct other) {

			other.idper = this.idper;

		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_loadDataToDW) {

				try {

					int length = 0;

					this.idper = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idper);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.idhis = dis.readInt();

				this.Du = readDate(dis, ois);

				this.Au = readDate(dis, ois);

				this.idaff = dis.readInt();

				this.idcat = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.idhis);

				writeDate(this.Du, dos, oos);

				writeDate(this.Au, dos, oos);

				dos.writeInt(this.idaff);

				writeInteger(this.idcat, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idhis=" + String.valueOf(idhis));
			sb.append(",Du=" + String.valueOf(Du));
			sb.append(",Au=" + String.valueOf(Au));
			sb.append(",idaff=" + String.valueOf(idaff));
			sb.append(",idper=" + String.valueOf(idper));
			sb.append(",idcat=" + String.valueOf(idcat));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(historiqueDWStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idper, other.idper);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				historiqueDWStruct historiqueDW = new historiqueDWStruct();

				/**
				 * [tAdvancedHash_historiqueDW begin ] start
				 */

				ok_Hash.put("tAdvancedHash_historiqueDW", false);
				start_Hash.put("tAdvancedHash_historiqueDW",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_historiqueDW";

				int tos_count_tAdvancedHash_historiqueDW = 0;

				// connection name:historiqueDW
				// source node:tMysqlInput_9 - inputs:(after_tMysqlInput_8)
				// outputs:(historiqueDW,historiqueDW) | target
				// node:tAdvancedHash_historiqueDW - inputs:(historiqueDW)
				// outputs:()
				// linked node: tMap_7 -
				// inputs:(pointageDW,affiliationDW,tempsDW,historiqueDW)
				// outputs:(pointage_fait)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_historiqueDW = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<historiqueDWStruct> tHash_Lookup_historiqueDW = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<historiqueDWStruct> getLookup(matchingModeEnum_historiqueDW);

				globalMap.put("tHash_Lookup_historiqueDW",
						tHash_Lookup_historiqueDW);

				/**
				 * [tAdvancedHash_historiqueDW begin ] stop
				 */

				/**
				 * [tMysqlInput_9 begin ] start
				 */

				ok_Hash.put("tMysqlInput_9", false);
				start_Hash.put("tMysqlInput_9", System.currentTimeMillis());

				currentComponent = "tMysqlInput_9";

				int tos_count_tMysqlInput_9 = 0;

				java.util.Calendar calendar_tMysqlInput_9 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_9.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_9 = calendar_tMysqlInput_9
						.getTime();
				int nb_line_tMysqlInput_9 = 0;
				java.sql.Connection conn_tMysqlInput_9 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_9 = "kb2i";
				String dbPwd_tMysqlInput_9 = "citrec";

				String url_tMysqlInput_9 = "jdbc:mysql://" + "192.168.1.2"
						+ ":" + "3306" + "/" + "biopointDW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_9 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_9, dbUser_tMysqlInput_9,
						dbPwd_tMysqlInput_9);

				java.sql.Statement stmt_tMysqlInput_9 = conn_tMysqlInput_9
						.createStatement();

				String dbquery_tMysqlInput_9 = "SELECT    `historique`.`idhis`,    `historique`.`Du`,    `historique`.`Au`,    `historique`.`idaff`,    `historique`.`idper`,    `historique`.`idcat` FROM `historique`";

				globalMap.put("tMysqlInput_9_QUERY", dbquery_tMysqlInput_9);
				java.sql.ResultSet rs_tMysqlInput_9 = null;
				try {
					rs_tMysqlInput_9 = stmt_tMysqlInput_9
							.executeQuery(dbquery_tMysqlInput_9);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_9 = rs_tMysqlInput_9
							.getMetaData();
					int colQtyInRs_tMysqlInput_9 = rsmd_tMysqlInput_9
							.getColumnCount();

					String tmpContent_tMysqlInput_9 = null;
					int column_index_tMysqlInput_9 = 1;

					while (rs_tMysqlInput_9.next()) {
						nb_line_tMysqlInput_9++;

						column_index_tMysqlInput_9 = 1;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.idhis = 0;
						} else {

							if (rs_tMysqlInput_9
									.getObject(column_index_tMysqlInput_9) != null) {
								historiqueDW.idhis = rs_tMysqlInput_9
										.getInt(column_index_tMysqlInput_9);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_9 = 2;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.Du = null;
						} else {

							if (rs_tMysqlInput_9
									.getString(column_index_tMysqlInput_9) != null) {
								String dateString_tMysqlInput_9 = rs_tMysqlInput_9
										.getString(column_index_tMysqlInput_9);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_9)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_9)) {
									historiqueDW.Du = rs_tMysqlInput_9
											.getTimestamp(column_index_tMysqlInput_9);
								} else {
									historiqueDW.Du = (java.util.Date) year0_tMysqlInput_9
											.clone();
								}
							} else {
								historiqueDW.Du = null;
							}

						}

						column_index_tMysqlInput_9 = 3;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.Au = null;
						} else {

							if (rs_tMysqlInput_9
									.getString(column_index_tMysqlInput_9) != null) {
								String dateString_tMysqlInput_9 = rs_tMysqlInput_9
										.getString(column_index_tMysqlInput_9);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_9)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_9)) {
									historiqueDW.Au = rs_tMysqlInput_9
											.getTimestamp(column_index_tMysqlInput_9);
								} else {
									historiqueDW.Au = (java.util.Date) year0_tMysqlInput_9
											.clone();
								}
							} else {
								historiqueDW.Au = null;
							}

						}

						column_index_tMysqlInput_9 = 4;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.idaff = 0;
						} else {

							if (rs_tMysqlInput_9
									.getObject(column_index_tMysqlInput_9) != null) {
								historiqueDW.idaff = rs_tMysqlInput_9
										.getInt(column_index_tMysqlInput_9);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_9 = 5;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.idper = 0;
						} else {

							if (rs_tMysqlInput_9
									.getObject(column_index_tMysqlInput_9) != null) {
								historiqueDW.idper = rs_tMysqlInput_9
										.getInt(column_index_tMysqlInput_9);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_9 = 6;

						if (colQtyInRs_tMysqlInput_9 < column_index_tMysqlInput_9) {
							historiqueDW.idcat = null;
						} else {

							if (rs_tMysqlInput_9
									.getObject(column_index_tMysqlInput_9) != null) {
								historiqueDW.idcat = rs_tMysqlInput_9
										.getInt(column_index_tMysqlInput_9);
							} else {
								historiqueDW.idcat = null;
							}

						}

						/**
						 * [tMysqlInput_9 begin ] stop
						 */
						/**
						 * [tMysqlInput_9 main ] start
						 */

						currentComponent = "tMysqlInput_9";

						tos_count_tMysqlInput_9++;

						/**
						 * [tMysqlInput_9 main ] stop
						 */

						/**
						 * [tAdvancedHash_historiqueDW main ] start
						 */

						currentComponent = "tAdvancedHash_historiqueDW";

						historiqueDWStruct historiqueDW_HashRow = new historiqueDWStruct();

						historiqueDW_HashRow.idhis = historiqueDW.idhis;

						historiqueDW_HashRow.Du = historiqueDW.Du;

						historiqueDW_HashRow.Au = historiqueDW.Au;

						historiqueDW_HashRow.idaff = historiqueDW.idaff;

						historiqueDW_HashRow.idper = historiqueDW.idper;

						historiqueDW_HashRow.idcat = historiqueDW.idcat;

						tHash_Lookup_historiqueDW.put(historiqueDW_HashRow);

						tos_count_tAdvancedHash_historiqueDW++;

						/**
						 * [tAdvancedHash_historiqueDW main ] stop
						 */

						/**
						 * [tMysqlInput_9 end ] start
						 */

						currentComponent = "tMysqlInput_9";

					}
				} finally {
					rs_tMysqlInput_9.close();
					stmt_tMysqlInput_9.close();

					if (conn_tMysqlInput_9 != null
							&& !conn_tMysqlInput_9.isClosed()) {
						conn_tMysqlInput_9.close();
					}

				}
				globalMap.put("tMysqlInput_9_NB_LINE", nb_line_tMysqlInput_9);

				ok_Hash.put("tMysqlInput_9", true);
				end_Hash.put("tMysqlInput_9", System.currentTimeMillis());

				/**
				 * [tMysqlInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_historiqueDW end ] start
				 */

				currentComponent = "tAdvancedHash_historiqueDW";

				tHash_Lookup_historiqueDW.endPut();

				ok_Hash.put("tAdvancedHash_historiqueDW", true);
				end_Hash.put("tAdvancedHash_historiqueDW",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_historiqueDW end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_9 finally ] start
				 */

				currentComponent = "tMysqlInput_9";

				/**
				 * [tMysqlInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_historiqueDW finally ] start
				 */

				currentComponent = "tAdvancedHash_historiqueDW";

				/**
				 * [tAdvancedHash_historiqueDW finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final LoadDataToDW loadDataToDWClass = new LoadDataToDW();

		int exitCode = loadDataToDWClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = LoadDataToDW.class.getClassLoader()
					.getResourceAsStream(
							"migration/loaddatatodw_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_2) {
			globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", -1);

			e_tMysqlInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : loadDataToDW");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 515373 characters generated by Talend Open Studio for Data Integration on the
 * 24 juin 2014 16:22:16 CET
 ************************************************************************************************/
