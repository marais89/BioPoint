package org.bio.jobs;

//============================================================================
//
//Copyright (c) 2006-2013, Talend Inc.
//
//This source code has been automatically generated by_Talend Open Studio for Data Integration
/// Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.



import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.Kb2iDataGenerator;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

import org.bio.service.IniService;
import org.bio.service.PasswordEncrypt;

@SuppressWarnings("unused")
/**
* Job: UserSpago Purpose: <br>
* Description:  <br>
* @author test@talend.com
* @version 5.4.1.r111943
* @status 
*/
public class UserSpago implements TalendJob {
	private static IniService ini = new IniService();
	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "UserSpago";
	private final String projectName = "MIGRATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					UserSpago.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(UserSpago.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class userOutStruct implements
			routines.system.IPersistableRow<userOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_UserSpago = new byte[0];
		static byte[] commonByteArray_MIGRATION_UserSpago = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public int ID;

		public int getID() {
			return this.ID;
		}

		public java.util.Date DT_PWD_BEGIN;

		public java.util.Date getDT_PWD_BEGIN() {
			return this.DT_PWD_BEGIN;
		}

		public java.util.Date DT_PWD_END;

		public java.util.Date getDT_PWD_END() {
			return this.DT_PWD_END;
		}

		public Boolean FLG_PWD_BLOCKED;

		public Boolean getFLG_PWD_BLOCKED() {
			return this.FLG_PWD_BLOCKED;
		}

		public java.util.Date DT_LAST_ACCESS;

		public java.util.Date getDT_LAST_ACCESS() {
			return this.DT_LAST_ACCESS;
		}

		public Boolean IS_SUPERADMIN;

		public Boolean getIS_SUPERADMIN() {
			return this.IS_SUPERADMIN;
		}

		public String USER_IN;

		public String getUSER_IN() {
			return this.USER_IN;
		}

		public String USER_UP;

		public String getUSER_UP() {
			return this.USER_UP;
		}

		public String USER_DE;

		public String getUSER_DE() {
			return this.USER_DE;
		}

		public java.util.Date TIME_IN;

		public java.util.Date getTIME_IN() {
			return this.TIME_IN;
		}

		public java.util.Date TIME_UP;

		public java.util.Date getTIME_UP() {
			return this.TIME_UP;
		}

		public java.util.Date TIME_DE;

		public java.util.Date getTIME_DE() {
			return this.TIME_DE;
		}

		public String SBI_VERSION_IN;

		public String getSBI_VERSION_IN() {
			return this.SBI_VERSION_IN;
		}

		public String SBI_VERSION_UP;

		public String getSBI_VERSION_UP() {
			return this.SBI_VERSION_UP;
		}

		public String SBI_VERSION_DE;

		public String getSBI_VERSION_DE() {
			return this.SBI_VERSION_DE;
		}

		public String META_VERSION;

		public String getMETA_VERSION() {
			return this.META_VERSION;
		}

		public String ORGANIZATION;

		public String getORGANIZATION() {
			return this.ORGANIZATION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final userOutStruct other = (userOutStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(userOutStruct other) {

			other.USER_ID = this.USER_ID;
			other.PASSWORD = this.PASSWORD;
			other.FULL_NAME = this.FULL_NAME;
			other.ID = this.ID;
			other.DT_PWD_BEGIN = this.DT_PWD_BEGIN;
			other.DT_PWD_END = this.DT_PWD_END;
			other.FLG_PWD_BLOCKED = this.FLG_PWD_BLOCKED;
			other.DT_LAST_ACCESS = this.DT_LAST_ACCESS;
			other.IS_SUPERADMIN = this.IS_SUPERADMIN;
			other.USER_IN = this.USER_IN;
			other.USER_UP = this.USER_UP;
			other.USER_DE = this.USER_DE;
			other.TIME_IN = this.TIME_IN;
			other.TIME_UP = this.TIME_UP;
			other.TIME_DE = this.TIME_DE;
			other.SBI_VERSION_IN = this.SBI_VERSION_IN;
			other.SBI_VERSION_UP = this.SBI_VERSION_UP;
			other.SBI_VERSION_DE = this.SBI_VERSION_DE;
			other.META_VERSION = this.META_VERSION;
			other.ORGANIZATION = this.ORGANIZATION;

		}

		public void copyKeysDataTo(userOutStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_UserSpago.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_UserSpago.length == 0) {
						commonByteArray_MIGRATION_UserSpago = new byte[1024];
					} else {
						commonByteArray_MIGRATION_UserSpago = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_UserSpago, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_UserSpago, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_UserSpago) {

				try {

					int length = 0;

					this.USER_ID = readString(dis);

					this.PASSWORD = readString(dis);

					this.FULL_NAME = readString(dis);

					this.ID = dis.readInt();

					this.DT_PWD_BEGIN = readDate(dis);

					this.DT_PWD_END = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FLG_PWD_BLOCKED = null;
					} else {
						this.FLG_PWD_BLOCKED = dis.readBoolean();
					}

					this.DT_LAST_ACCESS = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_SUPERADMIN = null;
					} else {
						this.IS_SUPERADMIN = dis.readBoolean();
					}

					this.USER_IN = readString(dis);

					this.USER_UP = readString(dis);

					this.USER_DE = readString(dis);

					this.TIME_IN = readDate(dis);

					this.TIME_UP = readDate(dis);

					this.TIME_DE = readDate(dis);

					this.SBI_VERSION_IN = readString(dis);

					this.SBI_VERSION_UP = readString(dis);

					this.SBI_VERSION_DE = readString(dis);

					this.META_VERSION = readString(dis);

					this.ORGANIZATION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.PASSWORD, dos);

				// String

				writeString(this.FULL_NAME, dos);

				// int

				dos.writeInt(this.ID);

				// java.util.Date

				writeDate(this.DT_PWD_BEGIN, dos);

				// java.util.Date

				writeDate(this.DT_PWD_END, dos);

				// Boolean

				if (this.FLG_PWD_BLOCKED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.FLG_PWD_BLOCKED);
				}

				// java.util.Date

				writeDate(this.DT_LAST_ACCESS, dos);

				// Boolean

				if (this.IS_SUPERADMIN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_SUPERADMIN);
				}

				// String

				writeString(this.USER_IN, dos);

				// String

				writeString(this.USER_UP, dos);

				// String

				writeString(this.USER_DE, dos);

				// java.util.Date

				writeDate(this.TIME_IN, dos);

				// java.util.Date

				writeDate(this.TIME_UP, dos);

				// java.util.Date

				writeDate(this.TIME_DE, dos);

				// String

				writeString(this.SBI_VERSION_IN, dos);

				// String

				writeString(this.SBI_VERSION_UP, dos);

				// String

				writeString(this.SBI_VERSION_DE, dos);

				// String

				writeString(this.META_VERSION, dos);

				// String

				writeString(this.ORGANIZATION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USER_ID=" + USER_ID);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",ID=" + String.valueOf(ID));
			sb.append(",DT_PWD_BEGIN=" + String.valueOf(DT_PWD_BEGIN));
			sb.append(",DT_PWD_END=" + String.valueOf(DT_PWD_END));
			sb.append(",FLG_PWD_BLOCKED=" + String.valueOf(FLG_PWD_BLOCKED));
			sb.append(",DT_LAST_ACCESS=" + String.valueOf(DT_LAST_ACCESS));
			sb.append(",IS_SUPERADMIN=" + String.valueOf(IS_SUPERADMIN));
			sb.append(",USER_IN=" + USER_IN);
			sb.append(",USER_UP=" + USER_UP);
			sb.append(",USER_DE=" + USER_DE);
			sb.append(",TIME_IN=" + String.valueOf(TIME_IN));
			sb.append(",TIME_UP=" + String.valueOf(TIME_UP));
			sb.append(",TIME_DE=" + String.valueOf(TIME_DE));
			sb.append(",SBI_VERSION_IN=" + SBI_VERSION_IN);
			sb.append(",SBI_VERSION_UP=" + SBI_VERSION_UP);
			sb.append(",SBI_VERSION_DE=" + SBI_VERSION_DE);
			sb.append(",META_VERSION=" + META_VERSION);
			sb.append(",ORGANIZATION=" + ORGANIZATION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(userOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class userStruct implements
			routines.system.IPersistableRow<userStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_UserSpago = new byte[0];
		static byte[] commonByteArray_MIGRATION_UserSpago = new byte[0];

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public int ID;

		public int getID() {
			return this.ID;
		}

		public java.util.Date DT_PWD_BEGIN;

		public java.util.Date getDT_PWD_BEGIN() {
			return this.DT_PWD_BEGIN;
		}

		public java.util.Date DT_PWD_END;

		public java.util.Date getDT_PWD_END() {
			return this.DT_PWD_END;
		}

		public Boolean FLG_PWD_BLOCKED;

		public Boolean getFLG_PWD_BLOCKED() {
			return this.FLG_PWD_BLOCKED;
		}

		public java.util.Date DT_LAST_ACCESS;

		public java.util.Date getDT_LAST_ACCESS() {
			return this.DT_LAST_ACCESS;
		}

		public Boolean IS_SUPERADMIN;

		public Boolean getIS_SUPERADMIN() {
			return this.IS_SUPERADMIN;
		}

		public String USER_IN;

		public String getUSER_IN() {
			return this.USER_IN;
		}

		public String USER_UP;

		public String getUSER_UP() {
			return this.USER_UP;
		}

		public String USER_DE;

		public String getUSER_DE() {
			return this.USER_DE;
		}

		public java.util.Date TIME_IN;

		public java.util.Date getTIME_IN() {
			return this.TIME_IN;
		}

		public java.util.Date TIME_UP;

		public java.util.Date getTIME_UP() {
			return this.TIME_UP;
		}

		public java.util.Date TIME_DE;

		public java.util.Date getTIME_DE() {
			return this.TIME_DE;
		}

		public String SBI_VERSION_IN;

		public String getSBI_VERSION_IN() {
			return this.SBI_VERSION_IN;
		}

		public String SBI_VERSION_UP;

		public String getSBI_VERSION_UP() {
			return this.SBI_VERSION_UP;
		}

		public String SBI_VERSION_DE;

		public String getSBI_VERSION_DE() {
			return this.SBI_VERSION_DE;
		}

		public String META_VERSION;

		public String getMETA_VERSION() {
			return this.META_VERSION;
		}

		public String ORGANIZATION;

		public String getORGANIZATION() {
			return this.ORGANIZATION;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_UserSpago.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_UserSpago.length == 0) {
						commonByteArray_MIGRATION_UserSpago = new byte[1024];
					} else {
						commonByteArray_MIGRATION_UserSpago = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_UserSpago, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_UserSpago, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_UserSpago) {

				try {

					int length = 0;

					this.USER_ID = readString(dis);

					this.PASSWORD = readString(dis);

					this.FULL_NAME = readString(dis);

					this.ID = dis.readInt();

					this.DT_PWD_BEGIN = readDate(dis);

					this.DT_PWD_END = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FLG_PWD_BLOCKED = null;
					} else {
						this.FLG_PWD_BLOCKED = dis.readBoolean();
					}

					this.DT_LAST_ACCESS = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_SUPERADMIN = null;
					} else {
						this.IS_SUPERADMIN = dis.readBoolean();
					}

					this.USER_IN = readString(dis);

					this.USER_UP = readString(dis);

					this.USER_DE = readString(dis);

					this.TIME_IN = readDate(dis);

					this.TIME_UP = readDate(dis);

					this.TIME_DE = readDate(dis);

					this.SBI_VERSION_IN = readString(dis);

					this.SBI_VERSION_UP = readString(dis);

					this.SBI_VERSION_DE = readString(dis);

					this.META_VERSION = readString(dis);

					this.ORGANIZATION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.PASSWORD, dos);

				// String

				writeString(this.FULL_NAME, dos);

				// int

				dos.writeInt(this.ID);

				// java.util.Date

				writeDate(this.DT_PWD_BEGIN, dos);

				// java.util.Date

				writeDate(this.DT_PWD_END, dos);

				// Boolean

				if (this.FLG_PWD_BLOCKED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.FLG_PWD_BLOCKED);
				}

				// java.util.Date

				writeDate(this.DT_LAST_ACCESS, dos);

				// Boolean

				if (this.IS_SUPERADMIN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_SUPERADMIN);
				}

				// String

				writeString(this.USER_IN, dos);

				// String

				writeString(this.USER_UP, dos);

				// String

				writeString(this.USER_DE, dos);

				// java.util.Date

				writeDate(this.TIME_IN, dos);

				// java.util.Date

				writeDate(this.TIME_UP, dos);

				// java.util.Date

				writeDate(this.TIME_DE, dos);

				// String

				writeString(this.SBI_VERSION_IN, dos);

				// String

				writeString(this.SBI_VERSION_UP, dos);

				// String

				writeString(this.SBI_VERSION_DE, dos);

				// String

				writeString(this.META_VERSION, dos);

				// String

				writeString(this.ORGANIZATION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USER_ID=" + USER_ID);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",ID=" + String.valueOf(ID));
			sb.append(",DT_PWD_BEGIN=" + String.valueOf(DT_PWD_BEGIN));
			sb.append(",DT_PWD_END=" + String.valueOf(DT_PWD_END));
			sb.append(",FLG_PWD_BLOCKED=" + String.valueOf(FLG_PWD_BLOCKED));
			sb.append(",DT_LAST_ACCESS=" + String.valueOf(DT_LAST_ACCESS));
			sb.append(",IS_SUPERADMIN=" + String.valueOf(IS_SUPERADMIN));
			sb.append(",USER_IN=" + USER_IN);
			sb.append(",USER_UP=" + USER_UP);
			sb.append(",USER_DE=" + USER_DE);
			sb.append(",TIME_IN=" + String.valueOf(TIME_IN));
			sb.append(",TIME_UP=" + String.valueOf(TIME_UP));
			sb.append(",TIME_DE=" + String.valueOf(TIME_DE));
			sb.append(",SBI_VERSION_IN=" + SBI_VERSION_IN);
			sb.append(",SBI_VERSION_UP=" + SBI_VERSION_UP);
			sb.append(",SBI_VERSION_DE=" + SBI_VERSION_DE);
			sb.append(",META_VERSION=" + META_VERSION);
			sb.append(",ORGANIZATION=" + ORGANIZATION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(userStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap,String login,String encryptedPassword)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				userStruct user = new userStruct();
				userOutStruct userOut = new userOutStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_userOut = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_userOut.putIfAbsent("userOut"
							+ iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_userOut = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_userOut
							.get("userOut" + iterateLoop);
					runStat.updateStatOnConnection("userOut" + iterateId,
							stats_userOut.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "SBI_USER";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = ini.getUrlSpago()
		                     + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = ini.getUrlSpago() + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = ini.getUserName();
				String dbPwd_tMysqlOutput_1 = ini.getPassword();
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String insertIgnore_tMysqlOutput_1 = "INSERT IGNORE INTO `"
						+ "SBI_USER"
						+ "` (`USER_ID`,`PASSWORD`,`FULL_NAME`,`ID`,`DT_PWD_BEGIN`,`DT_PWD_END`,`FLG_PWD_BLOCKED`,`DT_LAST_ACCESS`,`IS_SUPERADMIN`,`USER_IN`,`USER_UP`,`USER_DE`,`TIME_IN`,`TIME_UP`,`TIME_DE`,`SBI_VERSION_IN`,`SBI_VERSION_UP`,`SBI_VERSION_DE`,`META_VERSION`,`ORGANIZATION`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `USER_ID` = ?,`PASSWORD` = ?,`FULL_NAME` = ?,`DT_PWD_BEGIN` = ?,`DT_PWD_END` = ?,`FLG_PWD_BLOCKED` = ?,`DT_LAST_ACCESS` = ?,`IS_SUPERADMIN` = ?,`USER_IN` = ?,`USER_UP` = ?,`USER_DE` = ?,`TIME_IN` = ?,`TIME_UP` = ?,`TIME_DE` = ?,`SBI_VERSION_IN` = ?,`SBI_VERSION_UP` = ?,`SBI_VERSION_DE` = ?,`META_VERSION` = ?,`ORGANIZATION` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insertIgnore_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_user = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_user.putIfAbsent("user" + iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_user = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_user
							.get("user" + iterateLoop);
					runStat.updateStatOnConnection("user" + iterateId,
							stats_user.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					int id;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				userOutStruct userOut_tmp = new userOutStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = ini.getUserName();
				String dbPwd_tMysqlInput_1 = ini.getPassword();

				String url_tMysqlInput_1 = ini.getUrlSpago() + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT    `SBI_USER`.`USER_ID`,    `SBI_USER`.`PASSWORD`,    `SBI_USER`.`FULL_NAME`,    `SBI_USER`.`ID`,    `SBI_USER`.`DT_PWD_BEGIN`,    `SBI_USER`.`DT_PWD_END`,    `SBI_USER`.`FLG_PWD_BLOCKED`,    `SBI_USER`.`DT_LAST_ACCESS`,    `SBI_USER`.`IS_SUPERADMIN`,    `SBI_USER`.`USER_IN`,    `SBI_USER`.`USER_UP`,    `SBI_USER`.`USER_DE`,    `SBI_USER`.`TIME_IN`,    `SBI_USER`.`TIME_UP`,    `SBI_USER`.`TIME_DE`,    `SBI_USER`.`SBI_VERSION_IN`,    `SBI_USER`.`SBI_VERSION_UP`,    `SBI_USER`.`SBI_VERSION_DE`,    `SBI_USER`.`META_VERSION`,    `SBI_USER`.`ORGANIZATION` FROM `SBI_USER` where `SBI_USER`.`ID` = (select max(`SBI_USER`.`ID`) FROM `SBI_USER`)  ";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;
					int column_index_tMysqlInput_1 = 1;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						column_index_tMysqlInput_1 = 1;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.USER_ID = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.USER_ID = tmpContent_tMysqlInput_1;
							} else {
								user.USER_ID = null;
							}

						}

						column_index_tMysqlInput_1 = 2;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.PASSWORD = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.PASSWORD = tmpContent_tMysqlInput_1;
							} else {
								user.PASSWORD = null;
							}

						}

						column_index_tMysqlInput_1 = 3;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.FULL_NAME = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.FULL_NAME = tmpContent_tMysqlInput_1;
							} else {
								user.FULL_NAME = null;
							}

						}

						column_index_tMysqlInput_1 = 4;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.ID = 0;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								user.ID = rs_tMysqlInput_1
										.getInt(column_index_tMysqlInput_1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_1 = 5;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.DT_PWD_BEGIN = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.DT_PWD_BEGIN = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.DT_PWD_BEGIN = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.DT_PWD_BEGIN = null;
							}

						}

						column_index_tMysqlInput_1 = 6;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.DT_PWD_END = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.DT_PWD_END = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.DT_PWD_END = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.DT_PWD_END = null;
							}

						}

						column_index_tMysqlInput_1 = 7;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.FLG_PWD_BLOCKED = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								user.FLG_PWD_BLOCKED = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								user.FLG_PWD_BLOCKED = null;
							}

						}

						column_index_tMysqlInput_1 = 8;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.DT_LAST_ACCESS = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.DT_LAST_ACCESS = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.DT_LAST_ACCESS = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.DT_LAST_ACCESS = null;
							}

						}

						column_index_tMysqlInput_1 = 9;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.IS_SUPERADMIN = null;
						} else {

							if (rs_tMysqlInput_1
									.getObject(column_index_tMysqlInput_1) != null) {
								user.IS_SUPERADMIN = rs_tMysqlInput_1
										.getBoolean(column_index_tMysqlInput_1);
							} else {
								user.IS_SUPERADMIN = null;
							}

						}

						column_index_tMysqlInput_1 = 10;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.USER_IN = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.USER_IN = tmpContent_tMysqlInput_1;
							} else {
								user.USER_IN = null;
							}

						}

						column_index_tMysqlInput_1 = 11;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.USER_UP = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.USER_UP = tmpContent_tMysqlInput_1;
							} else {
								user.USER_UP = null;
							}

						}

						column_index_tMysqlInput_1 = 12;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.USER_DE = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.USER_DE = tmpContent_tMysqlInput_1;
							} else {
								user.USER_DE = null;
							}

						}

						column_index_tMysqlInput_1 = 13;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.TIME_IN = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.TIME_IN = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.TIME_IN = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.TIME_IN = null;
							}

						}

						column_index_tMysqlInput_1 = 14;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.TIME_UP = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.TIME_UP = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.TIME_UP = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.TIME_UP = null;
							}

						}

						column_index_tMysqlInput_1 = 15;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.TIME_DE = null;
						} else {

							if (rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(column_index_tMysqlInput_1);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									user.TIME_DE = rs_tMysqlInput_1
											.getTimestamp(column_index_tMysqlInput_1);
								} else {
									user.TIME_DE = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								user.TIME_DE = null;
							}

						}

						column_index_tMysqlInput_1 = 16;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.SBI_VERSION_IN = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.SBI_VERSION_IN = tmpContent_tMysqlInput_1;
							} else {
								user.SBI_VERSION_IN = null;
							}

						}

						column_index_tMysqlInput_1 = 17;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.SBI_VERSION_UP = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.SBI_VERSION_UP = tmpContent_tMysqlInput_1;
							} else {
								user.SBI_VERSION_UP = null;
							}

						}

						column_index_tMysqlInput_1 = 18;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.SBI_VERSION_DE = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.SBI_VERSION_DE = tmpContent_tMysqlInput_1;
							} else {
								user.SBI_VERSION_DE = null;
							}

						}

						column_index_tMysqlInput_1 = 19;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.META_VERSION = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.META_VERSION = tmpContent_tMysqlInput_1;
							} else {
								user.META_VERSION = null;
							}

						}

						column_index_tMysqlInput_1 = 20;

						if (colQtyInRs_tMysqlInput_1 < column_index_tMysqlInput_1) {
							user.ORGANIZATION = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(column_index_tMysqlInput_1);
							if (tmpContent_tMysqlInput_1 != null) {
								user.ORGANIZATION = tmpContent_tMysqlInput_1;
							} else {
								user.ORGANIZATION = null;
							}

						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */
						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// user
						// user

						if (execStat) {
							runStat.updateStatOnConnection("user" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;
							Var.id = user.ID + 1;// ###############################
							// ###############################
							// # Output tables

							userOut = null;

							// # Output table : 'userOut'
							userOut_tmp.USER_ID = login;
							userOut_tmp.PASSWORD = encryptedPassword;
							userOut_tmp.FULL_NAME = "spagoUser" + Var.id;
							userOut_tmp.ID = Var.id;
							userOut_tmp.DT_PWD_BEGIN = null;
							userOut_tmp.DT_PWD_END = null;
							userOut_tmp.FLG_PWD_BLOCKED = null;
							userOut_tmp.DT_LAST_ACCESS = TalendDate.parseDate(
									"yyyy-MM-dd HH:mm:ss",
									"2014-06-09 13:02:09");
							userOut_tmp.IS_SUPERADMIN = false;
							userOut_tmp.USER_IN = "server";
							userOut_tmp.USER_UP = "biadmin";
							userOut_tmp.USER_DE = null;
							userOut_tmp.TIME_IN = TalendDate.parseDate(
									"yyyy-MM-dd HH:mm:ss",
									"2014-05-29 10:00:19");
							userOut_tmp.TIME_UP = TalendDate.parseDate(
									"yyyy-MM-dd HH:mm:ss",
									"2014-06-04 17:48:14");
							userOut_tmp.TIME_DE = null;
							userOut_tmp.SBI_VERSION_IN = "4.0";
							userOut_tmp.SBI_VERSION_UP = "4.0";
							userOut_tmp.SBI_VERSION_DE = null;
							userOut_tmp.META_VERSION = null;
							userOut_tmp.ORGANIZATION = "SPAGOBI";
							userOut = userOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "userOut"
						if (userOut != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							// userOut
							// userOut

							if (execStat) {
								runStat.updateStatOnConnection("userOut"
										+ iterateId, 1, 1);
							}

							whetherReject_tMysqlOutput_1 = false;
							if (userOut.USER_ID == null) {
								pstmt_tMysqlOutput_1.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(1,
										userOut.USER_ID);
							}

							if (userOut.PASSWORD == null) {
								pstmt_tMysqlOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(2,
										userOut.PASSWORD);
							}

							if (userOut.FULL_NAME == null) {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(3,
										userOut.FULL_NAME);
							}

							pstmt_tMysqlOutput_1.setInt(4, userOut.ID);

							if (userOut.DT_PWD_BEGIN != null) {
								date_tMysqlOutput_1 = userOut.DT_PWD_BEGIN
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(5,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.DATE);
							}

							if (userOut.DT_PWD_END != null) {
								date_tMysqlOutput_1 = userOut.DT_PWD_END
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(6,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(6,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.DATE);
							}

							if (userOut.FLG_PWD_BLOCKED == null) {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(7,
										userOut.FLG_PWD_BLOCKED);
							}

							if (userOut.DT_LAST_ACCESS != null) {
								date_tMysqlOutput_1 = userOut.DT_LAST_ACCESS
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(8,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(8,
										java.sql.Types.DATE);
							}

							if (userOut.IS_SUPERADMIN == null) {
								pstmt_tMysqlOutput_1.setNull(9,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(9,
										userOut.IS_SUPERADMIN);
							}

							if (userOut.USER_IN == null) {
								pstmt_tMysqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(10,
										userOut.USER_IN);
							}

							if (userOut.USER_UP == null) {
								pstmt_tMysqlOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(11,
										userOut.USER_UP);
							}

							if (userOut.USER_DE == null) {
								pstmt_tMysqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(12,
										userOut.USER_DE);
							}

							if (userOut.TIME_IN != null) {
								date_tMysqlOutput_1 = userOut.TIME_IN.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(13,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(13,
										java.sql.Types.DATE);
							}

							if (userOut.TIME_UP != null) {
								date_tMysqlOutput_1 = userOut.TIME_UP.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(14,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(14,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(14,
										java.sql.Types.DATE);
							}

							if (userOut.TIME_DE != null) {
								date_tMysqlOutput_1 = userOut.TIME_DE.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(15,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(15,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(15,
										java.sql.Types.DATE);
							}

							if (userOut.SBI_VERSION_IN == null) {
								pstmt_tMysqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(16,
										userOut.SBI_VERSION_IN);
							}

							if (userOut.SBI_VERSION_UP == null) {
								pstmt_tMysqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(17,
										userOut.SBI_VERSION_UP);
							}

							if (userOut.SBI_VERSION_DE == null) {
								pstmt_tMysqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(18,
										userOut.SBI_VERSION_DE);
							}

							if (userOut.META_VERSION == null) {
								pstmt_tMysqlOutput_1.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(19,
										userOut.META_VERSION);
							}

							if (userOut.ORGANIZATION == null) {
								pstmt_tMysqlOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(20,
										userOut.ORGANIZATION);
							}

							if (userOut.USER_ID == null) {
								pstmt_tMysqlOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(21,
										userOut.USER_ID);
							}

							if (userOut.PASSWORD == null) {
								pstmt_tMysqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(22,
										userOut.PASSWORD);
							}

							if (userOut.FULL_NAME == null) {
								pstmt_tMysqlOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(23,
										userOut.FULL_NAME);
							}

							if (userOut.DT_PWD_BEGIN != null) {
								date_tMysqlOutput_1 = userOut.DT_PWD_BEGIN
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(24,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(24,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(24,
										java.sql.Types.DATE);
							}

							if (userOut.DT_PWD_END != null) {
								date_tMysqlOutput_1 = userOut.DT_PWD_END
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(25,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(25,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(25,
										java.sql.Types.DATE);
							}

							if (userOut.FLG_PWD_BLOCKED == null) {
								pstmt_tMysqlOutput_1.setNull(26,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(26,
										userOut.FLG_PWD_BLOCKED);
							}

							if (userOut.DT_LAST_ACCESS != null) {
								date_tMysqlOutput_1 = userOut.DT_LAST_ACCESS
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(27,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(27,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(27,
										java.sql.Types.DATE);
							}

							if (userOut.IS_SUPERADMIN == null) {
								pstmt_tMysqlOutput_1.setNull(28,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tMysqlOutput_1.setBoolean(28,
										userOut.IS_SUPERADMIN);
							}

							if (userOut.USER_IN == null) {
								pstmt_tMysqlOutput_1.setNull(29,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(29,
										userOut.USER_IN);
							}

							if (userOut.USER_UP == null) {
								pstmt_tMysqlOutput_1.setNull(30,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(30,
										userOut.USER_UP);
							}

							if (userOut.USER_DE == null) {
								pstmt_tMysqlOutput_1.setNull(31,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(31,
										userOut.USER_DE);
							}

							if (userOut.TIME_IN != null) {
								date_tMysqlOutput_1 = userOut.TIME_IN.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(32,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(32,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(32,
										java.sql.Types.DATE);
							}

							if (userOut.TIME_UP != null) {
								date_tMysqlOutput_1 = userOut.TIME_UP.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(33,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(33,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(33,
										java.sql.Types.DATE);
							}

							if (userOut.TIME_DE != null) {
								date_tMysqlOutput_1 = userOut.TIME_DE.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(34,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(34,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(34,
										java.sql.Types.DATE);
							}

							if (userOut.SBI_VERSION_IN == null) {
								pstmt_tMysqlOutput_1.setNull(35,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(35,
										userOut.SBI_VERSION_IN);
							}

							if (userOut.SBI_VERSION_UP == null) {
								pstmt_tMysqlOutput_1.setNull(36,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(36,
										userOut.SBI_VERSION_UP);
							}

							if (userOut.SBI_VERSION_DE == null) {
								pstmt_tMysqlOutput_1.setNull(37,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(37,
										userOut.SBI_VERSION_DE);
							}

							if (userOut.META_VERSION == null) {
								pstmt_tMysqlOutput_1.setNull(38,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(38,
										userOut.META_VERSION);
							}

							if (userOut.ORGANIZATION == null) {
								pstmt_tMysqlOutput_1.setNull(39,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(39,
										userOut.ORGANIZATION);
							}

							int count_on_duplicate_key_tMysqlOutput_1 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_1 = pstmt_tMysqlOutput_1
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_1 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_1 == 1) {
								insertedCount_tMysqlOutput_1 += count_on_duplicate_key_tMysqlOutput_1;
							} else {
								insertedCount_tMysqlOutput_1 += 1;
								updatedCount_tMysqlOutput_1 += count_on_duplicate_key_tMysqlOutput_1 - 1;
							}
							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								conn_tMysqlOutput_1.commit();

								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "userOut"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					rs_tMysqlInput_1.close();
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					runStat.updateStatOnConnection("user" + iterateId, 2, 0);
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				if (execStat) {
					runStat.updateStatOnConnection("userOut" + iterateId, 2, 0);
				}

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMysqlInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class userRoleOutStruct implements
			routines.system.IPersistableRow<userRoleOutStruct> {
		final static byte[] commonByteArrayLock_MIGRATION_UserSpago = new byte[0];
		static byte[] commonByteArray_MIGRATION_UserSpago = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public int EXT_ROLE_ID;

		public int getEXT_ROLE_ID() {
			return this.EXT_ROLE_ID;
		}

		public String USER_IN;

		public String getUSER_IN() {
			return this.USER_IN;
		}

		public String USER_UP;

		public String getUSER_UP() {
			return this.USER_UP;
		}

		public String USER_DE;

		public String getUSER_DE() {
			return this.USER_DE;
		}

		public java.util.Date TIME_IN;

		public java.util.Date getTIME_IN() {
			return this.TIME_IN;
		}

		public java.util.Date TIME_UP;

		public java.util.Date getTIME_UP() {
			return this.TIME_UP;
		}

		public java.util.Date TIME_DE;

		public java.util.Date getTIME_DE() {
			return this.TIME_DE;
		}

		public String SBI_VERSION_IN;

		public String getSBI_VERSION_IN() {
			return this.SBI_VERSION_IN;
		}

		public String SBI_VERSION_UP;

		public String getSBI_VERSION_UP() {
			return this.SBI_VERSION_UP;
		}

		public String SBI_VERSION_DE;

		public String getSBI_VERSION_DE() {
			return this.SBI_VERSION_DE;
		}

		public String META_VERSION;

		public String getMETA_VERSION() {
			return this.META_VERSION;
		}

		public String ORGANIZATION;

		public String getORGANIZATION() {
			return this.ORGANIZATION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				result = prime * result + (int) this.EXT_ROLE_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final userRoleOutStruct other = (userRoleOutStruct) obj;

			if (this.ID != other.ID)
				return false;

			if (this.EXT_ROLE_ID != other.EXT_ROLE_ID)
				return false;

			return true;
		}

		public void copyDataTo(userRoleOutStruct other) {

			other.ID = this.ID;
			other.EXT_ROLE_ID = this.EXT_ROLE_ID;
			other.USER_IN = this.USER_IN;
			other.USER_UP = this.USER_UP;
			other.USER_DE = this.USER_DE;
			other.TIME_IN = this.TIME_IN;
			other.TIME_UP = this.TIME_UP;
			other.TIME_DE = this.TIME_DE;
			other.SBI_VERSION_IN = this.SBI_VERSION_IN;
			other.SBI_VERSION_UP = this.SBI_VERSION_UP;
			other.SBI_VERSION_DE = this.SBI_VERSION_DE;
			other.META_VERSION = this.META_VERSION;
			other.ORGANIZATION = this.ORGANIZATION;

		}

		public void copyKeysDataTo(userRoleOutStruct other) {

			other.ID = this.ID;
			other.EXT_ROLE_ID = this.EXT_ROLE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_UserSpago.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_UserSpago.length == 0) {
						commonByteArray_MIGRATION_UserSpago = new byte[1024];
					} else {
						commonByteArray_MIGRATION_UserSpago = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_UserSpago, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_UserSpago, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_UserSpago) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.EXT_ROLE_ID = dis.readInt();

					this.USER_IN = readString(dis);

					this.USER_UP = readString(dis);

					this.USER_DE = readString(dis);

					this.TIME_IN = readDate(dis);

					this.TIME_UP = readDate(dis);

					this.TIME_DE = readDate(dis);

					this.SBI_VERSION_IN = readString(dis);

					this.SBI_VERSION_UP = readString(dis);

					this.SBI_VERSION_DE = readString(dis);

					this.META_VERSION = readString(dis);

					this.ORGANIZATION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// int

				dos.writeInt(this.EXT_ROLE_ID);

				// String

				writeString(this.USER_IN, dos);

				// String

				writeString(this.USER_UP, dos);

				// String

				writeString(this.USER_DE, dos);

				// java.util.Date

				writeDate(this.TIME_IN, dos);

				// java.util.Date

				writeDate(this.TIME_UP, dos);

				// java.util.Date

				writeDate(this.TIME_DE, dos);

				// String

				writeString(this.SBI_VERSION_IN, dos);

				// String

				writeString(this.SBI_VERSION_UP, dos);

				// String

				writeString(this.SBI_VERSION_DE, dos);

				// String

				writeString(this.META_VERSION, dos);

				// String

				writeString(this.ORGANIZATION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",EXT_ROLE_ID=" + String.valueOf(EXT_ROLE_ID));
			sb.append(",USER_IN=" + USER_IN);
			sb.append(",USER_UP=" + USER_UP);
			sb.append(",USER_DE=" + USER_DE);
			sb.append(",TIME_IN=" + String.valueOf(TIME_IN));
			sb.append(",TIME_UP=" + String.valueOf(TIME_UP));
			sb.append(",TIME_DE=" + String.valueOf(TIME_DE));
			sb.append(",SBI_VERSION_IN=" + SBI_VERSION_IN);
			sb.append(",SBI_VERSION_UP=" + SBI_VERSION_UP);
			sb.append(",SBI_VERSION_DE=" + SBI_VERSION_DE);
			sb.append(",META_VERSION=" + META_VERSION);
			sb.append(",ORGANIZATION=" + ORGANIZATION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(userRoleOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.EXT_ROLE_ID,
					other.EXT_ROLE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class user2Struct implements
			routines.system.IPersistableRow<user2Struct> {
		final static byte[] commonByteArrayLock_MIGRATION_UserSpago = new byte[0];
		static byte[] commonByteArray_MIGRATION_UserSpago = new byte[0];

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		public int ID;

		public int getID() {
			return this.ID;
		}

		public java.util.Date DT_PWD_BEGIN;

		public java.util.Date getDT_PWD_BEGIN() {
			return this.DT_PWD_BEGIN;
		}

		public java.util.Date DT_PWD_END;

		public java.util.Date getDT_PWD_END() {
			return this.DT_PWD_END;
		}

		public Boolean FLG_PWD_BLOCKED;

		public Boolean getFLG_PWD_BLOCKED() {
			return this.FLG_PWD_BLOCKED;
		}

		public java.util.Date DT_LAST_ACCESS;

		public java.util.Date getDT_LAST_ACCESS() {
			return this.DT_LAST_ACCESS;
		}

		public Boolean IS_SUPERADMIN;

		public Boolean getIS_SUPERADMIN() {
			return this.IS_SUPERADMIN;
		}

		public String USER_IN;

		public String getUSER_IN() {
			return this.USER_IN;
		}

		public String USER_UP;

		public String getUSER_UP() {
			return this.USER_UP;
		}

		public String USER_DE;

		public String getUSER_DE() {
			return this.USER_DE;
		}

		public java.util.Date TIME_IN;

		public java.util.Date getTIME_IN() {
			return this.TIME_IN;
		}

		public java.util.Date TIME_UP;

		public java.util.Date getTIME_UP() {
			return this.TIME_UP;
		}

		public java.util.Date TIME_DE;

		public java.util.Date getTIME_DE() {
			return this.TIME_DE;
		}

		public String SBI_VERSION_IN;

		public String getSBI_VERSION_IN() {
			return this.SBI_VERSION_IN;
		}

		public String SBI_VERSION_UP;

		public String getSBI_VERSION_UP() {
			return this.SBI_VERSION_UP;
		}

		public String SBI_VERSION_DE;

		public String getSBI_VERSION_DE() {
			return this.SBI_VERSION_DE;
		}

		public String META_VERSION;

		public String getMETA_VERSION() {
			return this.META_VERSION;
		}

		public String ORGANIZATION;

		public String getORGANIZATION() {
			return this.ORGANIZATION;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRATION_UserSpago.length) {
					if (length < 1024
							&& commonByteArray_MIGRATION_UserSpago.length == 0) {
						commonByteArray_MIGRATION_UserSpago = new byte[1024];
					} else {
						commonByteArray_MIGRATION_UserSpago = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRATION_UserSpago, 0, length);
				strReturn = new String(commonByteArray_MIGRATION_UserSpago, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRATION_UserSpago) {

				try {

					int length = 0;

					this.USER_ID = readString(dis);

					this.PASSWORD = readString(dis);

					this.FULL_NAME = readString(dis);

					this.ID = dis.readInt();

					this.DT_PWD_BEGIN = readDate(dis);

					this.DT_PWD_END = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FLG_PWD_BLOCKED = null;
					} else {
						this.FLG_PWD_BLOCKED = dis.readBoolean();
					}

					this.DT_LAST_ACCESS = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_SUPERADMIN = null;
					} else {
						this.IS_SUPERADMIN = dis.readBoolean();
					}

					this.USER_IN = readString(dis);

					this.USER_UP = readString(dis);

					this.USER_DE = readString(dis);

					this.TIME_IN = readDate(dis);

					this.TIME_UP = readDate(dis);

					this.TIME_DE = readDate(dis);

					this.SBI_VERSION_IN = readString(dis);

					this.SBI_VERSION_UP = readString(dis);

					this.SBI_VERSION_DE = readString(dis);

					this.META_VERSION = readString(dis);

					this.ORGANIZATION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.PASSWORD, dos);

				// String

				writeString(this.FULL_NAME, dos);

				// int

				dos.writeInt(this.ID);

				// java.util.Date

				writeDate(this.DT_PWD_BEGIN, dos);

				// java.util.Date

				writeDate(this.DT_PWD_END, dos);

				// Boolean

				if (this.FLG_PWD_BLOCKED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.FLG_PWD_BLOCKED);
				}

				// java.util.Date

				writeDate(this.DT_LAST_ACCESS, dos);

				// Boolean

				if (this.IS_SUPERADMIN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_SUPERADMIN);
				}

				// String

				writeString(this.USER_IN, dos);

				// String

				writeString(this.USER_UP, dos);

				// String

				writeString(this.USER_DE, dos);

				// java.util.Date

				writeDate(this.TIME_IN, dos);

				// java.util.Date

				writeDate(this.TIME_UP, dos);

				// java.util.Date

				writeDate(this.TIME_DE, dos);

				// String

				writeString(this.SBI_VERSION_IN, dos);

				// String

				writeString(this.SBI_VERSION_UP, dos);

				// String

				writeString(this.SBI_VERSION_DE, dos);

				// String

				writeString(this.META_VERSION, dos);

				// String

				writeString(this.ORGANIZATION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("USER_ID=" + USER_ID);
			sb.append(",PASSWORD=" + PASSWORD);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append(",ID=" + String.valueOf(ID));
			sb.append(",DT_PWD_BEGIN=" + String.valueOf(DT_PWD_BEGIN));
			sb.append(",DT_PWD_END=" + String.valueOf(DT_PWD_END));
			sb.append(",FLG_PWD_BLOCKED=" + String.valueOf(FLG_PWD_BLOCKED));
			sb.append(",DT_LAST_ACCESS=" + String.valueOf(DT_LAST_ACCESS));
			sb.append(",IS_SUPERADMIN=" + String.valueOf(IS_SUPERADMIN));
			sb.append(",USER_IN=" + USER_IN);
			sb.append(",USER_UP=" + USER_UP);
			sb.append(",USER_DE=" + USER_DE);
			sb.append(",TIME_IN=" + String.valueOf(TIME_IN));
			sb.append(",TIME_UP=" + String.valueOf(TIME_UP));
			sb.append(",TIME_DE=" + String.valueOf(TIME_DE));
			sb.append(",SBI_VERSION_IN=" + SBI_VERSION_IN);
			sb.append(",SBI_VERSION_UP=" + SBI_VERSION_UP);
			sb.append(",SBI_VERSION_DE=" + SBI_VERSION_DE);
			sb.append(",META_VERSION=" + META_VERSION);
			sb.append(",ORGANIZATION=" + ORGANIZATION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(user2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				user2Struct user2 = new user2Struct();
				userRoleOutStruct userRoleOut = new userRoleOutStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_userRoleOut = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_userRoleOut.putIfAbsent("userRoleOut"
							+ iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_userRoleOut = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_userRoleOut
							.get("userRoleOut" + iterateLoop);
					runStat.updateStatOnConnection("userRoleOut" + iterateId,
							stats_userRoleOut.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "SBI_EXT_USER_ROLES";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = ini.getUrlSpago() + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = ini.getUrlSpago() + "?"
							+ properties_tMysqlOutput_2;
				}
				String dbUser_tMysqlOutput_2 = ini.getUserName();
				String dbPwd_tMysqlOutput_2 = ini.getPassword();
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insertIgnore_tMysqlOutput_2 = "INSERT IGNORE INTO `"
						+ "SBI_EXT_USER_ROLES"
						+ "` (`ID`,`EXT_ROLE_ID`,`USER_IN`,`USER_UP`,`USER_DE`,`TIME_IN`,`TIME_UP`,`TIME_DE`,`SBI_VERSION_IN`,`SBI_VERSION_UP`,`SBI_VERSION_DE`,`META_VERSION`,`ORGANIZATION`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `USER_IN` = ?,`USER_UP` = ?,`USER_DE` = ?,`TIME_IN` = ?,`TIME_UP` = ?,`TIME_DE` = ?,`SBI_VERSION_IN` = ?,`SBI_VERSION_UP` = ?,`SBI_VERSION_DE` = ?,`META_VERSION` = ?,`ORGANIZATION` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insertIgnore_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_user2 = (java.util.concurrent.ConcurrentHashMap) globalMap
							.get("concurrentHashMap");
					concurrentHashMap_user2.putIfAbsent("user2" + iterateLoop,
							new java.util.concurrent.atomic.AtomicInteger(0));
					java.util.concurrent.atomic.AtomicInteger stats_user2 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_user2
							.get("user2" + iterateLoop);
					runStat.updateStatOnConnection("user2" + iterateId,
							stats_user2.incrementAndGet() <= 1 ? 0 : 1, 0);
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
					int id;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				userRoleOutStruct userRoleOut_tmp = new userRoleOutStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_3 = ini.getPassword();
				String dbPwd_tMysqlInput_3 = ini.getPassword();

				String url_tMysqlInput_3 = ini.getUrlSpago() + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_3, dbUser_tMysqlInput_3,
						dbPwd_tMysqlInput_3);

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT    `SBI_USER`.`USER_ID`,    `SBI_USER`.`PASSWORD`,    `SBI_USER`.`FULL_NAME`,    `SBI_USER`.`ID`,    `SBI_USER`.`DT_PWD_BEGIN`,    `SBI_USER`.`DT_PWD_END`,    `SBI_USER`.`FLG_PWD_BLOCKED`,    `SBI_USER`.`DT_LAST_ACCESS`,    `SBI_USER`.`IS_SUPERADMIN`,    `SBI_USER`.`USER_IN`,    `SBI_USER`.`USER_UP`,    `SBI_USER`.`USER_DE`,    `SBI_USER`.`TIME_IN`,    `SBI_USER`.`TIME_UP`,    `SBI_USER`.`TIME_DE`,    `SBI_USER`.`SBI_VERSION_IN`,    `SBI_USER`.`SBI_VERSION_UP`,    `SBI_USER`.`SBI_VERSION_DE`,    `SBI_USER`.`META_VERSION`,    `SBI_USER`.`ORGANIZATION` FROM `SBI_USER` where `SBI_USER`.`ID` = (select max(`SBI_USER`.`ID`) FROM `SBI_USER`)  ";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);
				java.sql.ResultSet rs_tMysqlInput_3 = null;
				try {
					rs_tMysqlInput_3 = stmt_tMysqlInput_3
							.executeQuery(dbquery_tMysqlInput_3);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
							.getMetaData();
					int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
							.getColumnCount();

					String tmpContent_tMysqlInput_3 = null;
					int column_index_tMysqlInput_3 = 1;

					while (rs_tMysqlInput_3.next()) {
						nb_line_tMysqlInput_3++;

						column_index_tMysqlInput_3 = 1;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.USER_ID = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.USER_ID = tmpContent_tMysqlInput_3;
							} else {
								user2.USER_ID = null;
							}

						}

						column_index_tMysqlInput_3 = 2;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.PASSWORD = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.PASSWORD = tmpContent_tMysqlInput_3;
							} else {
								user2.PASSWORD = null;
							}

						}

						column_index_tMysqlInput_3 = 3;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.FULL_NAME = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.FULL_NAME = tmpContent_tMysqlInput_3;
							} else {
								user2.FULL_NAME = null;
							}

						}

						column_index_tMysqlInput_3 = 4;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.ID = 0;
						} else {

							if (rs_tMysqlInput_3
									.getObject(column_index_tMysqlInput_3) != null) {
								user2.ID = rs_tMysqlInput_3
										.getInt(column_index_tMysqlInput_3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tMysqlInput_3 = 5;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.DT_PWD_BEGIN = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.DT_PWD_BEGIN = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.DT_PWD_BEGIN = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.DT_PWD_BEGIN = null;
							}

						}

						column_index_tMysqlInput_3 = 6;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.DT_PWD_END = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.DT_PWD_END = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.DT_PWD_END = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.DT_PWD_END = null;
							}

						}

						column_index_tMysqlInput_3 = 7;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.FLG_PWD_BLOCKED = null;
						} else {

							if (rs_tMysqlInput_3
									.getObject(column_index_tMysqlInput_3) != null) {
								user2.FLG_PWD_BLOCKED = rs_tMysqlInput_3
										.getBoolean(column_index_tMysqlInput_3);
							} else {
								user2.FLG_PWD_BLOCKED = null;
							}

						}

						column_index_tMysqlInput_3 = 8;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.DT_LAST_ACCESS = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.DT_LAST_ACCESS = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.DT_LAST_ACCESS = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.DT_LAST_ACCESS = null;
							}

						}

						column_index_tMysqlInput_3 = 9;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.IS_SUPERADMIN = null;
						} else {

							if (rs_tMysqlInput_3
									.getObject(column_index_tMysqlInput_3) != null) {
								user2.IS_SUPERADMIN = rs_tMysqlInput_3
										.getBoolean(column_index_tMysqlInput_3);
							} else {
								user2.IS_SUPERADMIN = null;
							}

						}

						column_index_tMysqlInput_3 = 10;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.USER_IN = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.USER_IN = tmpContent_tMysqlInput_3;
							} else {
								user2.USER_IN = null;
							}

						}

						column_index_tMysqlInput_3 = 11;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.USER_UP = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.USER_UP = tmpContent_tMysqlInput_3;
							} else {
								user2.USER_UP = null;
							}

						}

						column_index_tMysqlInput_3 = 12;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.USER_DE = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.USER_DE = tmpContent_tMysqlInput_3;
							} else {
								user2.USER_DE = null;
							}

						}

						column_index_tMysqlInput_3 = 13;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.TIME_IN = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.TIME_IN = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.TIME_IN = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.TIME_IN = null;
							}

						}

						column_index_tMysqlInput_3 = 14;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.TIME_UP = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.TIME_UP = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.TIME_UP = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.TIME_UP = null;
							}

						}

						column_index_tMysqlInput_3 = 15;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.TIME_DE = null;
						} else {

							if (rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3) != null) {
								String dateString_tMysqlInput_3 = rs_tMysqlInput_3
										.getString(column_index_tMysqlInput_3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_3)) {
									user2.TIME_DE = rs_tMysqlInput_3
											.getTimestamp(column_index_tMysqlInput_3);
								} else {
									user2.TIME_DE = (java.util.Date) year0_tMysqlInput_3
											.clone();
								}
							} else {
								user2.TIME_DE = null;
							}

						}

						column_index_tMysqlInput_3 = 16;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.SBI_VERSION_IN = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.SBI_VERSION_IN = tmpContent_tMysqlInput_3;
							} else {
								user2.SBI_VERSION_IN = null;
							}

						}

						column_index_tMysqlInput_3 = 17;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.SBI_VERSION_UP = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.SBI_VERSION_UP = tmpContent_tMysqlInput_3;
							} else {
								user2.SBI_VERSION_UP = null;
							}

						}

						column_index_tMysqlInput_3 = 18;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.SBI_VERSION_DE = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.SBI_VERSION_DE = tmpContent_tMysqlInput_3;
							} else {
								user2.SBI_VERSION_DE = null;
							}

						}

						column_index_tMysqlInput_3 = 19;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.META_VERSION = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.META_VERSION = tmpContent_tMysqlInput_3;
							} else {
								user2.META_VERSION = null;
							}

						}

						column_index_tMysqlInput_3 = 20;

						if (colQtyInRs_tMysqlInput_3 < column_index_tMysqlInput_3) {
							user2.ORGANIZATION = null;
						} else {

							tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
									.getString(column_index_tMysqlInput_3);
							if (tmpContent_tMysqlInput_3 != null) {
								user2.ORGANIZATION = tmpContent_tMysqlInput_3;
							} else {
								user2.ORGANIZATION = null;
							}

						}

						/**
						 * [tMysqlInput_3 begin ] stop
						 */
						/**
						 * [tMysqlInput_3 main ] start
						 */

						currentComponent = "tMysqlInput_3";

						tos_count_tMysqlInput_3++;

						/**
						 * [tMysqlInput_3 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// user2
						// user2

						if (execStat) {
							runStat.updateStatOnConnection("user2" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;
							Var.id = user2.ID;// ###############################
							// ###############################
							// # Output tables

							userRoleOut = null;

							// # Output table : 'userRoleOut'
							userRoleOut_tmp.ID = Var.id;
							userRoleOut_tmp.EXT_ROLE_ID = 5;
							userRoleOut_tmp.USER_IN = "biadmin";
							userRoleOut_tmp.USER_UP = null;
							userRoleOut_tmp.USER_DE = null;
							userRoleOut_tmp.TIME_IN = TalendDate.parseDate(
									"yyyy-MM-dd HH:mm:ss",
									"2014-06-07 09:47:32");
							userRoleOut_tmp.TIME_UP = null;
							userRoleOut_tmp.TIME_DE = null;
							userRoleOut_tmp.SBI_VERSION_IN = "4.0";
							userRoleOut_tmp.SBI_VERSION_UP = null;
							userRoleOut_tmp.SBI_VERSION_DE = null;
							userRoleOut_tmp.META_VERSION = null;
							userRoleOut_tmp.ORGANIZATION = "SPAGOBI";
							userRoleOut = userRoleOut_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "userRoleOut"
						if (userRoleOut != null) {

							/**
							 * [tMysqlOutput_2 main ] start
							 */

							currentComponent = "tMysqlOutput_2";

							// userRoleOut
							// userRoleOut

							if (execStat) {
								runStat.updateStatOnConnection("userRoleOut"
										+ iterateId, 1, 1);
							}

							whetherReject_tMysqlOutput_2 = false;
							pstmt_tMysqlOutput_2.setInt(1, userRoleOut.ID);

							pstmt_tMysqlOutput_2.setInt(2,
									userRoleOut.EXT_ROLE_ID);

							if (userRoleOut.USER_IN == null) {
								pstmt_tMysqlOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(3,
										userRoleOut.USER_IN);
							}

							if (userRoleOut.USER_UP == null) {
								pstmt_tMysqlOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(4,
										userRoleOut.USER_UP);
							}

							if (userRoleOut.USER_DE == null) {
								pstmt_tMysqlOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(5,
										userRoleOut.USER_DE);
							}

							if (userRoleOut.TIME_IN != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_IN
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(6,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(6,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(6,
										java.sql.Types.DATE);
							}

							if (userRoleOut.TIME_UP != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_UP
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(7,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(7,
										java.sql.Types.DATE);
							}

							if (userRoleOut.TIME_DE != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_DE
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(8,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(8,
										java.sql.Types.DATE);
							}

							if (userRoleOut.SBI_VERSION_IN == null) {
								pstmt_tMysqlOutput_2.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(9,
										userRoleOut.SBI_VERSION_IN);
							}

							if (userRoleOut.SBI_VERSION_UP == null) {
								pstmt_tMysqlOutput_2.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(10,
										userRoleOut.SBI_VERSION_UP);
							}

							if (userRoleOut.SBI_VERSION_DE == null) {
								pstmt_tMysqlOutput_2.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(11,
										userRoleOut.SBI_VERSION_DE);
							}

							if (userRoleOut.META_VERSION == null) {
								pstmt_tMysqlOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(12,
										userRoleOut.META_VERSION);
							}

							if (userRoleOut.ORGANIZATION == null) {
								pstmt_tMysqlOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(13,
										userRoleOut.ORGANIZATION);
							}

							if (userRoleOut.USER_IN == null) {
								pstmt_tMysqlOutput_2.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(14,
										userRoleOut.USER_IN);
							}

							if (userRoleOut.USER_UP == null) {
								pstmt_tMysqlOutput_2.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(15,
										userRoleOut.USER_UP);
							}

							if (userRoleOut.USER_DE == null) {
								pstmt_tMysqlOutput_2.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(16,
										userRoleOut.USER_DE);
							}

							if (userRoleOut.TIME_IN != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_IN
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(17,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(17,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(17,
										java.sql.Types.DATE);
							}

							if (userRoleOut.TIME_UP != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_UP
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(18,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(18,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(18,
										java.sql.Types.DATE);
							}

							if (userRoleOut.TIME_DE != null) {
								date_tMysqlOutput_2 = userRoleOut.TIME_DE
										.getTime();
								if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
										|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
									pstmt_tMysqlOutput_2.setString(19,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_2.setTimestamp(19,
											new java.sql.Timestamp(
													date_tMysqlOutput_2));
								}
							} else {
								pstmt_tMysqlOutput_2.setNull(19,
										java.sql.Types.DATE);
							}

							if (userRoleOut.SBI_VERSION_IN == null) {
								pstmt_tMysqlOutput_2.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(20,
										userRoleOut.SBI_VERSION_IN);
							}

							if (userRoleOut.SBI_VERSION_UP == null) {
								pstmt_tMysqlOutput_2.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(21,
										userRoleOut.SBI_VERSION_UP);
							}

							if (userRoleOut.SBI_VERSION_DE == null) {
								pstmt_tMysqlOutput_2.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(22,
										userRoleOut.SBI_VERSION_DE);
							}

							if (userRoleOut.META_VERSION == null) {
								pstmt_tMysqlOutput_2.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(23,
										userRoleOut.META_VERSION);
							}

							if (userRoleOut.ORGANIZATION == null) {
								pstmt_tMysqlOutput_2.setNull(24,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_2.setString(24,
										userRoleOut.ORGANIZATION);
							}

							int count_on_duplicate_key_tMysqlOutput_2 = 0;
							try {
								count_on_duplicate_key_tMysqlOutput_2 = pstmt_tMysqlOutput_2
										.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tMysqlOutput_2 = true;
								System.err.print(e.getMessage());
							}
							if (count_on_duplicate_key_tMysqlOutput_2 == 1) {
								insertedCount_tMysqlOutput_2 += count_on_duplicate_key_tMysqlOutput_2;
							} else {
								insertedCount_tMysqlOutput_2 += 1;
								updatedCount_tMysqlOutput_2 += count_on_duplicate_key_tMysqlOutput_2 - 1;
							}
							commitCounter_tMysqlOutput_2++;

							if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

								conn_tMysqlOutput_2.commit();

								commitCounter_tMysqlOutput_2 = 0;

							}

							tos_count_tMysqlOutput_2++;

							/**
							 * [tMysqlOutput_2 main ] stop
							 */

						} // End of branch "userRoleOut"

						/**
						 * [tMysqlInput_3 end ] start
						 */

						currentComponent = "tMysqlInput_3";

					}
				} finally {
					rs_tMysqlInput_3.close();
					stmt_tMysqlInput_3.close();

					if (conn_tMysqlInput_3 != null
							&& !conn_tMysqlInput_3.isClosed()) {
						conn_tMysqlInput_3.close();
					}

				}
				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					runStat.updateStatOnConnection("user2" + iterateId, 2, 0);
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				if (execStat) {
					runStat.updateStatOnConnection("userRoleOut" + iterateId,
							2, 0);
				}

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_3 finally ] start
				 */

				currentComponent = "tMysqlInput_3";

				/**
				 * [tMysqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final UserSpago UserSpagoClass = new UserSpago();

		int exitCode = UserSpagoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}
public void registerUser(String login,String password){
String[] args = {""};

PasswordEncrypt ps =new PasswordEncrypt();
String pswd = ps.testEncrypt(password);
runJobInTOS(args,login,pswd);

}
	public int runJobInTOS(String[] args,String login,String encryptedPassword) {
		// reset status
		status = "";
		
		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
		
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = UserSpago.class.getClassLoader()
					.getResourceAsStream(
							"migration/userspago_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap,login,encryptedPassword);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : UserSpago");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;

	@Override
	public int runJobInTOS(String[] arg0) {
		// TODO Auto-generated method stub
		return 0;
	}
}
/************************************************************************************************
* 132642 characters generated by Talend Open Studio for Data Integration on the
* 10 juin 2014 12:27:03 CET
************************************************************************************************/
